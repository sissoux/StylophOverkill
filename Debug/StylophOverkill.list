
StylophOverkill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008420  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080085f8  080085f8  000185f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008668  08008668  00020148  2**0
                  CONTENTS
  4 .ARM          00000000  08008668  08008668  00020148  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008668  08008668  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  08008670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008cc  20000148  080087b8  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  080087b8  00020a14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002034d  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cfc  00000000  00000000  000404c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001938  00000000  00000000  000441c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001770  00000000  00000000  00045b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023dc4  00000000  00000000  00047270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000165b1  00000000  00000000  0006b034  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000debef  00000000  00000000  000815e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001601d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aec  00000000  00000000  00160250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000148 	.word	0x20000148
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080085e0 	.word	0x080085e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000014c 	.word	0x2000014c
 8000214:	080085e0 	.word	0x080085e0

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 f900 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f007 fb75 	bl	8007928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 f90c 	bl	800148e <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 f8d8 	bl	800143e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	200000dc 	.word	0x200000dc
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000184 	.word	0x20000184
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000184 	.word	0x20000184

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3360      	adds	r3, #96	; 0x60
 80003b6:	461a      	mov	r2, r3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_ADC_SetOffset+0x40>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc90      	pop	{r4, r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	03fff000 	.word	0x03fff000

080003e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3360      	adds	r3, #96	; 0x60
 80003f6:	461a      	mov	r2, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000400:	6823      	ldr	r3, [r4, #0]
 8000402:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bc90      	pop	{r4, r7}
 800040e:	4770      	bx	lr

08000410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000410:	b490      	push	{r4, r7}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3360      	adds	r3, #96	; 0x60
 8000420:	461a      	mov	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bc90      	pop	{r4, r7}
 800043e:	4770      	bx	lr

08000440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3360      	adds	r3, #96	; 0x60
 8000450:	461a      	mov	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bc90      	pop	{r4, r7}
 800046e:	4770      	bx	lr

08000470 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3360      	adds	r3, #96	; 0x60
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bc90      	pop	{r4, r7}
 800049e:	4770      	bx	lr

080004a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004c6:	b490      	push	{r4, r7}
 80004c8:	b084      	sub	sp, #16
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3330      	adds	r3, #48	; 0x30
 80004d6:	461a      	mov	r2, r3
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	0a1b      	lsrs	r3, r3, #8
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	f003 030c 	and.w	r3, r3, #12
 80004e2:	4413      	add	r3, r2
 80004e4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80004e6:	6822      	ldr	r2, [r4, #0]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	f003 031f 	and.w	r3, r3, #31
 80004ee:	211f      	movs	r1, #31
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	401a      	ands	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	0e9b      	lsrs	r3, r3, #26
 80004fc:	f003 011f 	and.w	r1, r3, #31
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	f003 031f 	and.w	r3, r3, #31
 8000506:	fa01 f303 	lsl.w	r3, r1, r3
 800050a:	4313      	orrs	r3, r2
 800050c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bc90      	pop	{r4, r7}
 8000516:	4770      	bx	lr

08000518 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000518:	b490      	push	{r4, r7}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	3314      	adds	r3, #20
 8000528:	461a      	mov	r2, r3
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	0e5b      	lsrs	r3, r3, #25
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	4413      	add	r3, r2
 8000536:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000538:	6822      	ldr	r2, [r4, #0]
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	0d1b      	lsrs	r3, r3, #20
 800053e:	f003 031f 	and.w	r3, r3, #31
 8000542:	2107      	movs	r1, #7
 8000544:	fa01 f303 	lsl.w	r3, r1, r3
 8000548:	43db      	mvns	r3, r3
 800054a:	401a      	ands	r2, r3
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	0d1b      	lsrs	r3, r3, #20
 8000550:	f003 031f 	and.w	r3, r3, #31
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	4313      	orrs	r3, r2
 800055c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bc90      	pop	{r4, r7}
 8000566:	4770      	bx	lr

08000568 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000580:	43db      	mvns	r3, r3
 8000582:	401a      	ands	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f003 0318 	and.w	r3, r3, #24
 800058a:	4908      	ldr	r1, [pc, #32]	; (80005ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800058c:	40d9      	lsrs	r1, r3
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	400b      	ands	r3, r1
 8000592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000596:	431a      	orrs	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	0007ffff 	.word	0x0007ffff

080005b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80005c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	6093      	str	r3, [r2, #8]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005e8:	d101      	bne.n	80005ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80005ea:	2301      	movs	r3, #1
 80005ec:	e000      	b.n	80005f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800060c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000610:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000638:	d101      	bne.n	800063e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	2b01      	cmp	r3, #1
 800065e:	d101      	bne.n	8000664 <LL_ADC_IsEnabled+0x18>
 8000660:	2301      	movs	r3, #1
 8000662:	e000      	b.n	8000666 <LL_ADC_IsEnabled+0x1a>
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	2b04      	cmp	r3, #4
 8000684:	d101      	bne.n	800068a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d101      	bne.n	80006b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80006ac:	2301      	movs	r3, #1
 80006ae:	e000      	b.n	80006b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d101      	bne.n	80006da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e16b      	b.n	80009b2 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d109      	bne.n	80006fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f007 f941 	bl	8007970 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff67 	bl	80005d4 <LL_ADC_IsDeepPowerDownEnabled>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d004      	beq.n	8000716 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff4d 	bl	80005b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff82 	bl	8000624 <LL_ADC_IsInternalRegulatorEnabled>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d113      	bne.n	800074e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff66 	bl	80005fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000730:	4ba2      	ldr	r3, [pc, #648]	; (80009bc <HAL_ADC_Init+0x2fc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	099b      	lsrs	r3, r3, #6
 8000736:	4aa2      	ldr	r2, [pc, #648]	; (80009c0 <HAL_ADC_Init+0x300>)
 8000738:	fba2 2303 	umull	r2, r3, r2, r3
 800073c:	099b      	lsrs	r3, r3, #6
 800073e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000740:	e002      	b.n	8000748 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	3b01      	subs	r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1f9      	bne.n	8000742 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff66 	bl	8000624 <LL_ADC_IsInternalRegulatorEnabled>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10d      	bne.n	800077a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000762:	f043 0210 	orr.w	r2, r3, #16
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076e:	f043 0201 	orr.w	r2, r3, #1
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff77 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 8000784:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	2b00      	cmp	r3, #0
 8000790:	f040 8106 	bne.w	80009a0 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	2b00      	cmp	r3, #0
 8000798:	f040 8102 	bne.w	80009a0 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80007a4:	f043 0202 	orr.w	r2, r3, #2
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff4b 	bl	800064c <LL_ADC_IsEnabled>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d111      	bne.n	80007e0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80007c0:	f7ff ff44 	bl	800064c <LL_ADC_IsEnabled>
 80007c4:	4604      	mov	r4, r0
 80007c6:	487f      	ldr	r0, [pc, #508]	; (80009c4 <HAL_ADC_Init+0x304>)
 80007c8:	f7ff ff40 	bl	800064c <LL_ADC_IsEnabled>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4323      	orrs	r3, r4
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d105      	bne.n	80007e0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4619      	mov	r1, r3
 80007da:	487b      	ldr	r0, [pc, #492]	; (80009c8 <HAL_ADC_Init+0x308>)
 80007dc:	f7ff fdae 	bl	800033c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7f5b      	ldrb	r3, [r3, #29]
 80007e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80007f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80007f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000800:	4313      	orrs	r3, r2
 8000802:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800080a:	2b01      	cmp	r3, #1
 800080c:	d106      	bne.n	800081c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000812:	3b01      	subs	r3, #1
 8000814:	045b      	lsls	r3, r3, #17
 8000816:	69ba      	ldr	r2, [r7, #24]
 8000818:	4313      	orrs	r3, r2
 800081a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000820:	2b00      	cmp	r3, #0
 8000822:	d009      	beq.n	8000838 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000828:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4313      	orrs	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68da      	ldr	r2, [r3, #12]
 800083e:	4b63      	ldr	r3, [pc, #396]	; (80009cc <HAL_ADC_Init+0x30c>)
 8000840:	4013      	ands	r3, r2
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	6812      	ldr	r2, [r2, #0]
 8000846:	69b9      	ldr	r1, [r7, #24]
 8000848:	430b      	orrs	r3, r1
 800084a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	691b      	ldr	r3, [r3, #16]
 8000852:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	430a      	orrs	r2, r1
 8000860:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff03 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 800086c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff10 	bl	8000698 <LL_ADC_INJ_IsConversionOngoing>
 8000878:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d16d      	bne.n	800095c <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d16a      	bne.n	800095c <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800088a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000892:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008a2:	f023 0302 	bic.w	r3, r3, #2
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	6812      	ldr	r2, [r2, #0]
 80008aa:	69b9      	ldr	r1, [r7, #24]
 80008ac:	430b      	orrs	r3, r1
 80008ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d017      	beq.n	80008e8 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	691a      	ldr	r2, [r3, #16]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80008d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80008d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	6911      	ldr	r1, [r2, #16]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	430b      	orrs	r3, r1
 80008e2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80008e6:	e013      	b.n	8000910 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	691a      	ldr	r2, [r3, #16]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	6812      	ldr	r2, [r2, #0]
 8000904:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800090c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000916:	2b01      	cmp	r3, #1
 8000918:	d118      	bne.n	800094c <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000924:	f023 0304 	bic.w	r3, r3, #4
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000930:	4311      	orrs	r1, r2
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000936:	4311      	orrs	r1, r2
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800093c:	430a      	orrs	r2, r1
 800093e:	431a      	orrs	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f042 0201 	orr.w	r2, r2, #1
 8000948:	611a      	str	r2, [r3, #16]
 800094a:	e007      	b.n	800095c <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	691a      	ldr	r2, [r3, #16]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f022 0201 	bic.w	r2, r2, #1
 800095a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10c      	bne.n	800097e <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f023 010f 	bic.w	r1, r3, #15
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	430a      	orrs	r2, r1
 800097a:	631a      	str	r2, [r3, #48]	; 0x30
 800097c:	e007      	b.n	800098e <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f022 020f 	bic.w	r2, r2, #15
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000992:	f023 0303 	bic.w	r3, r3, #3
 8000996:	f043 0201 	orr.w	r2, r3, #1
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	65da      	str	r2, [r3, #92]	; 0x5c
 800099e:	e007      	b.n	80009b0 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a4:	f043 0210 	orr.w	r2, r3, #16
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3724      	adds	r7, #36	; 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000dc 	.word	0x200000dc
 80009c0:	053e2d63 	.word	0x053e2d63
 80009c4:	50000100 	.word	0x50000100
 80009c8:	50000300 	.word	0x50000300
 80009cc:	fff04007 	.word	0xfff04007

080009d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b0a6      	sub	sp, #152	; 0x98
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d101      	bne.n	80009f2 <HAL_ADC_ConfigChannel+0x22>
 80009ee:	2302      	movs	r3, #2
 80009f0:	e348      	b.n	8001084 <HAL_ADC_ConfigChannel+0x6b4>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2201      	movs	r2, #1
 80009f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe37 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 832d 	bne.w	8001066 <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	6859      	ldr	r1, [r3, #4]
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	f7ff fd54 	bl	80004c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe25 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 8000a28:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fe31 	bl	8000698 <LL_ADC_INJ_IsConversionOngoing>
 8000a36:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000a3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 817b 	bne.w	8000d3a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f040 8176 	bne.w	8000d3a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a56:	d10f      	bne.n	8000a78 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2200      	movs	r2, #0
 8000a62:	4619      	mov	r1, r3
 8000a64:	f7ff fd58 	bl	8000518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fd15 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000a76:	e00e      	b.n	8000a96 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	6819      	ldr	r1, [r3, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	461a      	mov	r2, r3
 8000a86:	f7ff fd47 	bl	8000518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fd05 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	695a      	ldr	r2, [r3, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	08db      	lsrs	r3, r3, #3
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d022      	beq.n	8000afe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	6919      	ldr	r1, [r3, #16]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ac8:	f7ff fc6c 	bl	80003a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	6919      	ldr	r1, [r3, #16]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f7ff fcb1 	bl	8000440 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	6919      	ldr	r1, [r3, #16]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	7f1b      	ldrb	r3, [r3, #28]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d102      	bne.n	8000af4 <HAL_ADC_ConfigChannel+0x124>
 8000aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000af2:	e000      	b.n	8000af6 <HAL_ADC_ConfigChannel+0x126>
 8000af4:	2300      	movs	r3, #0
 8000af6:	461a      	mov	r2, r3
 8000af8:	f7ff fcba 	bl	8000470 <LL_ADC_SetOffsetSaturation>
 8000afc:	e11d      	b.n	8000d3a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fc6f 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10a      	bne.n	8000b2a <HAL_ADC_ConfigChannel+0x15a>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fc64 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	0e9b      	lsrs	r3, r3, #26
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	e012      	b.n	8000b50 <HAL_ADC_ConfigChannel+0x180>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fc59 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b40:	fa93 f3a3 	rbit	r3, r3
 8000b44:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b48:	fab3 f383 	clz	r3, r3
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d105      	bne.n	8000b68 <HAL_ADC_ConfigChannel+0x198>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	0e9b      	lsrs	r3, r3, #26
 8000b62:	f003 031f 	and.w	r3, r3, #31
 8000b66:	e00a      	b.n	8000b7e <HAL_ADC_ConfigChannel+0x1ae>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b70:	fa93 f3a3 	rbit	r3, r3
 8000b74:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b78:	fab3 f383 	clz	r3, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d106      	bne.n	8000b90 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fc40 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2101      	movs	r1, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fc26 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10a      	bne.n	8000bbc <HAL_ADC_ConfigChannel+0x1ec>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2101      	movs	r1, #1
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fc1b 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	0e9b      	lsrs	r3, r3, #26
 8000bb6:	f003 021f 	and.w	r2, r3, #31
 8000bba:	e010      	b.n	8000bde <HAL_ADC_ConfigChannel+0x20e>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fc10 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bce:	fa93 f3a3 	rbit	r3, r3
 8000bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bd6:	fab3 f383 	clz	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d105      	bne.n	8000bf6 <HAL_ADC_ConfigChannel+0x226>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	0e9b      	lsrs	r3, r3, #26
 8000bf0:	f003 031f 	and.w	r3, r3, #31
 8000bf4:	e00a      	b.n	8000c0c <HAL_ADC_ConfigChannel+0x23c>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c06:	fab3 f383 	clz	r3, r3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d106      	bne.n	8000c1e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2200      	movs	r2, #0
 8000c16:	2101      	movs	r1, #1
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbf9 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2102      	movs	r1, #2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fbdf 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10a      	bne.n	8000c4a <HAL_ADC_ConfigChannel+0x27a>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fbd4 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	0e9b      	lsrs	r3, r3, #26
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	e010      	b.n	8000c6c <HAL_ADC_ConfigChannel+0x29c>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2102      	movs	r1, #2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fbc9 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c5c:	fa93 f3a3 	rbit	r3, r3
 8000c60:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c64:	fab3 f383 	clz	r3, r3
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d105      	bne.n	8000c84 <HAL_ADC_ConfigChannel+0x2b4>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	0e9b      	lsrs	r3, r3, #26
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	e00a      	b.n	8000c9a <HAL_ADC_ConfigChannel+0x2ca>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c8c:	fa93 f3a3 	rbit	r3, r3
 8000c90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c94:	fab3 f383 	clz	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d106      	bne.n	8000cac <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fbb2 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fb98 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10a      	bne.n	8000cd8 <HAL_ADC_ConfigChannel+0x308>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2103      	movs	r1, #3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fb8d 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	0e9b      	lsrs	r3, r3, #26
 8000cd2:	f003 021f 	and.w	r2, r3, #31
 8000cd6:	e010      	b.n	8000cfa <HAL_ADC_ConfigChannel+0x32a>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2103      	movs	r1, #3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fb82 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cea:	fa93 f3a3 	rbit	r3, r3
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cf2:	fab3 f383 	clz	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d105      	bne.n	8000d12 <HAL_ADC_ConfigChannel+0x342>
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	0e9b      	lsrs	r3, r3, #26
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	e00a      	b.n	8000d28 <HAL_ADC_ConfigChannel+0x358>
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d1a:	fa93 f3a3 	rbit	r3, r3
 8000d1e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d22:	fab3 f383 	clz	r3, r3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d106      	bne.n	8000d3a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2200      	movs	r2, #0
 8000d32:	2103      	movs	r1, #3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fb6b 	bl	8000410 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fc84 	bl	800064c <LL_ADC_IsEnabled>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 810c 	bne.w	8000f64 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	f7ff fc05 	bl	8000568 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	4aab      	ldr	r2, [pc, #684]	; (8001010 <HAL_ADC_ConfigChannel+0x640>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	f040 80fd 	bne.w	8000f64 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10b      	bne.n	8000d92 <HAL_ADC_ConfigChannel+0x3c2>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	0e9b      	lsrs	r3, r3, #26
 8000d80:	3301      	adds	r3, #1
 8000d82:	f003 031f 	and.w	r3, r3, #31
 8000d86:	2b09      	cmp	r3, #9
 8000d88:	bf94      	ite	ls
 8000d8a:	2301      	movls	r3, #1
 8000d8c:	2300      	movhi	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	e012      	b.n	8000db8 <HAL_ADC_ConfigChannel+0x3e8>
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000da2:	fab3 f383 	clz	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	2b09      	cmp	r3, #9
 8000db0:	bf94      	ite	ls
 8000db2:	2301      	movls	r3, #1
 8000db4:	2300      	movhi	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d064      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d107      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x408>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	0e9b      	lsrs	r3, r3, #26
 8000dce:	3301      	adds	r3, #1
 8000dd0:	069b      	lsls	r3, r3, #26
 8000dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000dd6:	e00e      	b.n	8000df6 <HAL_ADC_ConfigChannel+0x426>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000de0:	fa93 f3a3 	rbit	r3, r3
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de8:	fab3 f383 	clz	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	3301      	adds	r3, #1
 8000df0:	069b      	lsls	r3, r3, #26
 8000df2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d109      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x446>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	0e9b      	lsrs	r3, r3, #26
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f003 031f 	and.w	r3, r3, #31
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	e010      	b.n	8000e38 <HAL_ADC_ConfigChannel+0x468>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1e:	fa93 f3a3 	rbit	r3, r3
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e26:	fab3 f383 	clz	r3, r3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2101      	movs	r1, #1
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	ea42 0103 	orr.w	r1, r2, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10a      	bne.n	8000e5e <HAL_ADC_ConfigChannel+0x48e>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	0e9b      	lsrs	r3, r3, #26
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	051b      	lsls	r3, r3, #20
 8000e5c:	e011      	b.n	8000e82 <HAL_ADC_ConfigChannel+0x4b2>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3301      	adds	r3, #1
 8000e76:	f003 021f 	and.w	r2, r3, #31
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e82:	430b      	orrs	r3, r1
 8000e84:	e069      	b.n	8000f5a <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d107      	bne.n	8000ea2 <HAL_ADC_ConfigChannel+0x4d2>
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	0e9b      	lsrs	r3, r3, #26
 8000e98:	3301      	adds	r3, #1
 8000e9a:	069b      	lsls	r3, r3, #26
 8000e9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ea0:	e00e      	b.n	8000ec0 <HAL_ADC_ConfigChannel+0x4f0>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	fa93 f3a3 	rbit	r3, r3
 8000eae:	61fb      	str	r3, [r7, #28]
  return result;
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	fab3 f383 	clz	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3301      	adds	r3, #1
 8000eba:	069b      	lsls	r3, r3, #26
 8000ebc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d109      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x510>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0e9b      	lsrs	r3, r3, #26
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	e010      	b.n	8000f02 <HAL_ADC_ConfigChannel+0x532>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	617b      	str	r3, [r7, #20]
  return result;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fab3 f383 	clz	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f003 031f 	and.w	r3, r3, #31
 8000efc:	2101      	movs	r1, #1
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	ea42 0103 	orr.w	r1, r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10d      	bne.n	8000f2e <HAL_ADC_ConfigChannel+0x55e>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	0e9b      	lsrs	r3, r3, #26
 8000f18:	3301      	adds	r3, #1
 8000f1a:	f003 021f 	and.w	r2, r3, #31
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	3b1e      	subs	r3, #30
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f2c:	e014      	b.n	8000f58 <HAL_ADC_ConfigChannel+0x588>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	60fb      	str	r3, [r7, #12]
  return result;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	fab3 f383 	clz	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	3301      	adds	r3, #1
 8000f46:	f003 021f 	and.w	r2, r3, #31
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	3b1e      	subs	r3, #30
 8000f52:	051b      	lsls	r3, r3, #20
 8000f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	6892      	ldr	r2, [r2, #8]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fada 	bl	8000518 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <HAL_ADC_ConfigChannel+0x644>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 8083 	beq.w	8001078 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f72:	4829      	ldr	r0, [pc, #164]	; (8001018 <HAL_ADC_ConfigChannel+0x648>)
 8000f74:	f7ff fa08 	bl	8000388 <LL_ADC_GetCommonPathInternalCh>
 8000f78:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a26      	ldr	r2, [pc, #152]	; (800101c <HAL_ADC_ConfigChannel+0x64c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d004      	beq.n	8000f90 <HAL_ADC_ConfigChannel+0x5c0>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a25      	ldr	r2, [pc, #148]	; (8001020 <HAL_ADC_ConfigChannel+0x650>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d126      	bne.n	8000fde <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d120      	bne.n	8000fde <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fa4:	d168      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000fa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000faa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4819      	ldr	r0, [pc, #100]	; (8001018 <HAL_ADC_ConfigChannel+0x648>)
 8000fb2:	f7ff f9d6 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_ADC_ConfigChannel+0x654>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	099b      	lsrs	r3, r3, #6
 8000fbc:	4a1a      	ldr	r2, [pc, #104]	; (8001028 <HAL_ADC_ConfigChannel+0x658>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	099a      	lsrs	r2, r3, #6
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8000fce:	e002      	b.n	8000fd6 <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f9      	bne.n	8000fd0 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000fdc:	e04c      	b.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_ADC_ConfigChannel+0x65c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d125      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x664>
 8000fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d11f      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_ADC_ConfigChannel+0x660>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d03c      	beq.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001006:	4619      	mov	r1, r3
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <HAL_ADC_ConfigChannel+0x648>)
 800100a:	f7ff f9aa 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800100e:	e033      	b.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
 8001010:	407f0000 	.word	0x407f0000
 8001014:	80080000 	.word	0x80080000
 8001018:	50000300 	.word	0x50000300
 800101c:	c3210000 	.word	0xc3210000
 8001020:	90c00010 	.word	0x90c00010
 8001024:	200000dc 	.word	0x200000dc
 8001028:	053e2d63 	.word	0x053e2d63
 800102c:	c7520000 	.word	0xc7520000
 8001030:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a14      	ldr	r2, [pc, #80]	; (800108c <HAL_ADC_ConfigChannel+0x6bc>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d11c      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800103e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d116      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_ADC_ConfigChannel+0x6c0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d011      	beq.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	4619      	mov	r1, r3
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <HAL_ADC_ConfigChannel+0x6c4>)
 8001060:	f7ff f97f 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
 8001064:	e008      	b.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106a:	f043 0220 	orr.w	r2, r3, #32
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001080:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001084:	4618      	mov	r0, r3
 8001086:	3798      	adds	r7, #152	; 0x98
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	cb840000 	.word	0xcb840000
 8001090:	50000100 	.word	0x50000100
 8001094:	50000300 	.word	0x50000300

08001098 <LL_ADC_IsEnabled>:
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <LL_ADC_IsEnabled+0x18>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <LL_ADC_IsEnabled+0x1a>
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_ADC_REG_IsConversionOngoing>:
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d101      	bne.n	80010d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b0a1      	sub	sp, #132	; 0x84
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80010fe:	2302      	movs	r3, #2
 8001100:	e087      	b.n	8001212 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001112:	d102      	bne.n	800111a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001114:	4b41      	ldr	r3, [pc, #260]	; (800121c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	e001      	b.n	800111e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	f043 0220 	orr.w	r2, r3, #32
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e06a      	b.n	8001212 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffbd 	bl	80010be <LL_ADC_REG_IsConversionOngoing>
 8001144:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ffb7 	bl	80010be <LL_ADC_REG_IsConversionOngoing>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d14c      	bne.n	80011f0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001158:	2b00      	cmp	r3, #0
 800115a:	d149      	bne.n	80011f0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800115c:	4b30      	ldr	r3, [pc, #192]	; (8001220 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800115e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d028      	beq.n	80011ba <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800117a:	035b      	lsls	r3, r3, #13
 800117c:	430b      	orrs	r3, r1
 800117e:	431a      	orrs	r2, r3
 8001180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001182:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001184:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001188:	f7ff ff86 	bl	8001098 <LL_ADC_IsEnabled>
 800118c:	4604      	mov	r4, r0
 800118e:	4823      	ldr	r0, [pc, #140]	; (800121c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001190:	f7ff ff82 	bl	8001098 <LL_ADC_IsEnabled>
 8001194:	4603      	mov	r3, r0
 8001196:	4323      	orrs	r3, r4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d133      	bne.n	8001204 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800119c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80011a4:	f023 030f 	bic.w	r3, r3, #15
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	6811      	ldr	r1, [r2, #0]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	6892      	ldr	r2, [r2, #8]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	431a      	orrs	r2, r3
 80011b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011b6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80011b8:	e024      	b.n	8001204 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80011ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011ca:	f7ff ff65 	bl	8001098 <LL_ADC_IsEnabled>
 80011ce:	4604      	mov	r4, r0
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80011d2:	f7ff ff61 	bl	8001098 <LL_ADC_IsEnabled>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4323      	orrs	r3, r4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d112      	bne.n	8001204 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80011de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80011e6:	f023 030f 	bic.w	r3, r3, #15
 80011ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80011ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80011ee:	e009      	b.n	8001204 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f4:	f043 0220 	orr.w	r2, r3, #32
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001202:	e000      	b.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001204:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800120e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001212:	4618      	mov	r0, r3
 8001214:	3784      	adds	r7, #132	; 0x84
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	bf00      	nop
 800121c:	50000100 	.word	0x50000100
 8001220:	50000300 	.word	0x50000300

08001224 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e023      	b.n	800127e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d106      	bne.n	8001250 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f006 fbfc 	bl	8007a48 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff29 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff40 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff90 	bl	800137c <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5f 	bl	8001328 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff33 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa4 	bl	80013e4 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e014      	b.n	80014e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	791b      	ldrb	r3, [r3, #4]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f006 fadd 	bl	8007a88 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2202      	movs	r2, #2
 80014d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	795b      	ldrb	r3, [r3, #5]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_DAC_ConfigChannel+0x1c>
 8001504:	2302      	movs	r3, #2
 8001506:	e194      	b.n	8001832 <HAL_DAC_ConfigChannel+0x346>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2202      	movs	r2, #2
 8001512:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b04      	cmp	r3, #4
 800151a:	d174      	bne.n	8001606 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d137      	bne.n	8001592 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001522:	f7fe fedd 	bl	80002e0 <HAL_GetTick>
 8001526:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001528:	e011      	b.n	800154e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800152a:	f7fe fed9 	bl	80002e0 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d90a      	bls.n	800154e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	f043 0208 	orr.w	r2, r3, #8
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2203      	movs	r2, #3
 8001548:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e171      	b.n	8001832 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e6      	bne.n	800152a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800155c:	2001      	movs	r0, #1
 800155e:	f7fe fecb 	bl	80002f8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800156a:	641a      	str	r2, [r3, #64]	; 0x40
 800156c:	e01e      	b.n	80015ac <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800156e:	f7fe feb7 	bl	80002e0 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d90a      	bls.n	8001592 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	f043 0208 	orr.w	r2, r3, #8
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2203      	movs	r2, #3
 800158c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e14f      	b.n	8001832 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001598:	2b00      	cmp	r3, #0
 800159a:	dbe8      	blt.n	800156e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800159c:	2001      	movs	r0, #1
 800159e:	f7fe feab 	bl	80002f8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	ea02 0103 	and.w	r1, r2, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	409a      	lsls	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	21ff      	movs	r1, #255	; 0xff
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	ea02 0103 	and.w	r1, r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	409a      	lsls	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d11d      	bne.n	800164a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	221f      	movs	r2, #31
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	4013      	ands	r3, r2
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163e:	4313      	orrs	r3, r2
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001648:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2207      	movs	r2, #7
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001662:	4013      	ands	r3, r2
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
 8001676:	e011      	b.n	800169c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001684:	2301      	movs	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
 8001688:	e008      	b.n	800169c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d102      	bne.n	8001698 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001692:	2301      	movs	r3, #1
 8001694:	623b      	str	r3, [r7, #32]
 8001696:	e001      	b.n	800169c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	6a3a      	ldr	r2, [r7, #32]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016be:	4013      	ands	r3, r2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d102      	bne.n	80016d0 <HAL_DAC_ConfigChannel+0x1e4>
 80016ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ce:	e000      	b.n	80016d2 <HAL_DAC_ConfigChannel+0x1e6>
 80016d0:	2300      	movs	r3, #0
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ea:	4013      	ands	r3, r2
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	795b      	ldrb	r3, [r3, #5]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d102      	bne.n	80016fc <HAL_DAC_ConfigChannel+0x210>
 80016f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016fa:	e000      	b.n	80016fe <HAL_DAC_ConfigChannel+0x212>
 80016fc:	2300      	movs	r3, #0
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d114      	bne.n	800173e <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001714:	f002 f82e 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8001718:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	4a47      	ldr	r2, [pc, #284]	; (800183c <HAL_DAC_ConfigChannel+0x350>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d904      	bls.n	800172c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
 800172a:	e00d      	b.n	8001748 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	4a44      	ldr	r2, [pc, #272]	; (8001840 <HAL_DAC_ConfigChannel+0x354>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d909      	bls.n	8001748 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	e004      	b.n	8001748 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	4313      	orrs	r3, r2
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001756:	4313      	orrs	r3, r2
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	400a      	ands	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179a:	4013      	ands	r3, r2
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b2:	4313      	orrs	r3, r2
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6819      	ldr	r1, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	22c0      	movs	r2, #192	; 0xc0
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43da      	mvns	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	400a      	ands	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	ea02 0103 	and.w	r1, r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	09896800 	.word	0x09896800
 8001840:	04c4b400 	.word	0x04c4b400

08001844 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e08d      	b.n	8001972 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_DMA_Init+0x138>)
 800185e:	429a      	cmp	r2, r3
 8001860:	d80f      	bhi.n	8001882 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	4b45      	ldr	r3, [pc, #276]	; (8001980 <HAL_DMA_Init+0x13c>)
 800186a:	4413      	add	r3, r2
 800186c:	4a45      	ldr	r2, [pc, #276]	; (8001984 <HAL_DMA_Init+0x140>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	009a      	lsls	r2, r3, #2
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a42      	ldr	r2, [pc, #264]	; (8001988 <HAL_DMA_Init+0x144>)
 800187e:	641a      	str	r2, [r3, #64]	; 0x40
 8001880:	e00e      	b.n	80018a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b40      	ldr	r3, [pc, #256]	; (800198c <HAL_DMA_Init+0x148>)
 800188a:	4413      	add	r3, r2
 800188c:	4a3d      	ldr	r2, [pc, #244]	; (8001984 <HAL_DMA_Init+0x140>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	009a      	lsls	r2, r3, #2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a3c      	ldr	r2, [pc, #240]	; (8001990 <HAL_DMA_Init+0x14c>)
 800189e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f8fe 	bl	8001af4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001900:	d102      	bne.n	8001908 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800191c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d010      	beq.n	8001948 <HAL_DMA_Init+0x104>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b04      	cmp	r3, #4
 800192c:	d80c      	bhi.n	8001948 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f91e 	bl	8001b70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	e008      	b.n	800195a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40020407 	.word	0x40020407
 8001980:	bffdfff8 	.word	0xbffdfff8
 8001984:	cccccccd 	.word	0xcccccccd
 8001988:	40020000 	.word	0x40020000
 800198c:	bffdfbf8 	.word	0xbffdfbf8
 8001990:	40020400 	.word	0x40020400

08001994 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2204      	movs	r2, #4
 80019b6:	409a      	lsls	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d026      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x7a>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d021      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d107      	bne.n	80019e8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0204 	bic.w	r2, r2, #4
 80019e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	2104      	movs	r1, #4
 80019f6:	fa01 f202 	lsl.w	r2, r1, r2
 80019fa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d071      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a0c:	e06c      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2202      	movs	r2, #2
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d02e      	beq.n	8001a80 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d029      	beq.n	8001a80 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0320 	and.w	r3, r3, #32
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10b      	bne.n	8001a52 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 020a 	bic.w	r2, r2, #10
 8001a48:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f003 021f 	and.w	r2, r3, #31
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2102      	movs	r1, #2
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d038      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a7e:	e033      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	2208      	movs	r2, #8
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d02a      	beq.n	8001aea <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d025      	beq.n	8001aea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 020e 	bic.w	r2, r2, #14
 8001aac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f003 021f 	and.w	r2, r3, #31
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2101      	movs	r1, #1
 8001abc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
}
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d802      	bhi.n	8001b0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e001      	b.n	8001b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b10:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	3b08      	subs	r3, #8
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b20:	fba2 2303 	umull	r2, r3, r2, r3
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	009a      	lsls	r2, r3, #2
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4413      	add	r3, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	2201      	movs	r2, #1
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40020407 	.word	0x40020407
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020820 	.word	0x40020820
 8001b68:	cccccccd 	.word	0xcccccccd
 8001b6c:	40020880 	.word	0x40020880

08001b70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b92:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	1000823f 	.word	0x1000823f
 8001bb4:	40020940 	.word	0x40020940

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bc6:	e15a      	b.n	8001e7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 814c 	beq.w	8001e78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d00b      	beq.n	8001c00 <HAL_GPIO_Init+0x48>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d007      	beq.n	8001c00 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf4:	2b11      	cmp	r3, #17
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b12      	cmp	r3, #18
 8001bfe:	d130      	bne.n	8001c62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c36:	2201      	movs	r2, #1
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 0201 	and.w	r2, r3, #1
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0xea>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d123      	bne.n	8001cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	6939      	ldr	r1, [r7, #16]
 8001ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0203 	and.w	r2, r3, #3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80a6 	beq.w	8001e78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <HAL_GPIO_Init+0x2e4>)
 8001d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d30:	4a5a      	ldr	r2, [pc, #360]	; (8001e9c <HAL_GPIO_Init+0x2e4>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6613      	str	r3, [r2, #96]	; 0x60
 8001d38:	4b58      	ldr	r3, [pc, #352]	; (8001e9c <HAL_GPIO_Init+0x2e4>)
 8001d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d44:	4a56      	ldr	r2, [pc, #344]	; (8001ea0 <HAL_GPIO_Init+0x2e8>)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d6e:	d01f      	beq.n	8001db0 <HAL_GPIO_Init+0x1f8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a4c      	ldr	r2, [pc, #304]	; (8001ea4 <HAL_GPIO_Init+0x2ec>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d019      	beq.n	8001dac <HAL_GPIO_Init+0x1f4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a4b      	ldr	r2, [pc, #300]	; (8001ea8 <HAL_GPIO_Init+0x2f0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d013      	beq.n	8001da8 <HAL_GPIO_Init+0x1f0>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a4a      	ldr	r2, [pc, #296]	; (8001eac <HAL_GPIO_Init+0x2f4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d00d      	beq.n	8001da4 <HAL_GPIO_Init+0x1ec>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a49      	ldr	r2, [pc, #292]	; (8001eb0 <HAL_GPIO_Init+0x2f8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d007      	beq.n	8001da0 <HAL_GPIO_Init+0x1e8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a48      	ldr	r2, [pc, #288]	; (8001eb4 <HAL_GPIO_Init+0x2fc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d101      	bne.n	8001d9c <HAL_GPIO_Init+0x1e4>
 8001d98:	2305      	movs	r3, #5
 8001d9a:	e00a      	b.n	8001db2 <HAL_GPIO_Init+0x1fa>
 8001d9c:	2306      	movs	r3, #6
 8001d9e:	e008      	b.n	8001db2 <HAL_GPIO_Init+0x1fa>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e006      	b.n	8001db2 <HAL_GPIO_Init+0x1fa>
 8001da4:	2303      	movs	r3, #3
 8001da6:	e004      	b.n	8001db2 <HAL_GPIO_Init+0x1fa>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e002      	b.n	8001db2 <HAL_GPIO_Init+0x1fa>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <HAL_GPIO_Init+0x1fa>
 8001db0:	2300      	movs	r3, #0
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	f002 0203 	and.w	r2, r2, #3
 8001db8:	0092      	lsls	r2, r2, #2
 8001dba:	4093      	lsls	r3, r2
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc2:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_GPIO_Init+0x2e8>)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dd0:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001df4:	4a30      	ldr	r2, [pc, #192]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e1e:	4a26      	ldr	r2, [pc, #152]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e24:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e48:	4a1b      	ldr	r2, [pc, #108]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e72:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_GPIO_Init+0x300>)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f47f ae9d 	bne.w	8001bc8 <HAL_GPIO_Init+0x10>
  }
}
 8001e8e:	bf00      	nop
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	48000400 	.word	0x48000400
 8001ea8:	48000800 	.word	0x48000800
 8001eac:	48000c00 	.word	0x48000c00
 8001eb0:	48001000 	.word	0x48001000
 8001eb4:	48001400 	.word	0x48001400
 8001eb8:	40010400 	.word	0x40010400

08001ebc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	b08b      	sub	sp, #44	; 0x2c
 8001ec0:	af06      	add	r7, sp, #24
 8001ec2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0ad      	b.n	800202a <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f005 ff0c 	bl	8007d00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 fe82 	bl	8004bfe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	e035      	b.n	8001f6c <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	015b      	lsls	r3, r3, #5
 8001f06:	4413      	add	r3, r2
 8001f08:	3329      	adds	r3, #41	; 0x29
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	015b      	lsls	r3, r3, #5
 8001f14:	4413      	add	r3, r2
 8001f16:	3328      	adds	r3, #40	; 0x28
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	b291      	uxth	r1, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	015b      	lsls	r3, r3, #5
 8001f26:	4413      	add	r3, r2
 8001f28:	3336      	adds	r3, #54	; 0x36
 8001f2a:	460a      	mov	r2, r1
 8001f2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	015b      	lsls	r3, r3, #5
 8001f34:	4413      	add	r3, r2
 8001f36:	332b      	adds	r3, #43	; 0x2b
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	015b      	lsls	r3, r3, #5
 8001f42:	4413      	add	r3, r2
 8001f44:	3338      	adds	r3, #56	; 0x38
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	015b      	lsls	r3, r3, #5
 8001f50:	4413      	add	r3, r2
 8001f52:	333c      	adds	r3, #60	; 0x3c
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	015b      	lsls	r3, r3, #5
 8001f60:	4413      	add	r3, r2
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d3c4      	bcc.n	8001f00 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	e031      	b.n	8001fe0 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	015b      	lsls	r3, r3, #5
 8001f82:	4413      	add	r3, r2
 8001f84:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	015b      	lsls	r3, r3, #5
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	015b      	lsls	r3, r3, #5
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	015b      	lsls	r3, r3, #5
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	015b      	lsls	r3, r3, #5
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	330a      	adds	r3, #10
 8001fd2:	015b      	lsls	r3, r3, #5
 8001fd4:	4413      	add	r3, r2
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d3c8      	bcc.n	8001f7c <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	687e      	ldr	r6, [r7, #4]
 8001ff2:	466d      	mov	r5, sp
 8001ff4:	f106 0410 	add.w	r4, r6, #16
 8001ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	602b      	str	r3, [r5, #0]
 8002000:	1d33      	adds	r3, r6, #4
 8002002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002004:	6838      	ldr	r0, [r7, #0]
 8002006:	f002 fe15 	bl	8004c34 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d102      	bne.n	8002028 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fe21 	bl	8002c6a <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002032 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_PCD_Start+0x16>
 8002044:	2302      	movs	r3, #2
 8002046:	e012      	b.n	800206e <HAL_PCD_Start+0x3c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fe39 	bl	8005ccc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f002 fdb4 	bl	8004bcc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f003 fe39 	bl	8005cfa <USB_ReadInterrupts>
 8002088:	4603      	mov	r3, r0
 800208a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002092:	d102      	bne.n	800209a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fb1f 	bl	80026d8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fe2b 	bl	8005cfa <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ae:	d112      	bne.n	80020d6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c2:	b292      	uxth	r2, r2
 80020c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f005 feb0 	bl	8007e2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80020ce:	2100      	movs	r1, #0
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f91e 	bl	8002312 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fe0d 	bl	8005cfa <USB_ReadInterrupts>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020ea:	d10b      	bne.n	8002104 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020fe:	b292      	uxth	r2, r2
 8002100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fdf6 	bl	8005cfa <USB_ReadInterrupts>
 800210e:	4603      	mov	r3, r0
 8002110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002118:	d10b      	bne.n	8002132 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002122:	b29a      	uxth	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800212c:	b292      	uxth	r2, r2
 800212e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f003 fddf 	bl	8005cfa <USB_ReadInterrupts>
 800213c:	4603      	mov	r3, r0
 800213e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002146:	d133      	bne.n	80021b0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002150:	b29a      	uxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0204 	bic.w	r2, r2, #4
 800215a:	b292      	uxth	r2, r2
 800215c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002168:	b29a      	uxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0208 	bic.w	r2, r2, #8
 8002172:	b292      	uxth	r2, r2
 8002174:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800218a:	2100      	movs	r1, #0
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f006 f823 	bl	80081d8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f005 fe84 	bl	8007ea0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021aa:	b292      	uxth	r2, r2
 80021ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f003 fda0 	bl	8005cfa <USB_ReadInterrupts>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021c4:	d126      	bne.n	8002214 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0208 	orr.w	r2, r2, #8
 80021d8:	b292      	uxth	r2, r2
 80021da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f0:	b292      	uxth	r2, r2
 80021f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021fe:	b29a      	uxth	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0204 	orr.w	r2, r2, #4
 8002208:	b292      	uxth	r2, r2
 800220a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f005 fe2c 	bl	8007e6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f003 fd6e 	bl	8005cfa <USB_ReadInterrupts>
 800221e:	4603      	mov	r3, r0
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d13f      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800223a:	b292      	uxth	r2, r2
 800223c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002246:	2b00      	cmp	r3, #0
 8002248:	d12b      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002252:	b29a      	uxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0204 	orr.w	r2, r2, #4
 800225c:	b292      	uxth	r2, r2
 800225e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800226a:	b29a      	uxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0208 	orr.w	r2, r2, #8
 8002274:	b292      	uxth	r2, r2
 8002276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800228a:	b29b      	uxth	r3, r3
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002298:	2101      	movs	r1, #1
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f005 ff9c 	bl	80081d8 <HAL_PCDEx_LPM_Callback>
 80022a0:	e002      	b.n	80022a8 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f005 fde2 	bl	8007e6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fd24 	bl	8005cfa <USB_ReadInterrupts>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022bc:	d10e      	bne.n	80022dc <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022d0:	b292      	uxth	r2, r2
 80022d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f005 fd9b 	bl	8007e12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 fd0a 	bl	8005cfa <USB_ReadInterrupts>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f0:	d10b      	bne.n	800230a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002304:	b292      	uxth	r2, r2
 8002306:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_PCD_SetAddress+0x1a>
 8002328:	2302      	movs	r3, #2
 800232a:	e013      	b.n	8002354 <HAL_PCD_SetAddress+0x42>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f003 fcad 	bl	8005ca4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	4608      	mov	r0, r1
 8002366:	4611      	mov	r1, r2
 8002368:	461a      	mov	r2, r3
 800236a:	4603      	mov	r3, r0
 800236c:	70fb      	strb	r3, [r7, #3]
 800236e:	460b      	mov	r3, r1
 8002370:	803b      	strh	r3, [r7, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800237a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237e:	2b00      	cmp	r3, #0
 8002380:	da0b      	bge.n	800239a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	015b      	lsls	r3, r3, #5
 800238a:	3328      	adds	r3, #40	; 0x28
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	705a      	strb	r2, [r3, #1]
 8002398:	e00b      	b.n	80023b2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	015b      	lsls	r3, r3, #5
 80023a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023be:	883a      	ldrh	r2, [r7, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	78ba      	ldrb	r2, [r7, #2]
 80023c8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	785b      	ldrb	r3, [r3, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d004      	beq.n	80023dc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023dc:	78bb      	ldrb	r3, [r7, #2]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d102      	bne.n	80023e8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_PCD_EP_Open+0x9a>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e00e      	b.n	8002414 <HAL_PCD_EP_Open+0xb8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68f9      	ldr	r1, [r7, #12]
 8002404:	4618      	mov	r0, r3
 8002406:	f002 fc39 	bl	8004c7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002412:	7afb      	ldrb	r3, [r7, #11]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800242c:	2b00      	cmp	r3, #0
 800242e:	da0b      	bge.n	8002448 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	015b      	lsls	r3, r3, #5
 8002438:	3328      	adds	r3, #40	; 0x28
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	705a      	strb	r2, [r3, #1]
 8002446:	e00b      	b.n	8002460 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	015b      	lsls	r3, r3, #5
 8002450:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	b2da      	uxtb	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_PCD_EP_Close+0x5e>
 8002476:	2302      	movs	r3, #2
 8002478:	e00e      	b.n	8002498 <HAL_PCD_EP_Close+0x7c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	4618      	mov	r0, r3
 800248a:	f002 fee7 	bl	800525c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	460b      	mov	r3, r1
 80024ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b0:	7afb      	ldrb	r3, [r7, #11]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	015b      	lsls	r3, r3, #5
 80024b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2200      	movs	r2, #0
 80024d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2200      	movs	r2, #0
 80024d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024e6:	7afb      	ldrb	r3, [r7, #11]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6979      	ldr	r1, [r7, #20]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 f846 	bl	8005588 <USB_EPStartXfer>
 80024fc:	e005      	b.n	800250a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6979      	ldr	r1, [r7, #20]
 8002504:	4618      	mov	r0, r3
 8002506:	f003 f83f 	bl	8005588 <USB_EPStartXfer>
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	460b      	mov	r3, r1
 8002522:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	015b      	lsls	r3, r3, #5
 800252c:	3328      	adds	r3, #40	; 0x28
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4413      	add	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2201      	movs	r2, #1
 800254a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800254c:	7afb      	ldrb	r3, [r7, #11]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	b2da      	uxtb	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002558:	7afb      	ldrb	r3, [r7, #11]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6979      	ldr	r1, [r7, #20]
 8002568:	4618      	mov	r0, r3
 800256a:	f003 f80d 	bl	8005588 <USB_EPStartXfer>
 800256e:	e005      	b.n	800257c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6979      	ldr	r1, [r7, #20]
 8002576:	4618      	mov	r0, r3
 8002578:	f003 f806 	bl	8005588 <USB_EPStartXfer>
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	f003 0207 	and.w	r2, r3, #7
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	429a      	cmp	r2, r3
 800259e:	d901      	bls.n	80025a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e046      	b.n	8002632 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	da0b      	bge.n	80025c4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	015b      	lsls	r3, r3, #5
 80025b4:	3328      	adds	r3, #40	; 0x28
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	705a      	strb	r2, [r3, #1]
 80025c2:	e009      	b.n	80025d8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	015b      	lsls	r3, r3, #5
 80025c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_PCD_EP_SetStall+0x72>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e01c      	b.n	8002632 <HAL_PCD_EP_SetStall+0xac>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68f9      	ldr	r1, [r7, #12]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fa76 	bl	8005af8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	2b00      	cmp	r3, #0
 8002614:	d108      	bne.n	8002628 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002620:	4619      	mov	r1, r3
 8002622:	4610      	mov	r0, r2
 8002624:	f003 fb79 	bl	8005d1a <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	f003 020f 	and.w	r2, r3, #15
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d901      	bls.n	8002658 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e03a      	b.n	80026ce <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da0b      	bge.n	8002678 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	015b      	lsls	r3, r3, #5
 8002668:	3328      	adds	r3, #40	; 0x28
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	705a      	strb	r2, [r3, #1]
 8002676:	e00b      	b.n	8002690 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	015b      	lsls	r3, r3, #5
 8002680:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_PCD_EP_ClrStall+0x76>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e00e      	b.n	80026ce <HAL_PCD_EP_ClrStall+0x94>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68f9      	ldr	r1, [r7, #12]
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 fa5c 	bl	8005b7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026e0:	e274      	b.n	8002bcc <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ea:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80026ec:	8afb      	ldrh	r3, [r7, #22]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80026f6:	7d7b      	ldrb	r3, [r7, #21]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f040 813c 	bne.w	8002976 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80026fe:	8afb      	ldrh	r3, [r7, #22]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d14f      	bne.n	80027a8 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002718:	b29c      	uxth	r4, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002726:	b29b      	uxth	r3, r3
 8002728:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3328      	adds	r3, #40	; 0x28
 800272e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	4413      	add	r3, r2
 800274a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	441a      	add	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002766:	2100      	movs	r1, #0
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f005 fb3b 	bl	8007de4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8228 	beq.w	8002bcc <PCD_EP_ISR_Handler+0x4f4>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	f040 8223 	bne.w	8002bcc <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002792:	b2da      	uxtb	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	b292      	uxth	r2, r2
 800279a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027a6:	e211      	b.n	8002bcc <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027ae:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80027b8:	8a7b      	ldrh	r3, [r7, #18]
 80027ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d031      	beq.n	8002826 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f003 fad9 	bl	8005db4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29a      	uxth	r2, r3
 800280a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800280e:	4013      	ands	r3, r2
 8002810:	b29c      	uxth	r4, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800281a:	b292      	uxth	r2, r2
 800281c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f005 fab6 	bl	8007d90 <HAL_PCD_SetupStageCallback>
 8002824:	e1d2      	b.n	8002bcc <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002826:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f280 81ce 	bge.w	8002bcc <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29a      	uxth	r2, r3
 8002838:	f640 738f 	movw	r3, #3983	; 0xf8f
 800283c:	4013      	ands	r3, r2
 800283e:	b29c      	uxth	r4, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002848:	b292      	uxth	r2, r2
 800284a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002854:	b29b      	uxth	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	4413      	add	r3, r2
 8002866:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d019      	beq.n	80028b0 <PCD_EP_ISR_Handler+0x1d8>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d015      	beq.n	80028b0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6959      	ldr	r1, [r3, #20]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002894:	b29b      	uxth	r3, r3
 8002896:	f003 fa8d 	bl	8005db4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	441a      	add	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80028a8:	2100      	movs	r1, #0
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f005 fa82 	bl	8007db4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	461c      	mov	r4, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	441c      	add	r4, r3
 80028c2:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80028c6:	461c      	mov	r4, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10e      	bne.n	80028ee <PCD_EP_ISR_Handler+0x216>
 80028d0:	8823      	ldrh	r3, [r4, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028d8:	b29b      	uxth	r3, r3
 80028da:	8023      	strh	r3, [r4, #0]
 80028dc:	8823      	ldrh	r3, [r4, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	8023      	strh	r3, [r4, #0]
 80028ec:	e02d      	b.n	800294a <PCD_EP_ISR_Handler+0x272>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b3e      	cmp	r3, #62	; 0x3e
 80028f4:	d812      	bhi.n	800291c <PCD_EP_ISR_Handler+0x244>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <PCD_EP_ISR_Handler+0x238>
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	3301      	adds	r3, #1
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	b29b      	uxth	r3, r3
 8002914:	029b      	lsls	r3, r3, #10
 8002916:	b29b      	uxth	r3, r3
 8002918:	8023      	strh	r3, [r4, #0]
 800291a:	e016      	b.n	800294a <PCD_EP_ISR_Handler+0x272>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	61bb      	str	r3, [r7, #24]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <PCD_EP_ISR_Handler+0x25e>
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	3b01      	subs	r3, #1
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	b29b      	uxth	r3, r3
 800293a:	029b      	lsls	r3, r3, #10
 800293c:	b29b      	uxth	r3, r3
 800293e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002946:	b29b      	uxth	r3, r3
 8002948:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	b29c      	uxth	r4, r3
 800295c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002960:	b29c      	uxth	r4, r3
 8002962:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002966:	b29c      	uxth	r4, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b9e      	ldr	r3, [pc, #632]	; (8002be8 <PCD_EP_ISR_Handler+0x510>)
 800296e:	4323      	orrs	r3, r4
 8002970:	b29b      	uxth	r3, r3
 8002972:	8013      	strh	r3, [r2, #0]
 8002974:	e12a      	b.n	8002bcc <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	7d7b      	ldrb	r3, [r7, #21]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002986:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f280 80cb 	bge.w	8002b26 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	7d7b      	ldrb	r3, [r7, #21]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029a4:	4013      	ands	r3, r2
 80029a6:	b29c      	uxth	r4, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	7d7b      	ldrb	r3, [r7, #21]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80029b8:	b292      	uxth	r2, r2
 80029ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80029bc:	7d7b      	ldrb	r3, [r7, #21]
 80029be:	015b      	lsls	r3, r3, #5
 80029c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	7b1b      	ldrb	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11f      	bne.n	8002a12 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80029f8:	8bfb      	ldrh	r3, [r7, #30]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d06e      	beq.n	8002adc <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6959      	ldr	r1, [r3, #20]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	88da      	ldrh	r2, [r3, #6]
 8002a0a:	8bfb      	ldrh	r3, [r7, #30]
 8002a0c:	f003 f9d2 	bl	8005db4 <USB_ReadPMA>
 8002a10:	e064      	b.n	8002adc <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2c:	b29c      	uxth	r4, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	441a      	add	r2, r3
 8002a3c:	4b6b      	ldr	r3, [pc, #428]	; (8002bec <PCD_EP_ISR_Handler+0x514>)
 8002a3e:	4323      	orrs	r3, r4
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01f      	beq.n	8002a9e <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a82:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002a84:	8bfb      	ldrh	r3, [r7, #30]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d028      	beq.n	8002adc <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6959      	ldr	r1, [r3, #20]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	891a      	ldrh	r2, [r3, #8]
 8002a96:	8bfb      	ldrh	r3, [r7, #30]
 8002a98:	f003 f98c 	bl	8005db4 <USB_ReadPMA>
 8002a9c:	e01e      	b.n	8002adc <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac2:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002ac4:	8bfb      	ldrh	r3, [r7, #30]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d008      	beq.n	8002adc <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6959      	ldr	r1, [r3, #20]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	895a      	ldrh	r2, [r3, #10]
 8002ad6:	8bfb      	ldrh	r3, [r7, #30]
 8002ad8:	f003 f96c 	bl	8005db4 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	8bfb      	ldrh	r3, [r7, #30]
 8002ae2:	441a      	add	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	8bfb      	ldrh	r3, [r7, #30]
 8002aee:	441a      	add	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <PCD_EP_ISR_Handler+0x42e>
 8002afc:	8bfa      	ldrh	r2, [r7, #30]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d206      	bcs.n	8002b14 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f005 f951 	bl	8007db4 <HAL_PCD_DataOutStageCallback>
 8002b12:	e008      	b.n	8002b26 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	7819      	ldrb	r1, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff fcbd 	bl	80024a0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b26:	8a7b      	ldrh	r3, [r7, #18]
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d04d      	beq.n	8002bcc <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b30:	7d7b      	ldrb	r3, [r7, #21]
 8002b32:	015b      	lsls	r3, r3, #5
 8002b34:	3328      	adds	r3, #40	; 0x28
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	7d7b      	ldrb	r3, [r7, #21]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b54:	b29c      	uxth	r4, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	7d7b      	ldrb	r3, [r7, #21]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	441a      	add	r2, r3
 8002b62:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	441a      	add	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d106      	bne.n	8002bba <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f005 f916 	bl	8007de4 <HAL_PCD_DataInStageCallback>
 8002bb8:	e008      	b.n	8002bcc <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	7819      	ldrb	r1, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fca4 	bl	8002514 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	b21b      	sxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f6ff ad82 	blt.w	80026e2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3724      	adds	r7, #36	; 0x24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	ffff8080 	.word	0xffff8080
 8002bec:	ffff80c0 	.word	0xffff80c0

08002bf0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	015b      	lsls	r3, r3, #5
 8002c16:	3328      	adds	r3, #40	; 0x28
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e006      	b.n	8002c2e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c20:	897b      	ldrh	r3, [r7, #10]
 8002c22:	015b      	lsls	r3, r3, #5
 8002c24:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c2e:	893b      	ldrh	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d107      	bne.n	8002c44 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2200      	movs	r2, #0
 8002c38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	80da      	strh	r2, [r3, #6]
 8002c42:	e00b      	b.n	8002c5c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2201      	movs	r2, #1
 8002c48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d141      	bne.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cce:	4b4b      	ldr	r3, [pc, #300]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cda:	d131      	bne.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cdc:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce2:	4a46      	ldr	r2, [pc, #280]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ce8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cec:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cf4:	4a41      	ldr	r2, [pc, #260]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cfc:	4b40      	ldr	r3, [pc, #256]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2232      	movs	r2, #50	; 0x32
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	4a3f      	ldr	r2, [pc, #252]	; (8002e04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	0c9b      	lsrs	r3, r3, #18
 8002d0e:	3301      	adds	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d12:	e002      	b.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d1a:	4b38      	ldr	r3, [pc, #224]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d26:	d102      	bne.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f2      	bne.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d2e:	4b33      	ldr	r3, [pc, #204]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3a:	d158      	bne.n	8002dee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e057      	b.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d40:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d46:	4a2d      	ldr	r2, [pc, #180]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d50:	e04d      	b.n	8002dee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d58:	d141      	bne.n	8002dde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d5a:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d66:	d131      	bne.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d68:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d6e:	4a23      	ldr	r2, [pc, #140]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d78:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d80:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2232      	movs	r2, #50	; 0x32
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	0c9b      	lsrs	r3, r3, #18
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d9e:	e002      	b.n	8002da6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db2:	d102      	bne.n	8002dba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f2      	bne.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d112      	bne.n	8002dee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e011      	b.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ddc:	e007      	b.n	8002dee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	200000dc 	.word	0x200000dc
 8002e04:	431bde83 	.word	0x431bde83

08002e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e308      	b.n	800342c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d075      	beq.n	8002f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e26:	4ba3      	ldr	r3, [pc, #652]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e30:	4ba0      	ldr	r3, [pc, #640]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b0c      	cmp	r3, #12
 8002e3e:	d102      	bne.n	8002e46 <HAL_RCC_OscConfig+0x3e>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_OscConfig+0x44>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d10b      	bne.n	8002e64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	4b99      	ldr	r3, [pc, #612]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d05b      	beq.n	8002f10 <HAL_RCC_OscConfig+0x108>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d157      	bne.n	8002f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e2e3      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCC_OscConfig+0x74>
 8002e6e:	4b91      	ldr	r3, [pc, #580]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a90      	ldr	r2, [pc, #576]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e01d      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x98>
 8002e86:	4b8b      	ldr	r3, [pc, #556]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a8a      	ldr	r2, [pc, #552]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	4b88      	ldr	r3, [pc, #544]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a87      	ldr	r2, [pc, #540]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb0>
 8002ea0:	4b84      	ldr	r3, [pc, #528]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a83      	ldr	r2, [pc, #524]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4b81      	ldr	r3, [pc, #516]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a80      	ldr	r2, [pc, #512]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d013      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fd fa0e 	bl	80002e0 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fd fa0a 	bl	80002e0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e2a8      	b.n	800342c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eda:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xc0>
 8002ee6:	e014      	b.n	8002f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fd f9fa 	bl	80002e0 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7fd f9f6 	bl	80002e0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	; 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e294      	b.n	800342c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f02:	4b6c      	ldr	r3, [pc, #432]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xe8>
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d075      	beq.n	800300a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1e:	4b65      	ldr	r3, [pc, #404]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f28:	4b62      	ldr	r3, [pc, #392]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b0c      	cmp	r3, #12
 8002f36:	d102      	bne.n	8002f3e <HAL_RCC_OscConfig+0x136>
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d002      	beq.n	8002f44 <HAL_RCC_OscConfig+0x13c>
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d11f      	bne.n	8002f84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f44:	4b5b      	ldr	r3, [pc, #364]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_OscConfig+0x154>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e267      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5c:	4b55      	ldr	r3, [pc, #340]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	4952      	ldr	r1, [pc, #328]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f70:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <HAL_RCC_OscConfig+0x2b0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd f967 	bl	8000248 <HAL_InitTick>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d043      	beq.n	8003008 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e253      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d023      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b49      	ldr	r3, [pc, #292]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a48      	ldr	r2, [pc, #288]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fd f9a2 	bl	80002e0 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7fd f99e 	bl	80002e0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e23c      	b.n	800342c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb2:	4b40      	ldr	r3, [pc, #256]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	061b      	lsls	r3, r3, #24
 8002fcc:	4939      	ldr	r1, [pc, #228]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
 8002fd2:	e01a      	b.n	800300a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd4:	4b37      	ldr	r3, [pc, #220]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a36      	ldr	r2, [pc, #216]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fd f97e 	bl	80002e0 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7fd f97a 	bl	80002e0 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e218      	b.n	800342c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ffa:	4b2e      	ldr	r3, [pc, #184]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x1e0>
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003008:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d03c      	beq.n	8003090 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01c      	beq.n	8003058 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301e:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003024:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302e:	f7fd f957 	bl	80002e0 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003036:	f7fd f953 	bl	80002e0 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1f1      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0ef      	beq.n	8003036 <HAL_RCC_OscConfig+0x22e>
 8003056:	e01b      	b.n	8003090 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003058:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 800305a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fd f93a 	bl	80002e0 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7fd f936 	bl	80002e0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1d4      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ef      	bne.n	8003070 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80ab 	beq.w	80031f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030a2:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_RCC_OscConfig+0x2b4>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e005      	b.n	80030be <HAL_RCC_OscConfig+0x2b6>
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	20000000 	.word	0x20000000
 80030bc:	2300      	movs	r3, #0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	4baf      	ldr	r3, [pc, #700]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	4aae      	ldr	r2, [pc, #696]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 80030c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030cc:	6593      	str	r3, [r2, #88]	; 0x58
 80030ce:	4bac      	ldr	r3, [pc, #688]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030da:	2301      	movs	r3, #1
 80030dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030de:	4ba9      	ldr	r3, [pc, #676]	; (8003384 <HAL_RCC_OscConfig+0x57c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d118      	bne.n	800311c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ea:	4ba6      	ldr	r3, [pc, #664]	; (8003384 <HAL_RCC_OscConfig+0x57c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4aa5      	ldr	r2, [pc, #660]	; (8003384 <HAL_RCC_OscConfig+0x57c>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f6:	f7fd f8f3 	bl	80002e0 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fe:	f7fd f8ef 	bl	80002e0 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e18d      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003110:	4b9c      	ldr	r3, [pc, #624]	; (8003384 <HAL_RCC_OscConfig+0x57c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d108      	bne.n	8003136 <HAL_RCC_OscConfig+0x32e>
 8003124:	4b96      	ldr	r3, [pc, #600]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312a:	4a95      	ldr	r2, [pc, #596]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003134:	e024      	b.n	8003180 <HAL_RCC_OscConfig+0x378>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b05      	cmp	r3, #5
 800313c:	d110      	bne.n	8003160 <HAL_RCC_OscConfig+0x358>
 800313e:	4b90      	ldr	r3, [pc, #576]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	4a8e      	ldr	r2, [pc, #568]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003146:	f043 0304 	orr.w	r3, r3, #4
 800314a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800314e:	4b8c      	ldr	r3, [pc, #560]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003154:	4a8a      	ldr	r2, [pc, #552]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800315e:	e00f      	b.n	8003180 <HAL_RCC_OscConfig+0x378>
 8003160:	4b87      	ldr	r3, [pc, #540]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	4a86      	ldr	r2, [pc, #536]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003170:	4b83      	ldr	r3, [pc, #524]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	4a82      	ldr	r2, [pc, #520]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d016      	beq.n	80031b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fd f8aa 	bl	80002e0 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fd f8a6 	bl	80002e0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e142      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a6:	4b76      	ldr	r3, [pc, #472]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ed      	beq.n	8003190 <HAL_RCC_OscConfig+0x388>
 80031b4:	e015      	b.n	80031e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b6:	f7fd f893 	bl	80002e0 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031bc:	e00a      	b.n	80031d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031be:	f7fd f88f 	bl	80002e0 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e12b      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d4:	4b6a      	ldr	r3, [pc, #424]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ed      	bne.n	80031be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b65      	ldr	r3, [pc, #404]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	4a64      	ldr	r2, [pc, #400]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d03c      	beq.n	800327a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01c      	beq.n	8003242 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003208:	4b5d      	ldr	r3, [pc, #372]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 800320a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800320e:	4a5c      	ldr	r2, [pc, #368]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fd f862 	bl	80002e0 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003220:	f7fd f85e 	bl	80002e0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e0fc      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003232:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ef      	beq.n	8003220 <HAL_RCC_OscConfig+0x418>
 8003240:	e01b      	b.n	800327a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003242:	4b4f      	ldr	r3, [pc, #316]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003248:	4a4d      	ldr	r2, [pc, #308]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fd f845 	bl	80002e0 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800325a:	f7fd f841 	bl	80002e0 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0df      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800326c:	4b44      	ldr	r3, [pc, #272]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 800326e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ef      	bne.n	800325a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80d3 	beq.w	800342a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003284:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b0c      	cmp	r3, #12
 800328e:	f000 808d 	beq.w	80033ac <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d15a      	bne.n	8003350 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a38      	ldr	r2, [pc, #224]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 80032a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fd f81b 	bl	80002e0 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fd f817 	bl	80002e0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0b5      	b.n	800342c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c0:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032cc:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <HAL_RCC_OscConfig+0x580>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6a11      	ldr	r1, [r2, #32]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032dc:	3a01      	subs	r2, #1
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	4311      	orrs	r1, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032e6:	0212      	lsls	r2, r2, #8
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ee:	0852      	lsrs	r2, r2, #1
 80032f0:	3a01      	subs	r2, #1
 80032f2:	0552      	lsls	r2, r2, #21
 80032f4:	4311      	orrs	r1, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032fa:	0852      	lsrs	r2, r2, #1
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0652      	lsls	r2, r2, #25
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003306:	06d2      	lsls	r2, r2, #27
 8003308:	430a      	orrs	r2, r1
 800330a:	491d      	ldr	r1, [pc, #116]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 800330c:	4313      	orrs	r3, r2
 800330e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1a      	ldr	r2, [pc, #104]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800331c:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a17      	ldr	r2, [pc, #92]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003326:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fc ffda 	bl	80002e0 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003330:	f7fc ffd6 	bl	80002e0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e074      	b.n	800342c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x528>
 800334e:	e06c      	b.n	800342a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a07      	ldr	r2, [pc, #28]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_RCC_OscConfig+0x578>)
 800336e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003376:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fc ffb2 	bl	80002e0 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337e:	e00e      	b.n	800339e <HAL_RCC_OscConfig+0x596>
 8003380:	40021000 	.word	0x40021000
 8003384:	40007000 	.word	0x40007000
 8003388:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338c:	f7fc ffa8 	bl	80002e0 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e046      	b.n	800342c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800339e:	4b25      	ldr	r3, [pc, #148]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x584>
 80033aa:	e03e      	b.n	800342a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e039      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80033b8:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0203 	and.w	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d12c      	bne.n	8003426 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	3b01      	subs	r3, #1
 80033d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d123      	bne.n	8003426 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d11b      	bne.n	8003426 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d113      	bne.n	8003426 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	3b01      	subs	r3, #1
 800340c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d109      	bne.n	8003426 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	3b01      	subs	r3, #1
 8003420:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3720      	adds	r7, #32
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000

08003438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e11e      	b.n	800368e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003450:	4b91      	ldr	r3, [pc, #580]	; (8003698 <HAL_RCC_ClockConfig+0x260>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d910      	bls.n	8003480 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b8e      	ldr	r3, [pc, #568]	; (8003698 <HAL_RCC_ClockConfig+0x260>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 020f 	bic.w	r2, r3, #15
 8003466:	498c      	ldr	r1, [pc, #560]	; (8003698 <HAL_RCC_ClockConfig+0x260>)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b8a      	ldr	r3, [pc, #552]	; (8003698 <HAL_RCC_ClockConfig+0x260>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e106      	b.n	800368e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d073      	beq.n	8003574 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d129      	bne.n	80034e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003494:	4b81      	ldr	r3, [pc, #516]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0f4      	b.n	800368e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80034a4:	f000 f972 	bl	800378c <RCC_GetSysClockFreqFromPLLSource>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4a7c      	ldr	r2, [pc, #496]	; (80036a0 <HAL_RCC_ClockConfig+0x268>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d93f      	bls.n	8003532 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034b2:	4b7a      	ldr	r3, [pc, #488]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d033      	beq.n	8003532 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d12f      	bne.n	8003532 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034d2:	4b72      	ldr	r3, [pc, #456]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034da:	4a70      	ldr	r2, [pc, #448]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 80034dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e024      	b.n	8003532 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d107      	bne.n	8003500 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f0:	4b6a      	ldr	r3, [pc, #424]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0c6      	b.n	800368e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003500:	4b66      	ldr	r3, [pc, #408]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0be      	b.n	800368e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003510:	f000 f8ce 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8003514:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4a61      	ldr	r2, [pc, #388]	; (80036a0 <HAL_RCC_ClockConfig+0x268>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d909      	bls.n	8003532 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800351e:	4b5f      	ldr	r3, [pc, #380]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003526:	4a5d      	ldr	r2, [pc, #372]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 8003528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003532:	4b5a      	ldr	r3, [pc, #360]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f023 0203 	bic.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4957      	ldr	r1, [pc, #348]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 8003540:	4313      	orrs	r3, r2
 8003542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003544:	f7fc fecc 	bl	80002e0 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	e00a      	b.n	8003562 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7fc fec8 	bl	80002e0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e095      	b.n	800368e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	4b4e      	ldr	r3, [pc, #312]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 020c 	and.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	429a      	cmp	r2, r3
 8003572:	d1eb      	bne.n	800354c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d023      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800358c:	4b43      	ldr	r3, [pc, #268]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4a42      	ldr	r2, [pc, #264]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 8003592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003596:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80035a4:	4b3d      	ldr	r3, [pc, #244]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035ac:	4a3b      	ldr	r2, [pc, #236]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 80035ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b4:	4b39      	ldr	r3, [pc, #228]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4936      	ldr	r1, [pc, #216]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
 80035c6:	e008      	b.n	80035da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2b80      	cmp	r3, #128	; 0x80
 80035cc:	d105      	bne.n	80035da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035ce:	4b33      	ldr	r3, [pc, #204]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	4a32      	ldr	r2, [pc, #200]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 80035d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035da:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <HAL_RCC_ClockConfig+0x260>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d21d      	bcs.n	8003624 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_RCC_ClockConfig+0x260>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 020f 	bic.w	r2, r3, #15
 80035f0:	4929      	ldr	r1, [pc, #164]	; (8003698 <HAL_RCC_ClockConfig+0x260>)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035f8:	f7fc fe72 	bl	80002e0 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fc fe6e 	bl	80002e0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e03b      	b.n	800368e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b20      	ldr	r3, [pc, #128]	; (8003698 <HAL_RCC_ClockConfig+0x260>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d1ed      	bne.n	8003600 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4917      	ldr	r1, [pc, #92]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364e:	4b13      	ldr	r3, [pc, #76]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	490f      	ldr	r1, [pc, #60]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003662:	f000 f825 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8003666:	4601      	mov	r1, r0
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <HAL_RCC_ClockConfig+0x264>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	4a0c      	ldr	r2, [pc, #48]	; (80036a4 <HAL_RCC_ClockConfig+0x26c>)
 8003674:	5cd3      	ldrb	r3, [r2, r3]
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	fa21 f303 	lsr.w	r3, r1, r3
 800367e:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <HAL_RCC_ClockConfig+0x270>)
 8003680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <HAL_RCC_ClockConfig+0x274>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc fdde 	bl	8000248 <HAL_InitTick>
 800368c:	4603      	mov	r3, r0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40022000 	.word	0x40022000
 800369c:	40021000 	.word	0x40021000
 80036a0:	04c4b400 	.word	0x04c4b400
 80036a4:	08008658 	.word	0x08008658
 80036a8:	200000dc 	.word	0x200000dc
 80036ac:	20000000 	.word	0x20000000

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d102      	bne.n	80036c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036c2:	4b2a      	ldr	r3, [pc, #168]	; (800376c <HAL_RCC_GetSysClockFreq+0xbc>)
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	e047      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036c8:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d102      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036d4:	4b26      	ldr	r3, [pc, #152]	; (8003770 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e03e      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036da:	4b23      	ldr	r3, [pc, #140]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d136      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036e6:	4b20      	ldr	r3, [pc, #128]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	3301      	adds	r3, #1
 80036fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d10c      	bne.n	800371e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003704:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	4a16      	ldr	r2, [pc, #88]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800370e:	68d2      	ldr	r2, [r2, #12]
 8003710:	0a12      	lsrs	r2, r2, #8
 8003712:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	617b      	str	r3, [r7, #20]
      break;
 800371c:	e00c      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800371e:	4a13      	ldr	r2, [pc, #76]	; (800376c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003728:	68d2      	ldr	r2, [r2, #12]
 800372a:	0a12      	lsrs	r2, r2, #8
 800372c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003730:	fb02 f303 	mul.w	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
      break;
 8003736:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	0e5b      	lsrs	r3, r3, #25
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	3301      	adds	r3, #1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	e001      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003758:	693b      	ldr	r3, [r7, #16]
}
 800375a:	4618      	mov	r0, r3
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	00f42400 	.word	0x00f42400
 8003770:	007a1200 	.word	0x007a1200

08003774 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	200000dc 	.word	0x200000dc

0800378c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003792:	4b1e      	ldr	r3, [pc, #120]	; (800380c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	3301      	adds	r3, #1
 80037a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d10c      	bne.n	80037ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037b0:	4a17      	ldr	r2, [pc, #92]	; (8003810 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ba:	68d2      	ldr	r2, [r2, #12]
 80037bc:	0a12      	lsrs	r2, r2, #8
 80037be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	617b      	str	r3, [r7, #20]
    break;
 80037c8:	e00c      	b.n	80037e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037ca:	4a12      	ldr	r2, [pc, #72]	; (8003814 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d2:	4a0e      	ldr	r2, [pc, #56]	; (800380c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037d4:	68d2      	ldr	r2, [r2, #12]
 80037d6:	0a12      	lsrs	r2, r2, #8
 80037d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
    break;
 80037e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	0e5b      	lsrs	r3, r3, #25
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	3301      	adds	r3, #1
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80037fe:	687b      	ldr	r3, [r7, #4]
}
 8003800:	4618      	mov	r0, r3
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40021000 	.word	0x40021000
 8003810:	007a1200 	.word	0x007a1200
 8003814:	00f42400 	.word	0x00f42400

08003818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003820:	2300      	movs	r3, #0
 8003822:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003824:	2300      	movs	r3, #0
 8003826:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8098 	beq.w	8003966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4b43      	ldr	r3, [pc, #268]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4b40      	ldr	r3, [pc, #256]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	4a3f      	ldr	r2, [pc, #252]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003850:	6593      	str	r3, [r2, #88]	; 0x58
 8003852:	4b3d      	ldr	r3, [pc, #244]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385e:	2301      	movs	r3, #1
 8003860:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003862:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a39      	ldr	r2, [pc, #228]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800386e:	f7fc fd37 	bl	80002e0 <HAL_GetTick>
 8003872:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003874:	e009      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003876:	f7fc fd33 	bl	80002e0 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d902      	bls.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	74fb      	strb	r3, [r7, #19]
        break;
 8003888:	e005      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800388a:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ef      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003896:	7cfb      	ldrb	r3, [r7, #19]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d159      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800389c:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01e      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d019      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038b8:	4b23      	ldr	r3, [pc, #140]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038c4:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038d4:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038e4:	4a18      	ldr	r2, [pc, #96]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fc fcf3 	bl	80002e0 <HAL_GetTick>
 80038fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fc:	e00b      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fc fcef 	bl	80002e0 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d902      	bls.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	74fb      	strb	r3, [r7, #19]
            break;
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0ec      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	4903      	ldr	r1, [pc, #12]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003940:	e008      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	74bb      	strb	r3, [r7, #18]
 8003946:	e005      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003954:	7c7b      	ldrb	r3, [r7, #17]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395a:	4ba6      	ldr	r3, [pc, #664]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	4aa5      	ldr	r2, [pc, #660]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003964:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003972:	4ba0      	ldr	r3, [pc, #640]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f023 0203 	bic.w	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	499c      	ldr	r1, [pc, #624]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003994:	4b97      	ldr	r3, [pc, #604]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f023 020c 	bic.w	r2, r3, #12
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	4994      	ldr	r1, [pc, #592]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039b6:	4b8f      	ldr	r3, [pc, #572]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	498b      	ldr	r1, [pc, #556]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039d8:	4b86      	ldr	r3, [pc, #536]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	4983      	ldr	r1, [pc, #524]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039fa:	4b7e      	ldr	r3, [pc, #504]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	497a      	ldr	r1, [pc, #488]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a1c:	4b75      	ldr	r3, [pc, #468]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	4972      	ldr	r1, [pc, #456]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a3e:	4b6d      	ldr	r3, [pc, #436]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	4969      	ldr	r1, [pc, #420]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a60:	4b64      	ldr	r3, [pc, #400]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4961      	ldr	r1, [pc, #388]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a82:	4b5c      	ldr	r3, [pc, #368]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	4958      	ldr	r1, [pc, #352]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d015      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aa4:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	4950      	ldr	r1, [pc, #320]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac4:	4b4b      	ldr	r3, [pc, #300]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a4a      	ldr	r2, [pc, #296]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ace:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003adc:	4b45      	ldr	r3, [pc, #276]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	4942      	ldr	r1, [pc, #264]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afa:	d105      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003afc:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a3c      	ldr	r2, [pc, #240]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b06:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d015      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b14:	4b37      	ldr	r3, [pc, #220]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4934      	ldr	r1, [pc, #208]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b32:	d105      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b34:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a2e      	ldr	r2, [pc, #184]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b4c:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	4926      	ldr	r1, [pc, #152]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a20      	ldr	r2, [pc, #128]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d015      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b84:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	4918      	ldr	r1, [pc, #96]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba4:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d015      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	490a      	ldr	r1, [pc, #40]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bda:	d105      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003be8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000

08003bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e049      	b.n	8003c9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f003 ff70 	bl	8007b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 fa84 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e049      	b.n	8003d4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f841 	bl	8003d54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f000 fa2d 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e0fd      	b.n	8003f7e <HAL_TIM_PWM_ConfigChannel+0x216>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b14      	cmp	r3, #20
 8003d8e:	f200 80f0 	bhi.w	8003f72 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003ded 	.word	0x08003ded
 8003d9c:	08003f73 	.word	0x08003f73
 8003da0:	08003f73 	.word	0x08003f73
 8003da4:	08003f73 	.word	0x08003f73
 8003da8:	08003e2d 	.word	0x08003e2d
 8003dac:	08003f73 	.word	0x08003f73
 8003db0:	08003f73 	.word	0x08003f73
 8003db4:	08003f73 	.word	0x08003f73
 8003db8:	08003e6f 	.word	0x08003e6f
 8003dbc:	08003f73 	.word	0x08003f73
 8003dc0:	08003f73 	.word	0x08003f73
 8003dc4:	08003f73 	.word	0x08003f73
 8003dc8:	08003eaf 	.word	0x08003eaf
 8003dcc:	08003f73 	.word	0x08003f73
 8003dd0:	08003f73 	.word	0x08003f73
 8003dd4:	08003f73 	.word	0x08003f73
 8003dd8:	08003ef1 	.word	0x08003ef1
 8003ddc:	08003f73 	.word	0x08003f73
 8003de0:	08003f73 	.word	0x08003f73
 8003de4:	08003f73 	.word	0x08003f73
 8003de8:	08003f31 	.word	0x08003f31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fa36 	bl	8004264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0208 	orr.w	r2, r2, #8
 8003e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0204 	bic.w	r2, r2, #4
 8003e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6999      	ldr	r1, [r3, #24]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	619a      	str	r2, [r3, #24]
      break;
 8003e2a:	e0a3      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 faa6 	bl	8004384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6999      	ldr	r1, [r3, #24]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	021a      	lsls	r2, r3, #8
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	619a      	str	r2, [r3, #24]
      break;
 8003e6c:	e082      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fb0f 	bl	8004498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0208 	orr.w	r2, r2, #8
 8003e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0204 	bic.w	r2, r2, #4
 8003e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69d9      	ldr	r1, [r3, #28]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	61da      	str	r2, [r3, #28]
      break;
 8003eac:	e062      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fb77 	bl	80045a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69d9      	ldr	r1, [r3, #28]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	021a      	lsls	r2, r3, #8
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	61da      	str	r2, [r3, #28]
      break;
 8003eee:	e041      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fbe0 	bl	80046bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0208 	orr.w	r2, r2, #8
 8003f0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0204 	bic.w	r2, r2, #4
 8003f1a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003f2e:	e021      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fc24 	bl	8004784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	021a      	lsls	r2, r3, #8
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003f70:	e000      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003f72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop

08003f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_TIM_ConfigClockSource+0x18>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e0c3      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x1a0>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b70      	cmp	r3, #112	; 0x70
 8003fda:	d038      	beq.n	800404e <HAL_TIM_ConfigClockSource+0xc6>
 8003fdc:	2b70      	cmp	r3, #112	; 0x70
 8003fde:	d815      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x84>
 8003fe0:	2b30      	cmp	r3, #48	; 0x30
 8003fe2:	f000 808e 	beq.w	8004102 <HAL_TIM_ConfigClockSource+0x17a>
 8003fe6:	2b30      	cmp	r3, #48	; 0x30
 8003fe8:	d809      	bhi.n	8003ffe <HAL_TIM_ConfigClockSource+0x76>
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	f000 8089 	beq.w	8004102 <HAL_TIM_ConfigClockSource+0x17a>
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	f000 8086 	beq.w	8004102 <HAL_TIM_ConfigClockSource+0x17a>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8083 	beq.w	8004102 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ffc:	e08b      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003ffe:	2b50      	cmp	r3, #80	; 0x50
 8004000:	d04f      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004002:	2b60      	cmp	r3, #96	; 0x60
 8004004:	d05d      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d06b      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 800400a:	e084      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 800400c:	4a48      	ldr	r2, [pc, #288]	; (8004130 <HAL_TIM_ConfigClockSource+0x1a8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d077      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x17a>
 8004012:	4a47      	ldr	r2, [pc, #284]	; (8004130 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d809      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0xa4>
 8004018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401c:	d02e      	beq.n	800407c <HAL_TIM_ConfigClockSource+0xf4>
 800401e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004022:	d06e      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x17a>
 8004024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004028:	d074      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 800402a:	e074      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 800402c:	4a41      	ldr	r2, [pc, #260]	; (8004134 <HAL_TIM_ConfigClockSource+0x1ac>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d067      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x17a>
 8004032:	4a40      	ldr	r2, [pc, #256]	; (8004134 <HAL_TIM_ConfigClockSource+0x1ac>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d803      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0xb8>
 8004038:	4a3f      	ldr	r2, [pc, #252]	; (8004138 <HAL_TIM_ConfigClockSource+0x1b0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d061      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 800403e:	e06a      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8004040:	4a3e      	ldr	r2, [pc, #248]	; (800413c <HAL_TIM_ConfigClockSource+0x1b4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d05d      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x17a>
 8004046:	4a3e      	ldr	r2, [pc, #248]	; (8004140 <HAL_TIM_ConfigClockSource+0x1b8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d05a      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 800404c:	e063      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6899      	ldr	r1, [r3, #8]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f000 fc73 	bl	8004948 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004070:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	609a      	str	r2, [r3, #8]
      break;
 800407a:	e04c      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6899      	ldr	r1, [r3, #8]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f000 fc5c 	bl	8004948 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800409e:	609a      	str	r2, [r3, #8]
      break;
 80040a0:	e039      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f000 fbce 	bl	8004850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2150      	movs	r1, #80	; 0x50
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fc27 	bl	800490e <TIM_ITRx_SetConfig>
      break;
 80040c0:	e029      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6859      	ldr	r1, [r3, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f000 fbed 	bl	80048ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2160      	movs	r1, #96	; 0x60
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fc17 	bl	800490e <TIM_ITRx_SetConfig>
      break;
 80040e0:	e019      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f000 fbae 	bl	8004850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2140      	movs	r1, #64	; 0x40
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fc07 	bl	800490e <TIM_ITRx_SetConfig>
      break;
 8004100:	e009      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f000 fbfe 	bl	800490e <TIM_ITRx_SetConfig>
      break;
 8004112:	e000      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8004114:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	00100020 	.word	0x00100020
 8004134:	00100040 	.word	0x00100040
 8004138:	00100030 	.word	0x00100030
 800413c:	00100060 	.word	0x00100060
 8004140:	00100070 	.word	0x00100070

08004144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a3c      	ldr	r2, [pc, #240]	; (8004248 <TIM_Base_SetConfig+0x104>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00f      	beq.n	800417c <TIM_Base_SetConfig+0x38>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d00b      	beq.n	800417c <TIM_Base_SetConfig+0x38>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a39      	ldr	r2, [pc, #228]	; (800424c <TIM_Base_SetConfig+0x108>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <TIM_Base_SetConfig+0x38>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a38      	ldr	r2, [pc, #224]	; (8004250 <TIM_Base_SetConfig+0x10c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_Base_SetConfig+0x38>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a37      	ldr	r2, [pc, #220]	; (8004254 <TIM_Base_SetConfig+0x110>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d108      	bne.n	800418e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2d      	ldr	r2, [pc, #180]	; (8004248 <TIM_Base_SetConfig+0x104>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01b      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419c:	d017      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2a      	ldr	r2, [pc, #168]	; (800424c <TIM_Base_SetConfig+0x108>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a29      	ldr	r2, [pc, #164]	; (8004250 <TIM_Base_SetConfig+0x10c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00f      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a28      	ldr	r2, [pc, #160]	; (8004254 <TIM_Base_SetConfig+0x110>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00b      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a27      	ldr	r2, [pc, #156]	; (8004258 <TIM_Base_SetConfig+0x114>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d007      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a26      	ldr	r2, [pc, #152]	; (800425c <TIM_Base_SetConfig+0x118>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <TIM_Base_SetConfig+0x11c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d108      	bne.n	80041e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a10      	ldr	r2, [pc, #64]	; (8004248 <TIM_Base_SetConfig+0x104>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00f      	beq.n	800422c <TIM_Base_SetConfig+0xe8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a11      	ldr	r2, [pc, #68]	; (8004254 <TIM_Base_SetConfig+0x110>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_Base_SetConfig+0xe8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a10      	ldr	r2, [pc, #64]	; (8004258 <TIM_Base_SetConfig+0x114>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_Base_SetConfig+0xe8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a0f      	ldr	r2, [pc, #60]	; (800425c <TIM_Base_SetConfig+0x118>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_Base_SetConfig+0xe8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <TIM_Base_SetConfig+0x11c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d103      	bne.n	8004234 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	615a      	str	r2, [r3, #20]
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40013400 	.word	0x40013400
 8004258:	40014000 	.word	0x40014000
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800

08004264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f023 0201 	bic.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 0302 	bic.w	r3, r3, #2
 80042b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a2c      	ldr	r2, [pc, #176]	; (8004370 <TIM_OC1_SetConfig+0x10c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00f      	beq.n	80042e4 <TIM_OC1_SetConfig+0x80>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a2b      	ldr	r2, [pc, #172]	; (8004374 <TIM_OC1_SetConfig+0x110>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00b      	beq.n	80042e4 <TIM_OC1_SetConfig+0x80>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <TIM_OC1_SetConfig+0x114>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d007      	beq.n	80042e4 <TIM_OC1_SetConfig+0x80>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a29      	ldr	r2, [pc, #164]	; (800437c <TIM_OC1_SetConfig+0x118>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_OC1_SetConfig+0x80>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a28      	ldr	r2, [pc, #160]	; (8004380 <TIM_OC1_SetConfig+0x11c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10c      	bne.n	80042fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f023 0308 	bic.w	r3, r3, #8
 80042ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <TIM_OC1_SetConfig+0x10c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00f      	beq.n	8004326 <TIM_OC1_SetConfig+0xc2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a1a      	ldr	r2, [pc, #104]	; (8004374 <TIM_OC1_SetConfig+0x110>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00b      	beq.n	8004326 <TIM_OC1_SetConfig+0xc2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a19      	ldr	r2, [pc, #100]	; (8004378 <TIM_OC1_SetConfig+0x114>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <TIM_OC1_SetConfig+0xc2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a18      	ldr	r2, [pc, #96]	; (800437c <TIM_OC1_SetConfig+0x118>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_OC1_SetConfig+0xc2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a17      	ldr	r2, [pc, #92]	; (8004380 <TIM_OC1_SetConfig+0x11c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d111      	bne.n	800434a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800432c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	621a      	str	r2, [r3, #32]
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40013400 	.word	0x40013400
 8004378:	40014000 	.word	0x40014000
 800437c:	40014400 	.word	0x40014400
 8004380:	40014800 	.word	0x40014800

08004384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f023 0210 	bic.w	r2, r3, #16
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f023 0320 	bic.w	r3, r3, #32
 80043d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a28      	ldr	r2, [pc, #160]	; (8004484 <TIM_OC2_SetConfig+0x100>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <TIM_OC2_SetConfig+0x6c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a27      	ldr	r2, [pc, #156]	; (8004488 <TIM_OC2_SetConfig+0x104>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d10d      	bne.n	800440c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <TIM_OC2_SetConfig+0x100>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00f      	beq.n	8004434 <TIM_OC2_SetConfig+0xb0>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <TIM_OC2_SetConfig+0x104>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00b      	beq.n	8004434 <TIM_OC2_SetConfig+0xb0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a1b      	ldr	r2, [pc, #108]	; (800448c <TIM_OC2_SetConfig+0x108>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d007      	beq.n	8004434 <TIM_OC2_SetConfig+0xb0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <TIM_OC2_SetConfig+0x10c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <TIM_OC2_SetConfig+0xb0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a19      	ldr	r2, [pc, #100]	; (8004494 <TIM_OC2_SetConfig+0x110>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d113      	bne.n	800445c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800443a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40013400 	.word	0x40013400
 800448c:	40014000 	.word	0x40014000
 8004490:	40014400 	.word	0x40014400
 8004494:	40014800 	.word	0x40014800

08004498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a27      	ldr	r2, [pc, #156]	; (8004594 <TIM_OC3_SetConfig+0xfc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_OC3_SetConfig+0x6a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a26      	ldr	r2, [pc, #152]	; (8004598 <TIM_OC3_SetConfig+0x100>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d10d      	bne.n	800451e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800451c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a1c      	ldr	r2, [pc, #112]	; (8004594 <TIM_OC3_SetConfig+0xfc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00f      	beq.n	8004546 <TIM_OC3_SetConfig+0xae>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <TIM_OC3_SetConfig+0x100>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00b      	beq.n	8004546 <TIM_OC3_SetConfig+0xae>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1a      	ldr	r2, [pc, #104]	; (800459c <TIM_OC3_SetConfig+0x104>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_OC3_SetConfig+0xae>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <TIM_OC3_SetConfig+0x108>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_OC3_SetConfig+0xae>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <TIM_OC3_SetConfig+0x10c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d113      	bne.n	800456e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800454c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	621a      	str	r2, [r3, #32]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40013400 	.word	0x40013400
 800459c:	40014000 	.word	0x40014000
 80045a0:	40014400 	.word	0x40014400
 80045a4:	40014800 	.word	0x40014800

080045a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	031b      	lsls	r3, r3, #12
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a28      	ldr	r2, [pc, #160]	; (80046a8 <TIM_OC4_SetConfig+0x100>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_OC4_SetConfig+0x6c>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a27      	ldr	r2, [pc, #156]	; (80046ac <TIM_OC4_SetConfig+0x104>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d10d      	bne.n	8004630 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800461a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	031b      	lsls	r3, r3, #12
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800462e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <TIM_OC4_SetConfig+0x100>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00f      	beq.n	8004658 <TIM_OC4_SetConfig+0xb0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a1c      	ldr	r2, [pc, #112]	; (80046ac <TIM_OC4_SetConfig+0x104>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00b      	beq.n	8004658 <TIM_OC4_SetConfig+0xb0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <TIM_OC4_SetConfig+0x108>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d007      	beq.n	8004658 <TIM_OC4_SetConfig+0xb0>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a1a      	ldr	r2, [pc, #104]	; (80046b4 <TIM_OC4_SetConfig+0x10c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_OC4_SetConfig+0xb0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <TIM_OC4_SetConfig+0x110>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d113      	bne.n	8004680 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800465e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004666:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	019b      	lsls	r3, r3, #6
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	40013400 	.word	0x40013400
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40014400 	.word	0x40014400
 80046b8:	40014800 	.word	0x40014800

080046bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a17      	ldr	r2, [pc, #92]	; (8004770 <TIM_OC5_SetConfig+0xb4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00f      	beq.n	8004736 <TIM_OC5_SetConfig+0x7a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a16      	ldr	r2, [pc, #88]	; (8004774 <TIM_OC5_SetConfig+0xb8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_OC5_SetConfig+0x7a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a15      	ldr	r2, [pc, #84]	; (8004778 <TIM_OC5_SetConfig+0xbc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_OC5_SetConfig+0x7a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a14      	ldr	r2, [pc, #80]	; (800477c <TIM_OC5_SetConfig+0xc0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_OC5_SetConfig+0x7a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a13      	ldr	r2, [pc, #76]	; (8004780 <TIM_OC5_SetConfig+0xc4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d109      	bne.n	800474a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	621a      	str	r2, [r3, #32]
}
 8004764:	bf00      	nop
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40013400 	.word	0x40013400
 8004778:	40014000 	.word	0x40014000
 800477c:	40014400 	.word	0x40014400
 8004780:	40014800 	.word	0x40014800

08004784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	051b      	lsls	r3, r3, #20
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a18      	ldr	r2, [pc, #96]	; (800483c <TIM_OC6_SetConfig+0xb8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00f      	beq.n	8004800 <TIM_OC6_SetConfig+0x7c>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a17      	ldr	r2, [pc, #92]	; (8004840 <TIM_OC6_SetConfig+0xbc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00b      	beq.n	8004800 <TIM_OC6_SetConfig+0x7c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a16      	ldr	r2, [pc, #88]	; (8004844 <TIM_OC6_SetConfig+0xc0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <TIM_OC6_SetConfig+0x7c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a15      	ldr	r2, [pc, #84]	; (8004848 <TIM_OC6_SetConfig+0xc4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_OC6_SetConfig+0x7c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a14      	ldr	r2, [pc, #80]	; (800484c <TIM_OC6_SetConfig+0xc8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d109      	bne.n	8004814 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	029b      	lsls	r3, r3, #10
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40012c00 	.word	0x40012c00
 8004840:	40013400 	.word	0x40013400
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f023 0201 	bic.w	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800487a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f023 030a 	bic.w	r3, r3, #10
 800488c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	621a      	str	r2, [r3, #32]
}
 80048a2:	bf00      	nop
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b087      	sub	sp, #28
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f023 0210 	bic.w	r2, r3, #16
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	031b      	lsls	r3, r3, #12
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	621a      	str	r2, [r3, #32]
}
 8004902:	bf00      	nop
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800490e:	b480      	push	{r7}
 8004910:	b085      	sub	sp, #20
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	f043 0307 	orr.w	r3, r3, #7
 8004934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	609a      	str	r2, [r3, #8]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	021a      	lsls	r2, r3, #8
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	431a      	orrs	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4313      	orrs	r3, r2
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800499c:	2302      	movs	r3, #2
 800499e:	e065      	b.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a2c      	ldr	r2, [pc, #176]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d004      	beq.n	80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d108      	bne.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80049ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a16:	d013      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a18      	ldr	r2, [pc, #96]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a17      	ldr	r2, [pc, #92]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a12      	ldr	r2, [pc, #72]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10c      	bne.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40013400 	.word	0x40013400
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800
 8004a88:	40014000 	.word	0x40014000

08004a8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e087      	b.n	8004bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	041b      	lsls	r3, r3, #16
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a27      	ldr	r2, [pc, #156]	; (8004bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d106      	bne.n	8004b44 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1e      	ldr	r2, [pc, #120]	; (8004bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d126      	bne.n	8004ba6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	051b      	lsls	r3, r3, #20
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a0d      	ldr	r2, [pc, #52]	; (8004bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d106      	bne.n	8004ba6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40013400 	.word	0x40013400

08004bcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bd4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004bd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	4313      	orrs	r3, r2
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c06:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c0a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c34:	b084      	sub	sp, #16
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	f107 0014 	add.w	r0, r7, #20
 8004c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff ffb0 	bl	8004bcc <USB_EnableGlobalInt>

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c78:	b004      	add	sp, #16
 8004c7a:	4770      	bx	lr

08004c7c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c7c:	b490      	push	{r4, r7}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	78db      	ldrb	r3, [r3, #3]
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d819      	bhi.n	8004cde <USB_ActivateEndpoint+0x62>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <USB_ActivateEndpoint+0x34>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cc1 	.word	0x08004cc1
 8004cb4:	08004cd5 	.word	0x08004cd5
 8004cb8:	08004ce5 	.word	0x08004ce5
 8004cbc:	08004ccb 	.word	0x08004ccb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004cc0:	89bb      	ldrh	r3, [r7, #12]
 8004cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cc6:	81bb      	strh	r3, [r7, #12]
      break;
 8004cc8:	e00d      	b.n	8004ce6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004cca:	89bb      	ldrh	r3, [r7, #12]
 8004ccc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004cd0:	81bb      	strh	r3, [r7, #12]
      break;
 8004cd2:	e008      	b.n	8004ce6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004cd4:	89bb      	ldrh	r3, [r7, #12]
 8004cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cda:	81bb      	strh	r3, [r7, #12]
      break;
 8004cdc:	e003      	b.n	8004ce6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce2:	e000      	b.n	8004ce6 <USB_ActivateEndpoint+0x6a>
      break;
 8004ce4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	441a      	add	r2, r3
 8004cf0:	89bb      	ldrh	r3, [r7, #12]
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	b21b      	sxth	r3, r3
 8004d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	b21a      	sxth	r2, r3
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	b21b      	sxth	r3, r3
 8004d26:	4313      	orrs	r3, r2
 8004d28:	b21b      	sxth	r3, r3
 8004d2a:	b29c      	uxth	r4, r3
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	4b8a      	ldr	r3, [pc, #552]	; (8004f60 <USB_ActivateEndpoint+0x2e4>)
 8004d38:	4323      	orrs	r3, r4
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	7b1b      	ldrb	r3, [r3, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 8112 	bne.w	8004f6c <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d067      	beq.n	8004e20 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d50:	687c      	ldr	r4, [r7, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	441c      	add	r4, r3
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4423      	add	r3, r4
 8004d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d68:	461c      	mov	r4, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	88db      	ldrh	r3, [r3, #6]
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29c      	uxth	r4, r3
 8004d86:	4623      	mov	r3, r4
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d014      	beq.n	8004dba <USB_ActivateEndpoint+0x13e>
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	b29c      	uxth	r4, r3
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	4b6c      	ldr	r3, [pc, #432]	; (8004f64 <USB_ActivateEndpoint+0x2e8>)
 8004db4:	4323      	orrs	r3, r4
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	78db      	ldrb	r3, [r3, #3]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d018      	beq.n	8004df4 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd8:	b29c      	uxth	r4, r3
 8004dda:	f084 0320 	eor.w	r3, r4, #32
 8004dde:	b29c      	uxth	r4, r3
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	4b5d      	ldr	r3, [pc, #372]	; (8004f60 <USB_ActivateEndpoint+0x2e4>)
 8004dec:	4323      	orrs	r3, r4
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	8013      	strh	r3, [r2, #0]
 8004df2:	e22b      	b.n	800524c <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0a:	b29c      	uxth	r4, r3
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	441a      	add	r2, r3
 8004e16:	4b52      	ldr	r3, [pc, #328]	; (8004f60 <USB_ActivateEndpoint+0x2e4>)
 8004e18:	4323      	orrs	r3, r4
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	8013      	strh	r3, [r2, #0]
 8004e1e:	e215      	b.n	800524c <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e20:	687c      	ldr	r4, [r7, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	441c      	add	r4, r3
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4423      	add	r3, r4
 8004e34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e38:	461c      	mov	r4, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	88db      	ldrh	r3, [r3, #6]
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004e48:	687c      	ldr	r4, [r7, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	441c      	add	r4, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4423      	add	r3, r4
 8004e5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e60:	461c      	mov	r4, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10e      	bne.n	8004e88 <USB_ActivateEndpoint+0x20c>
 8004e6a:	8823      	ldrh	r3, [r4, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	8023      	strh	r3, [r4, #0]
 8004e76:	8823      	ldrh	r3, [r4, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8023      	strh	r3, [r4, #0]
 8004e86:	e02d      	b.n	8004ee4 <USB_ActivateEndpoint+0x268>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e8e:	d812      	bhi.n	8004eb6 <USB_ActivateEndpoint+0x23a>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	085b      	lsrs	r3, r3, #1
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <USB_ActivateEndpoint+0x22e>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	029b      	lsls	r3, r3, #10
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	8023      	strh	r3, [r4, #0]
 8004eb4:	e016      	b.n	8004ee4 <USB_ActivateEndpoint+0x268>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <USB_ActivateEndpoint+0x254>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	029b      	lsls	r3, r3, #10
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29c      	uxth	r4, r3
 8004ef2:	4623      	mov	r3, r4
 8004ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d014      	beq.n	8004f26 <USB_ActivateEndpoint+0x2aa>
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	b29c      	uxth	r4, r3
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <USB_ActivateEndpoint+0x2ec>)
 8004f20:	4323      	orrs	r3, r4
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3c:	b29c      	uxth	r4, r3
 8004f3e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f42:	b29c      	uxth	r4, r3
 8004f44:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004f48:	b29c      	uxth	r4, r3
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <USB_ActivateEndpoint+0x2e4>)
 8004f56:	4323      	orrs	r3, r4
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	8013      	strh	r3, [r2, #0]
 8004f5c:	e176      	b.n	800524c <USB_ActivateEndpoint+0x5d0>
 8004f5e:	bf00      	nop
 8004f60:	ffff8080 	.word	0xffff8080
 8004f64:	ffff80c0 	.word	0xffff80c0
 8004f68:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	b29c      	uxth	r4, r3
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	4b96      	ldr	r3, [pc, #600]	; (80051e8 <USB_ActivateEndpoint+0x56c>)
 8004f90:	4323      	orrs	r3, r4
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f96:	687c      	ldr	r4, [r7, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	441c      	add	r4, r3
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4423      	add	r3, r4
 8004faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fae:	461c      	mov	r4, r3
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	891b      	ldrh	r3, [r3, #8]
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	8023      	strh	r3, [r4, #0]
 8004fbe:	687c      	ldr	r4, [r7, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	441c      	add	r4, r3
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4423      	add	r3, r4
 8004fd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd6:	461c      	mov	r4, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	895b      	ldrh	r3, [r3, #10]
 8004fdc:	085b      	lsrs	r3, r3, #1
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f040 8088 	bne.w	8005100 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29c      	uxth	r4, r3
 8004ffe:	4623      	mov	r3, r4
 8005000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d014      	beq.n	8005032 <USB_ActivateEndpoint+0x3b6>
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	b29c      	uxth	r4, r3
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	441a      	add	r2, r3
 800502a:	4b70      	ldr	r3, [pc, #448]	; (80051ec <USB_ActivateEndpoint+0x570>)
 800502c:	4323      	orrs	r3, r4
 800502e:	b29b      	uxth	r3, r3
 8005030:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29c      	uxth	r4, r3
 8005040:	4623      	mov	r3, r4
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d014      	beq.n	8005074 <USB_ActivateEndpoint+0x3f8>
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005060:	b29c      	uxth	r4, r3
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	4b60      	ldr	r3, [pc, #384]	; (80051f0 <USB_ActivateEndpoint+0x574>)
 800506e:	4323      	orrs	r3, r4
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	b29c      	uxth	r4, r3
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	441a      	add	r2, r3
 8005096:	4b56      	ldr	r3, [pc, #344]	; (80051f0 <USB_ActivateEndpoint+0x574>)
 8005098:	4323      	orrs	r3, r4
 800509a:	b29b      	uxth	r3, r3
 800509c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b4:	b29c      	uxth	r4, r3
 80050b6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80050ba:	b29c      	uxth	r4, r3
 80050bc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80050c0:	b29c      	uxth	r4, r3
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	441a      	add	r2, r3
 80050cc:	4b49      	ldr	r3, [pc, #292]	; (80051f4 <USB_ActivateEndpoint+0x578>)
 80050ce:	4323      	orrs	r3, r4
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ea:	b29c      	uxth	r4, r3
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	4b3f      	ldr	r3, [pc, #252]	; (80051f4 <USB_ActivateEndpoint+0x578>)
 80050f8:	4323      	orrs	r3, r4
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	8013      	strh	r3, [r2, #0]
 80050fe:	e0a5      	b.n	800524c <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29c      	uxth	r4, r3
 800510e:	4623      	mov	r3, r4
 8005110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d014      	beq.n	8005142 <USB_ActivateEndpoint+0x4c6>
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	b29c      	uxth	r4, r3
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	4b2c      	ldr	r3, [pc, #176]	; (80051ec <USB_ActivateEndpoint+0x570>)
 800513c:	4323      	orrs	r3, r4
 800513e:	b29b      	uxth	r3, r3
 8005140:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29c      	uxth	r4, r3
 8005150:	4623      	mov	r3, r4
 8005152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d014      	beq.n	8005184 <USB_ActivateEndpoint+0x508>
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005170:	b29c      	uxth	r4, r3
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	441a      	add	r2, r3
 800517c:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <USB_ActivateEndpoint+0x574>)
 800517e:	4323      	orrs	r3, r4
 8005180:	b29b      	uxth	r3, r3
 8005182:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	b29c      	uxth	r4, r3
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	441a      	add	r2, r3
 80051a6:	4b11      	ldr	r3, [pc, #68]	; (80051ec <USB_ActivateEndpoint+0x570>)
 80051a8:	4323      	orrs	r3, r4
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	78db      	ldrb	r3, [r3, #3]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d020      	beq.n	80051f8 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051cc:	b29c      	uxth	r4, r3
 80051ce:	f084 0320 	eor.w	r3, r4, #32
 80051d2:	b29c      	uxth	r4, r3
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <USB_ActivateEndpoint+0x578>)
 80051e0:	4323      	orrs	r3, r4
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	8013      	strh	r3, [r2, #0]
 80051e6:	e01c      	b.n	8005222 <USB_ActivateEndpoint+0x5a6>
 80051e8:	ffff8180 	.word	0xffff8180
 80051ec:	ffffc080 	.word	0xffffc080
 80051f0:	ffff80c0 	.word	0xffff80c0
 80051f4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520e:	b29c      	uxth	r4, r3
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	441a      	add	r2, r3
 800521a:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <USB_ActivateEndpoint+0x5dc>)
 800521c:	4323      	orrs	r3, r4
 800521e:	b29b      	uxth	r3, r3
 8005220:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005238:	b29c      	uxth	r4, r3
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	441a      	add	r2, r3
 8005244:	4b04      	ldr	r3, [pc, #16]	; (8005258 <USB_ActivateEndpoint+0x5dc>)
 8005246:	4323      	orrs	r3, r4
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bc90      	pop	{r4, r7}
 8005256:	4770      	bx	lr
 8005258:	ffff8080 	.word	0xffff8080

0800525c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800525c:	b490      	push	{r4, r7}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	7b1b      	ldrb	r3, [r3, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d171      	bne.n	8005352 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	785b      	ldrb	r3, [r3, #1]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d036      	beq.n	80052e4 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29c      	uxth	r4, r3
 8005284:	4623      	mov	r3, r4
 8005286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d014      	beq.n	80052b8 <USB_DeactivateEndpoint+0x5c>
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	b29c      	uxth	r4, r3
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	441a      	add	r2, r3
 80052b0:	4b6b      	ldr	r3, [pc, #428]	; (8005460 <USB_DeactivateEndpoint+0x204>)
 80052b2:	4323      	orrs	r3, r4
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ce:	b29c      	uxth	r4, r3
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	441a      	add	r2, r3
 80052da:	4b62      	ldr	r3, [pc, #392]	; (8005464 <USB_DeactivateEndpoint+0x208>)
 80052dc:	4323      	orrs	r3, r4
 80052de:	b29b      	uxth	r3, r3
 80052e0:	8013      	strh	r3, [r2, #0]
 80052e2:	e144      	b.n	800556e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29c      	uxth	r4, r3
 80052f2:	4623      	mov	r3, r4
 80052f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d014      	beq.n	8005326 <USB_DeactivateEndpoint+0xca>
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	b29c      	uxth	r4, r3
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	441a      	add	r2, r3
 800531e:	4b52      	ldr	r3, [pc, #328]	; (8005468 <USB_DeactivateEndpoint+0x20c>)
 8005320:	4323      	orrs	r3, r4
 8005322:	b29b      	uxth	r3, r3
 8005324:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	b29c      	uxth	r4, r3
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	441a      	add	r2, r3
 8005348:	4b46      	ldr	r3, [pc, #280]	; (8005464 <USB_DeactivateEndpoint+0x208>)
 800534a:	4323      	orrs	r3, r4
 800534c:	b29b      	uxth	r3, r3
 800534e:	8013      	strh	r3, [r2, #0]
 8005350:	e10d      	b.n	800556e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f040 8088 	bne.w	800546c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29c      	uxth	r4, r3
 800536a:	4623      	mov	r3, r4
 800536c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d014      	beq.n	800539e <USB_DeactivateEndpoint+0x142>
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	b29c      	uxth	r4, r3
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	441a      	add	r2, r3
 8005396:	4b34      	ldr	r3, [pc, #208]	; (8005468 <USB_DeactivateEndpoint+0x20c>)
 8005398:	4323      	orrs	r3, r4
 800539a:	b29b      	uxth	r3, r3
 800539c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29c      	uxth	r4, r3
 80053ac:	4623      	mov	r3, r4
 80053ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d014      	beq.n	80053e0 <USB_DeactivateEndpoint+0x184>
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053cc:	b29c      	uxth	r4, r3
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	4b21      	ldr	r3, [pc, #132]	; (8005460 <USB_DeactivateEndpoint+0x204>)
 80053da:	4323      	orrs	r3, r4
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	b29c      	uxth	r4, r3
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	4b17      	ldr	r3, [pc, #92]	; (8005460 <USB_DeactivateEndpoint+0x204>)
 8005404:	4323      	orrs	r3, r4
 8005406:	b29b      	uxth	r3, r3
 8005408:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	b29c      	uxth	r4, r3
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	441a      	add	r2, r3
 800542c:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <USB_DeactivateEndpoint+0x208>)
 800542e:	4323      	orrs	r3, r4
 8005430:	b29b      	uxth	r3, r3
 8005432:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544a:	b29c      	uxth	r4, r3
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	441a      	add	r2, r3
 8005456:	4b03      	ldr	r3, [pc, #12]	; (8005464 <USB_DeactivateEndpoint+0x208>)
 8005458:	4323      	orrs	r3, r4
 800545a:	b29b      	uxth	r3, r3
 800545c:	8013      	strh	r3, [r2, #0]
 800545e:	e086      	b.n	800556e <USB_DeactivateEndpoint+0x312>
 8005460:	ffff80c0 	.word	0xffff80c0
 8005464:	ffff8080 	.word	0xffff8080
 8005468:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29c      	uxth	r4, r3
 800547a:	4623      	mov	r3, r4
 800547c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d014      	beq.n	80054ae <USB_DeactivateEndpoint+0x252>
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	b29c      	uxth	r4, r3
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	441a      	add	r2, r3
 80054a6:	4b35      	ldr	r3, [pc, #212]	; (800557c <USB_DeactivateEndpoint+0x320>)
 80054a8:	4323      	orrs	r3, r4
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29c      	uxth	r4, r3
 80054bc:	4623      	mov	r3, r4
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d014      	beq.n	80054f0 <USB_DeactivateEndpoint+0x294>
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054dc:	b29c      	uxth	r4, r3
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	441a      	add	r2, r3
 80054e8:	4b25      	ldr	r3, [pc, #148]	; (8005580 <USB_DeactivateEndpoint+0x324>)
 80054ea:	4323      	orrs	r3, r4
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	b29c      	uxth	r4, r3
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	441a      	add	r2, r3
 8005512:	4b1a      	ldr	r3, [pc, #104]	; (800557c <USB_DeactivateEndpoint+0x320>)
 8005514:	4323      	orrs	r3, r4
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005530:	b29c      	uxth	r4, r3
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <USB_DeactivateEndpoint+0x328>)
 800553e:	4323      	orrs	r3, r4
 8005540:	b29b      	uxth	r3, r3
 8005542:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	b29c      	uxth	r4, r3
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	441a      	add	r2, r3
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <USB_DeactivateEndpoint+0x328>)
 8005568:	4323      	orrs	r3, r4
 800556a:	b29b      	uxth	r3, r3
 800556c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bc90      	pop	{r4, r7}
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	ffffc080 	.word	0xffffc080
 8005580:	ffff80c0 	.word	0xffff80c0
 8005584:	ffff8080 	.word	0xffff8080

08005588 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b08d      	sub	sp, #52	; 0x34
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	2b01      	cmp	r3, #1
 8005598:	f040 8160 	bne.w	800585c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d909      	bls.n	80055bc <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	1ad2      	subs	r2, r2, r3
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	619a      	str	r2, [r3, #24]
 80055ba:	e005      	b.n	80055c8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2200      	movs	r2, #0
 80055c6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	7b1b      	ldrb	r3, [r3, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d119      	bne.n	8005604 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6959      	ldr	r1, [r3, #20]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	88da      	ldrh	r2, [r3, #6]
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	b29b      	uxth	r3, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fba8 	bl	8005d32 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055e2:	687c      	ldr	r4, [r7, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	441c      	add	r4, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4423      	add	r3, r4
 80055f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055fa:	461c      	mov	r4, r3
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	b29b      	uxth	r3, r3
 8005600:	8023      	strh	r3, [r4, #0]
 8005602:	e10f      	b.n	8005824 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d065      	beq.n	80056e6 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800561a:	687c      	ldr	r4, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d148      	bne.n	80056b6 <USB_EPStartXfer+0x12e>
 8005624:	687c      	ldr	r4, [r7, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562c:	b29b      	uxth	r3, r3
 800562e:	441c      	add	r4, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4423      	add	r3, r4
 8005638:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800563c:	461c      	mov	r4, r3
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10e      	bne.n	8005662 <USB_EPStartXfer+0xda>
 8005644:	8823      	ldrh	r3, [r4, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800564c:	b29b      	uxth	r3, r3
 800564e:	8023      	strh	r3, [r4, #0]
 8005650:	8823      	ldrh	r3, [r4, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565c:	b29b      	uxth	r3, r3
 800565e:	8023      	strh	r3, [r4, #0]
 8005660:	e03d      	b.n	80056de <USB_EPStartXfer+0x156>
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	2b3e      	cmp	r3, #62	; 0x3e
 8005666:	d810      	bhi.n	800568a <USB_EPStartXfer+0x102>
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <USB_EPStartXfer+0xf6>
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	3301      	adds	r3, #1
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	b29b      	uxth	r3, r3
 8005682:	029b      	lsls	r3, r3, #10
 8005684:	b29b      	uxth	r3, r3
 8005686:	8023      	strh	r3, [r4, #0]
 8005688:	e029      	b.n	80056de <USB_EPStartXfer+0x156>
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <USB_EPStartXfer+0x118>
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	3b01      	subs	r3, #1
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	029b      	lsls	r3, r3, #10
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	8023      	strh	r3, [r4, #0]
 80056b4:	e013      	b.n	80056de <USB_EPStartXfer+0x156>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d10f      	bne.n	80056de <USB_EPStartXfer+0x156>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	441c      	add	r4, r3
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4423      	add	r3, r4
 80056d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	895b      	ldrh	r3, [r3, #10]
 80056e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80056e4:	e063      	b.n	80057ae <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d148      	bne.n	8005780 <USB_EPStartXfer+0x1f8>
 80056ee:	687c      	ldr	r4, [r7, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	441c      	add	r4, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	4423      	add	r3, r4
 8005702:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005706:	461c      	mov	r4, r3
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10e      	bne.n	800572c <USB_EPStartXfer+0x1a4>
 800570e:	8823      	ldrh	r3, [r4, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005716:	b29b      	uxth	r3, r3
 8005718:	8023      	strh	r3, [r4, #0]
 800571a:	8823      	ldrh	r3, [r4, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005726:	b29b      	uxth	r3, r3
 8005728:	8023      	strh	r3, [r4, #0]
 800572a:	e03d      	b.n	80057a8 <USB_EPStartXfer+0x220>
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	2b3e      	cmp	r3, #62	; 0x3e
 8005730:	d810      	bhi.n	8005754 <USB_EPStartXfer+0x1cc>
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <USB_EPStartXfer+0x1c0>
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	3301      	adds	r3, #1
 8005746:	623b      	str	r3, [r7, #32]
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	b29b      	uxth	r3, r3
 800574c:	029b      	lsls	r3, r3, #10
 800574e:	b29b      	uxth	r3, r3
 8005750:	8023      	strh	r3, [r4, #0]
 8005752:	e029      	b.n	80057a8 <USB_EPStartXfer+0x220>
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	623b      	str	r3, [r7, #32]
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <USB_EPStartXfer+0x1e2>
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	3b01      	subs	r3, #1
 8005768:	623b      	str	r3, [r7, #32]
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	b29b      	uxth	r3, r3
 800576e:	029b      	lsls	r3, r3, #10
 8005770:	b29b      	uxth	r3, r3
 8005772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577a:	b29b      	uxth	r3, r3
 800577c:	8023      	strh	r3, [r4, #0]
 800577e:	e013      	b.n	80057a8 <USB_EPStartXfer+0x220>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	785b      	ldrb	r3, [r3, #1]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d10f      	bne.n	80057a8 <USB_EPStartXfer+0x220>
 8005788:	687c      	ldr	r4, [r7, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005790:	b29b      	uxth	r3, r3
 8005792:	441c      	add	r4, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4423      	add	r3, r4
 800579c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057a0:	461c      	mov	r4, r3
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	891b      	ldrh	r3, [r3, #8]
 80057ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6959      	ldr	r1, [r3, #20]
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 faba 	bl	8005d32 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d115      	bne.n	80057f2 <USB_EPStartXfer+0x26a>
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057dc:	b29c      	uxth	r4, r3
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	441a      	add	r2, r3
 80057e8:	4b9a      	ldr	r3, [pc, #616]	; (8005a54 <USB_EPStartXfer+0x4cc>)
 80057ea:	4323      	orrs	r3, r4
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	8013      	strh	r3, [r2, #0]
 80057f0:	e018      	b.n	8005824 <USB_EPStartXfer+0x29c>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d114      	bne.n	8005824 <USB_EPStartXfer+0x29c>
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005810:	b29c      	uxth	r4, r3
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	441a      	add	r2, r3
 800581c:	4b8e      	ldr	r3, [pc, #568]	; (8005a58 <USB_EPStartXfer+0x4d0>)
 800581e:	4323      	orrs	r3, r4
 8005820:	b29b      	uxth	r3, r3
 8005822:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583a:	b29c      	uxth	r4, r3
 800583c:	f084 0310 	eor.w	r3, r4, #16
 8005840:	b29c      	uxth	r4, r3
 8005842:	f084 0320 	eor.w	r3, r4, #32
 8005846:	b29c      	uxth	r4, r3
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	4b82      	ldr	r3, [pc, #520]	; (8005a5c <USB_EPStartXfer+0x4d4>)
 8005854:	4323      	orrs	r3, r4
 8005856:	b29b      	uxth	r3, r3
 8005858:	8013      	strh	r3, [r2, #0]
 800585a:	e146      	b.n	8005aea <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	429a      	cmp	r2, r3
 8005866:	d909      	bls.n	800587c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	1ad2      	subs	r2, r2, r3
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	619a      	str	r2, [r3, #24]
 800587a:	e005      	b.n	8005888 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2200      	movs	r2, #0
 8005886:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	7b1b      	ldrb	r3, [r3, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d148      	bne.n	8005922 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005890:	687c      	ldr	r4, [r7, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005898:	b29b      	uxth	r3, r3
 800589a:	441c      	add	r4, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	4423      	add	r3, r4
 80058a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058a8:	461c      	mov	r4, r3
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10e      	bne.n	80058ce <USB_EPStartXfer+0x346>
 80058b0:	8823      	ldrh	r3, [r4, #0]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	8023      	strh	r3, [r4, #0]
 80058bc:	8823      	ldrh	r3, [r4, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8023      	strh	r3, [r4, #0]
 80058cc:	e0f2      	b.n	8005ab4 <USB_EPStartXfer+0x52c>
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	2b3e      	cmp	r3, #62	; 0x3e
 80058d2:	d810      	bhi.n	80058f6 <USB_EPStartXfer+0x36e>
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <USB_EPStartXfer+0x362>
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	3301      	adds	r3, #1
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	029b      	lsls	r3, r3, #10
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	8023      	strh	r3, [r4, #0]
 80058f4:	e0de      	b.n	8005ab4 <USB_EPStartXfer+0x52c>
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <USB_EPStartXfer+0x384>
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3b01      	subs	r3, #1
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	b29b      	uxth	r3, r3
 8005910:	029b      	lsls	r3, r3, #10
 8005912:	b29b      	uxth	r3, r3
 8005914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591c:	b29b      	uxth	r3, r3
 800591e:	8023      	strh	r3, [r4, #0]
 8005920:	e0c8      	b.n	8005ab4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d148      	bne.n	80059bc <USB_EPStartXfer+0x434>
 800592a:	687c      	ldr	r4, [r7, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005932:	b29b      	uxth	r3, r3
 8005934:	441c      	add	r4, r3
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4423      	add	r3, r4
 800593e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005942:	461c      	mov	r4, r3
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10e      	bne.n	8005968 <USB_EPStartXfer+0x3e0>
 800594a:	8823      	ldrh	r3, [r4, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005952:	b29b      	uxth	r3, r3
 8005954:	8023      	strh	r3, [r4, #0]
 8005956:	8823      	ldrh	r3, [r4, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005962:	b29b      	uxth	r3, r3
 8005964:	8023      	strh	r3, [r4, #0]
 8005966:	e03d      	b.n	80059e4 <USB_EPStartXfer+0x45c>
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	2b3e      	cmp	r3, #62	; 0x3e
 800596c:	d810      	bhi.n	8005990 <USB_EPStartXfer+0x408>
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	085b      	lsrs	r3, r3, #1
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <USB_EPStartXfer+0x3fc>
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	3301      	adds	r3, #1
 8005982:	61bb      	str	r3, [r7, #24]
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	b29b      	uxth	r3, r3
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	b29b      	uxth	r3, r3
 800598c:	8023      	strh	r3, [r4, #0]
 800598e:	e029      	b.n	80059e4 <USB_EPStartXfer+0x45c>
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <USB_EPStartXfer+0x41e>
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	029b      	lsls	r3, r3, #10
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	8023      	strh	r3, [r4, #0]
 80059ba:	e013      	b.n	80059e4 <USB_EPStartXfer+0x45c>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d10f      	bne.n	80059e4 <USB_EPStartXfer+0x45c>
 80059c4:	687c      	ldr	r4, [r7, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	441c      	add	r4, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	4423      	add	r3, r4
 80059d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059dc:	461c      	mov	r4, r3
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	8023      	strh	r3, [r4, #0]
 80059e4:	687c      	ldr	r4, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d14e      	bne.n	8005a8c <USB_EPStartXfer+0x504>
 80059ee:	687c      	ldr	r4, [r7, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	441c      	add	r4, r3
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4423      	add	r3, r4
 8005a02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a06:	461c      	mov	r4, r3
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10e      	bne.n	8005a2c <USB_EPStartXfer+0x4a4>
 8005a0e:	8823      	ldrh	r3, [r4, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	8023      	strh	r3, [r4, #0]
 8005a1a:	8823      	ldrh	r3, [r4, #0]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	8023      	strh	r3, [r4, #0]
 8005a2a:	e043      	b.n	8005ab4 <USB_EPStartXfer+0x52c>
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a30:	d816      	bhi.n	8005a60 <USB_EPStartXfer+0x4d8>
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	085b      	lsrs	r3, r3, #1
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <USB_EPStartXfer+0x4c0>
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	3301      	adds	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	029b      	lsls	r3, r3, #10
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	8023      	strh	r3, [r4, #0]
 8005a52:	e02f      	b.n	8005ab4 <USB_EPStartXfer+0x52c>
 8005a54:	ffff80c0 	.word	0xffff80c0
 8005a58:	ffffc080 	.word	0xffffc080
 8005a5c:	ffff8080 	.word	0xffff8080
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	f003 031f 	and.w	r3, r3, #31
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d102      	bne.n	8005a76 <USB_EPStartXfer+0x4ee>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	029b      	lsls	r3, r3, #10
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	8023      	strh	r3, [r4, #0]
 8005a8a:	e013      	b.n	8005ab4 <USB_EPStartXfer+0x52c>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d10f      	bne.n	8005ab4 <USB_EPStartXfer+0x52c>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	441c      	add	r4, r3
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	4423      	add	r3, r4
 8005aa6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	b29c      	uxth	r4, r3
 8005acc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005ad0:	b29c      	uxth	r4, r3
 8005ad2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005ad6:	b29c      	uxth	r4, r3
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <USB_EPStartXfer+0x56c>)
 8005ae4:	4323      	orrs	r3, r4
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3734      	adds	r7, #52	; 0x34
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd90      	pop	{r4, r7, pc}
 8005af4:	ffff8080 	.word	0xffff8080

08005af8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005af8:	b490      	push	{r4, r7}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d018      	beq.n	8005b3c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b20:	b29c      	uxth	r4, r3
 8005b22:	f084 0310 	eor.w	r3, r4, #16
 8005b26:	b29c      	uxth	r4, r3
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	441a      	add	r2, r3
 8005b32:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <USB_EPSetStall+0x80>)
 8005b34:	4323      	orrs	r3, r4
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	8013      	strh	r3, [r2, #0]
 8005b3a:	e017      	b.n	8005b6c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	b29c      	uxth	r4, r3
 8005b54:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005b58:	b29c      	uxth	r4, r3
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	441a      	add	r2, r3
 8005b64:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <USB_EPSetStall+0x80>)
 8005b66:	4323      	orrs	r3, r4
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc90      	pop	{r4, r7}
 8005b76:	4770      	bx	lr
 8005b78:	ffff8080 	.word	0xffff8080

08005b7c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b7c:	b490      	push	{r4, r7}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	7b1b      	ldrb	r3, [r3, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d17d      	bne.n	8005c8a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d03d      	beq.n	8005c12 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29c      	uxth	r4, r3
 8005ba4:	4623      	mov	r3, r4
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d014      	beq.n	8005bd8 <USB_EPClearStall+0x5c>
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc4:	b29c      	uxth	r4, r3
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	441a      	add	r2, r3
 8005bd0:	4b31      	ldr	r3, [pc, #196]	; (8005c98 <USB_EPClearStall+0x11c>)
 8005bd2:	4323      	orrs	r3, r4
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d054      	beq.n	8005c8a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf6:	b29c      	uxth	r4, r3
 8005bf8:	f084 0320 	eor.w	r3, r4, #32
 8005bfc:	b29c      	uxth	r4, r3
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	441a      	add	r2, r3
 8005c08:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <USB_EPClearStall+0x120>)
 8005c0a:	4323      	orrs	r3, r4
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	8013      	strh	r3, [r2, #0]
 8005c10:	e03b      	b.n	8005c8a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	b29c      	uxth	r4, r3
 8005c20:	4623      	mov	r3, r4
 8005c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d014      	beq.n	8005c54 <USB_EPClearStall+0xd8>
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	b29c      	uxth	r4, r3
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	441a      	add	r2, r3
 8005c4c:	4b14      	ldr	r3, [pc, #80]	; (8005ca0 <USB_EPClearStall+0x124>)
 8005c4e:	4323      	orrs	r3, r4
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	b29c      	uxth	r4, r3
 8005c6c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005c70:	b29c      	uxth	r4, r3
 8005c72:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005c76:	b29c      	uxth	r4, r3
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <USB_EPClearStall+0x120>)
 8005c84:	4323      	orrs	r3, r4
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc90      	pop	{r4, r7}
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	ffff80c0 	.word	0xffff80c0
 8005c9c:	ffff8080 	.word	0xffff8080
 8005ca0:	ffffc080 	.word	0xffffc080

08005ca4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d103      	bne.n	8005cbe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2280      	movs	r2, #128	; 0x80
 8005cba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b08d      	sub	sp, #52	; 0x34
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	461a      	mov	r2, r3
 8005d40:	460b      	mov	r3, r1
 8005d42:	80fb      	strh	r3, [r7, #6]
 8005d44:	4613      	mov	r3, r2
 8005d46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d48:	88bb      	ldrh	r3, [r7, #4]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d58:	88fa      	ldrh	r2, [r7, #6]
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d62:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d68:	e01b      	b.n	8005da2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	3301      	adds	r3, #1
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	3302      	adds	r3, #2
 8005d94:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	3301      	adds	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e0      	bne.n	8005d6a <USB_WritePMA+0x38>
  }
}
 8005da8:	bf00      	nop
 8005daa:	3734      	adds	r7, #52	; 0x34
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b08b      	sub	sp, #44	; 0x2c
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	80fb      	strh	r3, [r7, #6]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005dca:	88bb      	ldrh	r3, [r7, #4]
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dda:	88fa      	ldrh	r2, [r7, #6]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dea:	e018      	b.n	8005e1e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	3302      	adds	r3, #2
 8005df8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	3301      	adds	r3, #1
 8005e06:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	3301      	adds	r3, #1
 8005e16:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e3      	bne.n	8005dec <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005e24:	88bb      	ldrh	r3, [r7, #4]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	701a      	strb	r2, [r3, #0]
  }
}
 8005e40:	bf00      	nop
 8005e42:	372c      	adds	r7, #44	; 0x2c
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	2203      	movs	r2, #3
 8005e60:	2181      	movs	r1, #129	; 0x81
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f002 f8a9 	bl	8007fba <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8005e6e:	2302      	movs	r3, #2
 8005e70:	2203      	movs	r2, #3
 8005e72:	2101      	movs	r1, #1
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f002 f8a0 	bl	8007fba <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005e82:	2018      	movs	r0, #24
 8005e84:	f002 f9de 	bl	8008244 <USBD_static_malloc>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d102      	bne.n	8005ea0 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	73fb      	strb	r3, [r7, #15]
 8005e9e:	e011      	b.n	8005ec4 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea6:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	2302      	movs	r3, #2
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f002 f966 	bl	8008190 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8005eda:	2181      	movs	r1, #129	; 0x81
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f002 f892 	bl	8008006 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005ee8:	2101      	movs	r1, #1
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f002 f88b 	bl	8008006 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f12:	4618      	mov	r0, r3
 8005f14:	f002 f9a4 	bl	8008260 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d051      	beq.n	8005ffe <USBD_CUSTOM_HID_Setup+0xd2>
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	f040 80d8 	bne.w	8006110 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	785b      	ldrb	r3, [r3, #1]
 8005f64:	3b02      	subs	r3, #2
 8005f66:	2b09      	cmp	r3, #9
 8005f68:	d841      	bhi.n	8005fee <USBD_CUSTOM_HID_Setup+0xc2>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <USBD_CUSTOM_HID_Setup+0x44>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005fc9 	.word	0x08005fc9
 8005f74:	08005fa7 	.word	0x08005fa7
 8005f78:	08005fef 	.word	0x08005fef
 8005f7c:	08005fef 	.word	0x08005fef
 8005f80:	08005fef 	.word	0x08005fef
 8005f84:	08005fef 	.word	0x08005fef
 8005f88:	08005fef 	.word	0x08005fef
 8005f8c:	08005fd9 	.word	0x08005fd9
 8005f90:	08005fb7 	.word	0x08005fb7
 8005f94:	08005f99 	.word	0x08005f99
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	885b      	ldrh	r3, [r3, #2]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	605a      	str	r2, [r3, #4]
          break;
 8005fa4:	e02a      	b.n	8005ffc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	2201      	movs	r2, #1
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f001 f99c 	bl	80072ec <USBD_CtlSendData>
          break;
 8005fb4:	e022      	b.n	8005ffc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	885b      	ldrh	r3, [r3, #2]
 8005fba:	0a1b      	lsrs	r3, r3, #8
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	609a      	str	r2, [r3, #8]
          break;
 8005fc6:	e019      	b.n	8005ffc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	2201      	movs	r2, #1
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f98b 	bl	80072ec <USBD_CtlSendData>
          break;
 8005fd6:	e011      	b.n	8005ffc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005fde:	6939      	ldr	r1, [r7, #16]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	88db      	ldrh	r3, [r3, #6]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f001 f9ae 	bl	8007348 <USBD_CtlPrepareRx>
          break;
 8005fec:	e006      	b.n	8005ffc <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 f910 	bl	8007216 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	75fb      	strb	r3, [r7, #23]
          break;
 8005ffa:	bf00      	nop
      }
      break;
 8005ffc:	e08f      	b.n	800611e <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b0b      	cmp	r3, #11
 8006004:	d87c      	bhi.n	8006100 <USBD_CUSTOM_HID_Setup+0x1d4>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <USBD_CUSTOM_HID_Setup+0xe0>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800603d 	.word	0x0800603d
 8006010:	08006101 	.word	0x08006101
 8006014:	08006101 	.word	0x08006101
 8006018:	08006101 	.word	0x08006101
 800601c:	08006101 	.word	0x08006101
 8006020:	08006101 	.word	0x08006101
 8006024:	08006065 	.word	0x08006065
 8006028:	08006101 	.word	0x08006101
 800602c:	08006101 	.word	0x08006101
 8006030:	08006101 	.word	0x08006101
 8006034:	080060b3 	.word	0x080060b3
 8006038:	080060db 	.word	0x080060db
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006042:	2b03      	cmp	r3, #3
 8006044:	d107      	bne.n	8006056 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006046:	f107 030e 	add.w	r3, r7, #14
 800604a:	2202      	movs	r2, #2
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 f94c 	bl	80072ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006054:	e05b      	b.n	800610e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 f8dc 	bl	8007216 <USBD_CtlError>
            ret = USBD_FAIL;
 800605e:	2302      	movs	r3, #2
 8006060:	75fb      	strb	r3, [r7, #23]
          break;
 8006062:	e054      	b.n	800610e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	885b      	ldrh	r3, [r3, #2]
 8006068:	0a1b      	lsrs	r3, r3, #8
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b22      	cmp	r3, #34	; 0x22
 800606e:	d10b      	bne.n	8006088 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	88db      	ldrh	r3, [r3, #6]
 8006074:	2b02      	cmp	r3, #2
 8006076:	bf28      	it	cs
 8006078:	2302      	movcs	r3, #2
 800607a:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	e00d      	b.n	80060a4 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	885b      	ldrh	r3, [r3, #2]
 800608c:	0a1b      	lsrs	r3, r3, #8
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b21      	cmp	r3, #33	; 0x21
 8006092:	d107      	bne.n	80060a4 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006094:	4b24      	ldr	r3, [pc, #144]	; (8006128 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8006096:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	88db      	ldrh	r3, [r3, #6]
 800609c:	2b09      	cmp	r3, #9
 800609e:	bf28      	it	cs
 80060a0:	2309      	movcs	r3, #9
 80060a2:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80060a4:	8bfb      	ldrh	r3, [r7, #30]
 80060a6:	461a      	mov	r2, r3
 80060a8:	69b9      	ldr	r1, [r7, #24]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 f91e 	bl	80072ec <USBD_CtlSendData>
          break;
 80060b0:	e02d      	b.n	800610e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d107      	bne.n	80060cc <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	330c      	adds	r3, #12
 80060c0:	2201      	movs	r2, #1
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 f911 	bl	80072ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060ca:	e020      	b.n	800610e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f001 f8a1 	bl	8007216 <USBD_CtlError>
            ret = USBD_FAIL;
 80060d4:	2302      	movs	r3, #2
 80060d6:	75fb      	strb	r3, [r7, #23]
          break;
 80060d8:	e019      	b.n	800610e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d106      	bne.n	80060f2 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	885b      	ldrh	r3, [r3, #2]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	461a      	mov	r2, r3
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060f0:	e00d      	b.n	800610e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 f88e 	bl	8007216 <USBD_CtlError>
            ret = USBD_FAIL;
 80060fa:	2302      	movs	r3, #2
 80060fc:	75fb      	strb	r3, [r7, #23]
          break;
 80060fe:	e006      	b.n	800610e <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 f887 	bl	8007216 <USBD_CtlError>
          ret = USBD_FAIL;
 8006108:	2302      	movs	r3, #2
 800610a:	75fb      	strb	r3, [r7, #23]
          break;
 800610c:	bf00      	nop
      }
      break;
 800610e:	e006      	b.n	800611e <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 f87f 	bl	8007216 <USBD_CtlError>
      ret = USBD_FAIL;
 8006118:	2302      	movs	r3, #2
 800611a:	75fb      	strb	r3, [r7, #23]
      break;
 800611c:	bf00      	nop
  }
  return ret;
 800611e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3720      	adds	r7, #32
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	200000c4 	.word	0x200000c4

0800612c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2229      	movs	r2, #41	; 0x29
 8006138:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800613a:	4b03      	ldr	r3, [pc, #12]	; (8006148 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	20000040 	.word	0x20000040

0800614c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2229      	movs	r2, #41	; 0x29
 8006158:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800615a:	4b03      	ldr	r3, [pc, #12]	; (8006168 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	2000006c 	.word	0x2000006c

0800616c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2229      	movs	r2, #41	; 0x29
 8006178:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800617a:	4b03      	ldr	r3, [pc, #12]	; (8006188 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	20000098 	.word	0x20000098

0800618c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619e:	2200      	movs	r2, #0
 80061a0:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c2:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	7810      	ldrb	r0, [r2, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	7852      	ldrb	r2, [r2, #1]
 80061d4:	4611      	mov	r1, r2
 80061d6:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	2302      	movs	r3, #2
 80061dc:	2101      	movs	r1, #1
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 ffd6 	bl	8008190 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fc:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d10c      	bne.n	8006220 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	7810      	ldrb	r0, [r2, #0]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	7852      	ldrb	r2, [r2, #1]
 8006216:	4611      	mov	r1, r2
 8006218:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	220a      	movs	r2, #10
 8006238:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800623a:	4b03      	ldr	r3, [pc, #12]	; (8006248 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	200000d0 	.word	0x200000d0

0800624c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006256:	2302      	movs	r3, #2
 8006258:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	4613      	mov	r3, r2
 8006286:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800628e:	2302      	movs	r3, #2
 8006290:	e01a      	b.n	80062c8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	79fa      	ldrb	r2, [r7, #7]
 80062be:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f001 fe09 	bl	8007ed8 <USBD_LL_Init>

  return USBD_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d006      	beq.n	80062f2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	73fb      	strb	r3, [r7, #15]
 80062f0:	e001      	b.n	80062f6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80062f2:	2302      	movs	r3, #2
 80062f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fe39 	bl	8007f84 <USBD_LL_Start>

  return USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800633e:	2302      	movs	r3, #2
 8006340:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00c      	beq.n	8006366 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	78fa      	ldrb	r2, [r7, #3]
 8006356:	4611      	mov	r1, r2
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	78fa      	ldrb	r2, [r7, #3]
 8006386:	4611      	mov	r1, r2
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	4798      	blx	r3

  return USBD_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fef7 	bl	800719c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063bc:	461a      	mov	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d00c      	beq.n	80063ec <USBD_LL_SetupStage+0x56>
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d302      	bcc.n	80063dc <USBD_LL_SetupStage+0x46>
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d010      	beq.n	80063fc <USBD_LL_SetupStage+0x66>
 80063da:	e017      	b.n	800640c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f9cd 	bl	8006784 <USBD_StdDevReq>
      break;
 80063ea:	e01a      	b.n	8006422 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fa2f 	bl	8006858 <USBD_StdItfReq>
      break;
 80063fa:	e012      	b.n	8006422 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fa6d 	bl	80068e4 <USBD_StdEPReq>
      break;
 800640a:	e00a      	b.n	8006422 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006412:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006416:	b2db      	uxtb	r3, r3
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 fe12 	bl	8008044 <USBD_LL_StallEP>
      break;
 8006420:	bf00      	nop
  }

  return USBD_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	460b      	mov	r3, r1
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d14b      	bne.n	80064d8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006446:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800644e:	2b03      	cmp	r3, #3
 8006450:	d134      	bne.n	80064bc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	429a      	cmp	r2, r3
 800645c:	d919      	bls.n	8006492 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006474:	429a      	cmp	r2, r3
 8006476:	d203      	bcs.n	8006480 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800647c:	b29b      	uxth	r3, r3
 800647e:	e002      	b.n	8006486 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006484:	b29b      	uxth	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 ff7a 	bl	8007384 <USBD_CtlContinueRx>
 8006490:	e038      	b.n	8006504 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d105      	bne.n	80064b4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 ff77 	bl	80073a8 <USBD_CtlSendStatus>
 80064ba:	e023      	b.n	8006504 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d11e      	bne.n	8006504 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80064ce:	2100      	movs	r1, #0
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f001 fdb7 	bl	8008044 <USBD_LL_StallEP>
 80064d6:	e015      	b.n	8006504 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00d      	beq.n	8006500 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d108      	bne.n	8006500 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	7afa      	ldrb	r2, [r7, #11]
 80064f8:	4611      	mov	r1, r2
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	4798      	blx	r3
 80064fe:	e001      	b.n	8006504 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006500:	2302      	movs	r3, #2
 8006502:	e000      	b.n	8006506 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b086      	sub	sp, #24
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	460b      	mov	r3, r1
 8006518:	607a      	str	r2, [r7, #4]
 800651a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d17f      	bne.n	8006622 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3314      	adds	r3, #20
 8006526:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800652e:	2b02      	cmp	r3, #2
 8006530:	d15c      	bne.n	80065ec <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	429a      	cmp	r2, r3
 800653c:	d915      	bls.n	800656a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	b29b      	uxth	r3, r3
 8006552:	461a      	mov	r2, r3
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fee4 	bl	8007324 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800655c:	2300      	movs	r3, #0
 800655e:	2200      	movs	r2, #0
 8006560:	2100      	movs	r1, #0
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f001 fe14 	bl	8008190 <USBD_LL_PrepareReceive>
 8006568:	e04e      	b.n	8006608 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	6912      	ldr	r2, [r2, #16]
 8006572:	fbb3 f1f2 	udiv	r1, r3, r2
 8006576:	fb02 f201 	mul.w	r2, r2, r1
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d11c      	bne.n	80065ba <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006588:	429a      	cmp	r2, r3
 800658a:	d316      	bcc.n	80065ba <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006596:	429a      	cmp	r2, r3
 8006598:	d20f      	bcs.n	80065ba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800659a:	2200      	movs	r2, #0
 800659c:	2100      	movs	r1, #0
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fec0 	bl	8007324 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065ac:	2300      	movs	r3, #0
 80065ae:	2200      	movs	r2, #0
 80065b0:	2100      	movs	r1, #0
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f001 fdec 	bl	8008190 <USBD_LL_PrepareReceive>
 80065b8:	e026      	b.n	8006608 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d105      	bne.n	80065dc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80065dc:	2180      	movs	r1, #128	; 0x80
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f001 fd30 	bl	8008044 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 fef2 	bl	80073ce <USBD_CtlReceiveStatus>
 80065ea:	e00d      	b.n	8006608 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d004      	beq.n	8006600 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d103      	bne.n	8006608 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006600:	2180      	movs	r1, #128	; 0x80
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f001 fd1e 	bl	8008044 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800660e:	2b01      	cmp	r3, #1
 8006610:	d11d      	bne.n	800664e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f7ff fe82 	bl	800631c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006620:	e015      	b.n	800664e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00d      	beq.n	800664a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006634:	2b03      	cmp	r3, #3
 8006636:	d108      	bne.n	800664a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	7afa      	ldrb	r2, [r7, #11]
 8006642:	4611      	mov	r1, r2
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	4798      	blx	r3
 8006648:	e001      	b.n	800664e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800664a:	2302      	movs	r3, #2
 800664c:	e000      	b.n	8006650 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006660:	2340      	movs	r3, #64	; 0x40
 8006662:	2200      	movs	r2, #0
 8006664:	2100      	movs	r1, #0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 fca7 	bl	8007fba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2240      	movs	r2, #64	; 0x40
 8006678:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800667c:	2340      	movs	r3, #64	; 0x40
 800667e:	2200      	movs	r2, #0
 8006680:	2180      	movs	r1, #128	; 0x80
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 fc99 	bl	8007fba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2240      	movs	r2, #64	; 0x40
 8006692:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6852      	ldr	r2, [r2, #4]
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	4611      	mov	r1, r2
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
  }

  return USBD_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2204      	movs	r2, #4
 8006712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006732:	2b04      	cmp	r3, #4
 8006734:	d105      	bne.n	8006742 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800675e:	2b03      	cmp	r3, #3
 8006760:	d10b      	bne.n	800677a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800679a:	2b20      	cmp	r3, #32
 800679c:	d004      	beq.n	80067a8 <USBD_StdDevReq+0x24>
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d002      	beq.n	80067a8 <USBD_StdDevReq+0x24>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <USBD_StdDevReq+0x34>
 80067a6:	e04c      	b.n	8006842 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
      break;
 80067b6:	e049      	b.n	800684c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b09      	cmp	r3, #9
 80067be:	d83a      	bhi.n	8006836 <USBD_StdDevReq+0xb2>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <USBD_StdDevReq+0x44>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	08006819 	.word	0x08006819
 80067cc:	0800682d 	.word	0x0800682d
 80067d0:	08006837 	.word	0x08006837
 80067d4:	08006823 	.word	0x08006823
 80067d8:	08006837 	.word	0x08006837
 80067dc:	080067fb 	.word	0x080067fb
 80067e0:	080067f1 	.word	0x080067f1
 80067e4:	08006837 	.word	0x08006837
 80067e8:	0800680f 	.word	0x0800680f
 80067ec:	08006805 	.word	0x08006805
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f9d4 	bl	8006ba0 <USBD_GetDescriptor>
          break;
 80067f8:	e022      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fb61 	bl	8006ec4 <USBD_SetAddress>
          break;
 8006802:	e01d      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fb9e 	bl	8006f48 <USBD_SetConfig>
          break;
 800680c:	e018      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fc27 	bl	8007064 <USBD_GetConfig>
          break;
 8006816:	e013      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fc56 	bl	80070cc <USBD_GetStatus>
          break;
 8006820:	e00e      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fc84 	bl	8007132 <USBD_SetFeature>
          break;
 800682a:	e009      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fc93 	bl	800715a <USBD_ClrFeature>
          break;
 8006834:	e004      	b.n	8006840 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fcec 	bl	8007216 <USBD_CtlError>
          break;
 800683e:	bf00      	nop
      }
      break;
 8006840:	e004      	b.n	800684c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fce6 	bl	8007216 <USBD_CtlError>
      break;
 800684a:	bf00      	nop
  }

  return ret;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop

08006858 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800686e:	2b20      	cmp	r3, #32
 8006870:	d003      	beq.n	800687a <USBD_StdItfReq+0x22>
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d001      	beq.n	800687a <USBD_StdItfReq+0x22>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d12a      	bne.n	80068d0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006880:	3b01      	subs	r3, #1
 8006882:	2b02      	cmp	r3, #2
 8006884:	d81d      	bhi.n	80068c2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	889b      	ldrh	r3, [r3, #4]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	d813      	bhi.n	80068b8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	88db      	ldrh	r3, [r3, #6]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d110      	bne.n	80068cc <USBD_StdItfReq+0x74>
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10d      	bne.n	80068cc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fd79 	bl	80073a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068b6:	e009      	b.n	80068cc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fcab 	bl	8007216 <USBD_CtlError>
          break;
 80068c0:	e004      	b.n	80068cc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fca6 	bl	8007216 <USBD_CtlError>
          break;
 80068ca:	e000      	b.n	80068ce <USBD_StdItfReq+0x76>
          break;
 80068cc:	bf00      	nop
      }
      break;
 80068ce:	e004      	b.n	80068da <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fc9f 	bl	8007216 <USBD_CtlError>
      break;
 80068d8:	bf00      	nop
  }

  return USBD_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	889b      	ldrh	r3, [r3, #4]
 80068f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006900:	2b20      	cmp	r3, #32
 8006902:	d004      	beq.n	800690e <USBD_StdEPReq+0x2a>
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d002      	beq.n	800690e <USBD_StdEPReq+0x2a>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d008      	beq.n	800691e <USBD_StdEPReq+0x3a>
 800690c:	e13d      	b.n	8006b8a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	4798      	blx	r3
      break;
 800691c:	e13a      	b.n	8006b94 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006926:	2b20      	cmp	r3, #32
 8006928:	d10a      	bne.n	8006940 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	4798      	blx	r3
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	e12a      	b.n	8006b96 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d03e      	beq.n	80069c6 <USBD_StdEPReq+0xe2>
 8006948:	2b03      	cmp	r3, #3
 800694a:	d002      	beq.n	8006952 <USBD_StdEPReq+0x6e>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d070      	beq.n	8006a32 <USBD_StdEPReq+0x14e>
 8006950:	e115      	b.n	8006b7e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006958:	2b02      	cmp	r3, #2
 800695a:	d002      	beq.n	8006962 <USBD_StdEPReq+0x7e>
 800695c:	2b03      	cmp	r3, #3
 800695e:	d015      	beq.n	800698c <USBD_StdEPReq+0xa8>
 8006960:	e02b      	b.n	80069ba <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00c      	beq.n	8006982 <USBD_StdEPReq+0x9e>
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	2b80      	cmp	r3, #128	; 0x80
 800696c:	d009      	beq.n	8006982 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fb66 	bl	8008044 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006978:	2180      	movs	r1, #128	; 0x80
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 fb62 	bl	8008044 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006980:	e020      	b.n	80069c4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fc46 	bl	8007216 <USBD_CtlError>
              break;
 800698a:	e01b      	b.n	80069c4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	885b      	ldrh	r3, [r3, #2]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10e      	bne.n	80069b2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006994:	7bbb      	ldrb	r3, [r7, #14]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00b      	beq.n	80069b2 <USBD_StdEPReq+0xce>
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	2b80      	cmp	r3, #128	; 0x80
 800699e:	d008      	beq.n	80069b2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	88db      	ldrh	r3, [r3, #6]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d104      	bne.n	80069b2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 fb49 	bl	8008044 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fcf8 	bl	80073a8 <USBD_CtlSendStatus>

              break;
 80069b8:	e004      	b.n	80069c4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fc2a 	bl	8007216 <USBD_CtlError>
              break;
 80069c2:	bf00      	nop
          }
          break;
 80069c4:	e0e0      	b.n	8006b88 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d002      	beq.n	80069d6 <USBD_StdEPReq+0xf2>
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d015      	beq.n	8006a00 <USBD_StdEPReq+0x11c>
 80069d4:	e026      	b.n	8006a24 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00c      	beq.n	80069f6 <USBD_StdEPReq+0x112>
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	2b80      	cmp	r3, #128	; 0x80
 80069e0:	d009      	beq.n	80069f6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 fb2c 	bl	8008044 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 fb28 	bl	8008044 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069f4:	e01c      	b.n	8006a30 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fc0c 	bl	8007216 <USBD_CtlError>
              break;
 80069fe:	e017      	b.n	8006a30 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	885b      	ldrh	r3, [r3, #2]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d112      	bne.n	8006a2e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 fb33 	bl	8008082 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fcc3 	bl	80073a8 <USBD_CtlSendStatus>
              }
              break;
 8006a22:	e004      	b.n	8006a2e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fbf5 	bl	8007216 <USBD_CtlError>
              break;
 8006a2c:	e000      	b.n	8006a30 <USBD_StdEPReq+0x14c>
              break;
 8006a2e:	bf00      	nop
          }
          break;
 8006a30:	e0aa      	b.n	8006b88 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d002      	beq.n	8006a42 <USBD_StdEPReq+0x15e>
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d032      	beq.n	8006aa6 <USBD_StdEPReq+0x1c2>
 8006a40:	e097      	b.n	8006b72 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <USBD_StdEPReq+0x174>
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	2b80      	cmp	r3, #128	; 0x80
 8006a4c:	d004      	beq.n	8006a58 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fbe0 	bl	8007216 <USBD_CtlError>
                break;
 8006a56:	e091      	b.n	8006b7c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	da0b      	bge.n	8006a78 <USBD_StdEPReq+0x194>
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	3310      	adds	r3, #16
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	4413      	add	r3, r2
 8006a74:	3304      	adds	r3, #4
 8006a76:	e00b      	b.n	8006a90 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	3304      	adds	r3, #4
 8006a90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fc24 	bl	80072ec <USBD_CtlSendData>
              break;
 8006aa4:	e06a      	b.n	8006b7c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	da11      	bge.n	8006ad2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	f003 020f 	and.w	r2, r3, #15
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	440b      	add	r3, r1
 8006ac0:	3318      	adds	r3, #24
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d117      	bne.n	8006af8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fba3 	bl	8007216 <USBD_CtlError>
                  break;
 8006ad0:	e054      	b.n	8006b7c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	f003 020f 	and.w	r2, r3, #15
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d104      	bne.n	8006af8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fb90 	bl	8007216 <USBD_CtlError>
                  break;
 8006af6:	e041      	b.n	8006b7c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da0b      	bge.n	8006b18 <USBD_StdEPReq+0x234>
 8006b00:	7bbb      	ldrb	r3, [r7, #14]
 8006b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	3310      	adds	r3, #16
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	4413      	add	r3, r2
 8006b14:	3304      	adds	r3, #4
 8006b16:	e00b      	b.n	8006b30 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3304      	adds	r3, #4
 8006b30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <USBD_StdEPReq+0x25a>
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2b80      	cmp	r3, #128	; 0x80
 8006b3c:	d103      	bne.n	8006b46 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	e00e      	b.n	8006b64 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 fab8 	bl	80080c0 <USBD_LL_IsStallEP>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e002      	b.n	8006b64 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2202      	movs	r2, #2
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fbbe 	bl	80072ec <USBD_CtlSendData>
              break;
 8006b70:	e004      	b.n	8006b7c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fb4e 	bl	8007216 <USBD_CtlError>
              break;
 8006b7a:	bf00      	nop
          }
          break;
 8006b7c:	e004      	b.n	8006b88 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fb48 	bl	8007216 <USBD_CtlError>
          break;
 8006b86:	bf00      	nop
      }
      break;
 8006b88:	e004      	b.n	8006b94 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fb42 	bl	8007216 <USBD_CtlError>
      break;
 8006b92:	bf00      	nop
  }

  return ret;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	885b      	ldrh	r3, [r3, #2]
 8006bba:	0a1b      	lsrs	r3, r3, #8
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	2b0e      	cmp	r3, #14
 8006bc2:	f200 8152 	bhi.w	8006e6a <USBD_GetDescriptor+0x2ca>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <USBD_GetDescriptor+0x2c>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c3d 	.word	0x08006c3d
 8006bd0:	08006c55 	.word	0x08006c55
 8006bd4:	08006c95 	.word	0x08006c95
 8006bd8:	08006e6b 	.word	0x08006e6b
 8006bdc:	08006e6b 	.word	0x08006e6b
 8006be0:	08006e0b 	.word	0x08006e0b
 8006be4:	08006e37 	.word	0x08006e37
 8006be8:	08006e6b 	.word	0x08006e6b
 8006bec:	08006e6b 	.word	0x08006e6b
 8006bf0:	08006e6b 	.word	0x08006e6b
 8006bf4:	08006e6b 	.word	0x08006e6b
 8006bf8:	08006e6b 	.word	0x08006e6b
 8006bfc:	08006e6b 	.word	0x08006e6b
 8006c00:	08006e6b 	.word	0x08006e6b
 8006c04:	08006c09 	.word	0x08006c09
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	7c12      	ldrb	r2, [r2, #16]
 8006c20:	f107 0108 	add.w	r1, r7, #8
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
 8006c28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c2a:	e126      	b.n	8006e7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 faf1 	bl	8007216 <USBD_CtlError>
        err++;
 8006c34:	7afb      	ldrb	r3, [r7, #11]
 8006c36:	3301      	adds	r3, #1
 8006c38:	72fb      	strb	r3, [r7, #11]
      break;
 8006c3a:	e11e      	b.n	8006e7a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	7c12      	ldrb	r2, [r2, #16]
 8006c48:	f107 0108 	add.w	r1, r7, #8
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4798      	blx	r3
 8006c50:	60f8      	str	r0, [r7, #12]
      break;
 8006c52:	e112      	b.n	8006e7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	7c1b      	ldrb	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10d      	bne.n	8006c78 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	f107 0208 	add.w	r2, r7, #8
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4798      	blx	r3
 8006c6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	2202      	movs	r2, #2
 8006c74:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c76:	e100      	b.n	8006e7a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	f107 0208 	add.w	r2, r7, #8
 8006c84:	4610      	mov	r0, r2
 8006c86:	4798      	blx	r3
 8006c88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	2202      	movs	r2, #2
 8006c90:	701a      	strb	r2, [r3, #0]
      break;
 8006c92:	e0f2      	b.n	8006e7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	885b      	ldrh	r3, [r3, #2]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b05      	cmp	r3, #5
 8006c9c:	f200 80ac 	bhi.w	8006df8 <USBD_GetDescriptor+0x258>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <USBD_GetDescriptor+0x108>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cc1 	.word	0x08006cc1
 8006cac:	08006cf5 	.word	0x08006cf5
 8006cb0:	08006d29 	.word	0x08006d29
 8006cb4:	08006d5d 	.word	0x08006d5d
 8006cb8:	08006d91 	.word	0x08006d91
 8006cbc:	08006dc5 	.word	0x08006dc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	7c12      	ldrb	r2, [r2, #16]
 8006cd8:	f107 0108 	add.w	r1, r7, #8
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
 8006ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ce2:	e091      	b.n	8006e08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa95 	bl	8007216 <USBD_CtlError>
            err++;
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cf2:	e089      	b.n	8006e08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	7c12      	ldrb	r2, [r2, #16]
 8006d0c:	f107 0108 	add.w	r1, r7, #8
 8006d10:	4610      	mov	r0, r2
 8006d12:	4798      	blx	r3
 8006d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d16:	e077      	b.n	8006e08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa7b 	bl	8007216 <USBD_CtlError>
            err++;
 8006d20:	7afb      	ldrb	r3, [r7, #11]
 8006d22:	3301      	adds	r3, #1
 8006d24:	72fb      	strb	r3, [r7, #11]
          break;
 8006d26:	e06f      	b.n	8006e08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	7c12      	ldrb	r2, [r2, #16]
 8006d40:	f107 0108 	add.w	r1, r7, #8
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d4a:	e05d      	b.n	8006e08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa61 	bl	8007216 <USBD_CtlError>
            err++;
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	3301      	adds	r3, #1
 8006d58:	72fb      	strb	r3, [r7, #11]
          break;
 8006d5a:	e055      	b.n	8006e08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	7c12      	ldrb	r2, [r2, #16]
 8006d74:	f107 0108 	add.w	r1, r7, #8
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
 8006d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d7e:	e043      	b.n	8006e08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa47 	bl	8007216 <USBD_CtlError>
            err++;
 8006d88:	7afb      	ldrb	r3, [r7, #11]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d8e:	e03b      	b.n	8006e08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	7c12      	ldrb	r2, [r2, #16]
 8006da8:	f107 0108 	add.w	r1, r7, #8
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
 8006db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006db2:	e029      	b.n	8006e08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa2d 	bl	8007216 <USBD_CtlError>
            err++;
 8006dbc:	7afb      	ldrb	r3, [r7, #11]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006dc2:	e021      	b.n	8006e08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	7c12      	ldrb	r2, [r2, #16]
 8006ddc:	f107 0108 	add.w	r1, r7, #8
 8006de0:	4610      	mov	r0, r2
 8006de2:	4798      	blx	r3
 8006de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006de6:	e00f      	b.n	8006e08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa13 	bl	8007216 <USBD_CtlError>
            err++;
 8006df0:	7afb      	ldrb	r3, [r7, #11]
 8006df2:	3301      	adds	r3, #1
 8006df4:	72fb      	strb	r3, [r7, #11]
          break;
 8006df6:	e007      	b.n	8006e08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa0b 	bl	8007216 <USBD_CtlError>
          err++;
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	3301      	adds	r3, #1
 8006e04:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006e06:	e038      	b.n	8006e7a <USBD_GetDescriptor+0x2da>
 8006e08:	e037      	b.n	8006e7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	7c1b      	ldrb	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1a:	f107 0208 	add.w	r2, r7, #8
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4798      	blx	r3
 8006e22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e24:	e029      	b.n	8006e7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f9f4 	bl	8007216 <USBD_CtlError>
        err++;
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	3301      	adds	r3, #1
 8006e32:	72fb      	strb	r3, [r7, #11]
      break;
 8006e34:	e021      	b.n	8006e7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7c1b      	ldrb	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10d      	bne.n	8006e5a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	f107 0208 	add.w	r2, r7, #8
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	4798      	blx	r3
 8006e4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	2207      	movs	r2, #7
 8006e56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e58:	e00f      	b.n	8006e7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f9da 	bl	8007216 <USBD_CtlError>
        err++;
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	3301      	adds	r3, #1
 8006e66:	72fb      	strb	r3, [r7, #11]
      break;
 8006e68:	e007      	b.n	8006e7a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f9d2 	bl	8007216 <USBD_CtlError>
      err++;
 8006e72:	7afb      	ldrb	r3, [r7, #11]
 8006e74:	3301      	adds	r3, #1
 8006e76:	72fb      	strb	r3, [r7, #11]
      break;
 8006e78:	bf00      	nop
  }

  if (err != 0U)
 8006e7a:	7afb      	ldrb	r3, [r7, #11]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d11c      	bne.n	8006eba <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006e80:	893b      	ldrh	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d011      	beq.n	8006eaa <USBD_GetDescriptor+0x30a>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	88db      	ldrh	r3, [r3, #6]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	88da      	ldrh	r2, [r3, #6]
 8006e92:	893b      	ldrh	r3, [r7, #8]
 8006e94:	4293      	cmp	r3, r2
 8006e96:	bf28      	it	cs
 8006e98:	4613      	movcs	r3, r2
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e9e:	893b      	ldrh	r3, [r7, #8]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68f9      	ldr	r1, [r7, #12]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fa21 	bl	80072ec <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	88db      	ldrh	r3, [r3, #6]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d104      	bne.n	8006ebc <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa78 	bl	80073a8 <USBD_CtlSendStatus>
 8006eb8:	e000      	b.n	8006ebc <USBD_GetDescriptor+0x31c>
    return;
 8006eba:	bf00      	nop
    }
  }
}
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop

08006ec4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	889b      	ldrh	r3, [r3, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d130      	bne.n	8006f38 <USBD_SetAddress+0x74>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	88db      	ldrh	r3, [r3, #6]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d12c      	bne.n	8006f38 <USBD_SetAddress+0x74>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	885b      	ldrh	r3, [r3, #2]
 8006ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee4:	d828      	bhi.n	8006f38 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	885b      	ldrh	r3, [r3, #2]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	d104      	bne.n	8006f06 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f989 	bl	8007216 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f04:	e01c      	b.n	8006f40 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7bfa      	ldrb	r2, [r7, #15]
 8006f0a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 f8fa 	bl	800810c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa45 	bl	80073a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2c:	e008      	b.n	8006f40 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f36:	e003      	b.n	8006f40 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f96b 	bl	8007216 <USBD_CtlError>
  }
}
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	885b      	ldrh	r3, [r3, #2]
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	4b41      	ldr	r3, [pc, #260]	; (8007060 <USBD_SetConfig+0x118>)
 8006f5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f5c:	4b40      	ldr	r3, [pc, #256]	; (8007060 <USBD_SetConfig+0x118>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d904      	bls.n	8006f6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f955 	bl	8007216 <USBD_CtlError>
 8006f6c:	e075      	b.n	800705a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d002      	beq.n	8006f7e <USBD_SetConfig+0x36>
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d023      	beq.n	8006fc4 <USBD_SetConfig+0x7c>
 8006f7c:	e062      	b.n	8007044 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006f7e:	4b38      	ldr	r3, [pc, #224]	; (8007060 <USBD_SetConfig+0x118>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01a      	beq.n	8006fbc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006f86:	4b36      	ldr	r3, [pc, #216]	; (8007060 <USBD_SetConfig+0x118>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2203      	movs	r2, #3
 8006f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f98:	4b31      	ldr	r3, [pc, #196]	; (8007060 <USBD_SetConfig+0x118>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff f9c7 	bl	8006332 <USBD_SetClassConfig>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d104      	bne.n	8006fb4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f932 	bl	8007216 <USBD_CtlError>
            return;
 8006fb2:	e052      	b.n	800705a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f9f7 	bl	80073a8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006fba:	e04e      	b.n	800705a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f9f3 	bl	80073a8 <USBD_CtlSendStatus>
        break;
 8006fc2:	e04a      	b.n	800705a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006fc4:	4b26      	ldr	r3, [pc, #152]	; (8007060 <USBD_SetConfig+0x118>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d112      	bne.n	8006ff2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006fd4:	4b22      	ldr	r3, [pc, #136]	; (8007060 <USBD_SetConfig+0x118>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006fde:	4b20      	ldr	r3, [pc, #128]	; (8007060 <USBD_SetConfig+0x118>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff f9c3 	bl	8006370 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f9dc 	bl	80073a8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ff0:	e033      	b.n	800705a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006ff2:	4b1b      	ldr	r3, [pc, #108]	; (8007060 <USBD_SetConfig+0x118>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d01d      	beq.n	800703c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff f9b1 	bl	8006370 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800700e:	4b14      	ldr	r3, [pc, #80]	; (8007060 <USBD_SetConfig+0x118>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007018:	4b11      	ldr	r3, [pc, #68]	; (8007060 <USBD_SetConfig+0x118>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff f987 	bl	8006332 <USBD_SetClassConfig>
 8007024:	4603      	mov	r3, r0
 8007026:	2b02      	cmp	r3, #2
 8007028:	d104      	bne.n	8007034 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f8f2 	bl	8007216 <USBD_CtlError>
            return;
 8007032:	e012      	b.n	800705a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f9b7 	bl	80073a8 <USBD_CtlSendStatus>
        break;
 800703a:	e00e      	b.n	800705a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f9b3 	bl	80073a8 <USBD_CtlSendStatus>
        break;
 8007042:	e00a      	b.n	800705a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f8e5 	bl	8007216 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800704c:	4b04      	ldr	r3, [pc, #16]	; (8007060 <USBD_SetConfig+0x118>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7ff f98c 	bl	8006370 <USBD_ClrClassConfig>
        break;
 8007058:	bf00      	nop
    }
  }
}
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	20000164 	.word	0x20000164

08007064 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	88db      	ldrh	r3, [r3, #6]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d004      	beq.n	8007080 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f8cc 	bl	8007216 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800707e:	e021      	b.n	80070c4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007086:	2b01      	cmp	r3, #1
 8007088:	db17      	blt.n	80070ba <USBD_GetConfig+0x56>
 800708a:	2b02      	cmp	r3, #2
 800708c:	dd02      	ble.n	8007094 <USBD_GetConfig+0x30>
 800708e:	2b03      	cmp	r3, #3
 8007090:	d00b      	beq.n	80070aa <USBD_GetConfig+0x46>
 8007092:	e012      	b.n	80070ba <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3308      	adds	r3, #8
 800709e:	2201      	movs	r2, #1
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f922 	bl	80072ec <USBD_CtlSendData>
        break;
 80070a8:	e00c      	b.n	80070c4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3304      	adds	r3, #4
 80070ae:	2201      	movs	r2, #1
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f91a 	bl	80072ec <USBD_CtlSendData>
        break;
 80070b8:	e004      	b.n	80070c4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f8aa 	bl	8007216 <USBD_CtlError>
        break;
 80070c2:	bf00      	nop
}
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070dc:	3b01      	subs	r3, #1
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d81e      	bhi.n	8007120 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	88db      	ldrh	r3, [r3, #6]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d004      	beq.n	80070f4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f892 	bl	8007216 <USBD_CtlError>
        break;
 80070f2:	e01a      	b.n	800712a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f043 0202 	orr.w	r2, r3, #2
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	330c      	adds	r3, #12
 8007114:	2202      	movs	r2, #2
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f8e7 	bl	80072ec <USBD_CtlSendData>
      break;
 800711e:	e004      	b.n	800712a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f877 	bl	8007216 <USBD_CtlError>
      break;
 8007128:	bf00      	nop
  }
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	885b      	ldrh	r3, [r3, #2]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d106      	bne.n	8007152 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f92b 	bl	80073a8 <USBD_CtlSendStatus>
  }
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716a:	3b01      	subs	r3, #1
 800716c:	2b02      	cmp	r3, #2
 800716e:	d80b      	bhi.n	8007188 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	885b      	ldrh	r3, [r3, #2]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d10c      	bne.n	8007192 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f911 	bl	80073a8 <USBD_CtlSendStatus>
      }
      break;
 8007186:	e004      	b.n	8007192 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f843 	bl	8007216 <USBD_CtlError>
      break;
 8007190:	e000      	b.n	8007194 <USBD_ClrFeature+0x3a>
      break;
 8007192:	bf00      	nop
  }
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781a      	ldrb	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	785a      	ldrb	r2, [r3, #1]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	3302      	adds	r3, #2
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	b29a      	uxth	r2, r3
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	3303      	adds	r3, #3
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	4413      	add	r3, r2
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	3304      	adds	r3, #4
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	b29a      	uxth	r2, r3
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	3305      	adds	r3, #5
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	021b      	lsls	r3, r3, #8
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	4413      	add	r3, r2
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	3306      	adds	r3, #6
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	3307      	adds	r3, #7
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	b29b      	uxth	r3, r3
 8007202:	4413      	add	r3, r2
 8007204:	b29a      	uxth	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	80da      	strh	r2, [r3, #6]

}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007220:	2180      	movs	r1, #128	; 0x80
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 ff0e 	bl	8008044 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007228:	2100      	movs	r1, #0
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 ff0a 	bl	8008044 <USBD_LL_StallEP>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d032      	beq.n	80072b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f834 	bl	80072bc <USBD_GetLen>
 8007254:	4603      	mov	r3, r0
 8007256:	3301      	adds	r3, #1
 8007258:	b29b      	uxth	r3, r3
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	75fa      	strb	r2, [r7, #23]
 8007268:	461a      	mov	r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	4413      	add	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	7812      	ldrb	r2, [r2, #0]
 8007272:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	75fa      	strb	r2, [r7, #23]
 800727a:	461a      	mov	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4413      	add	r3, r2
 8007280:	2203      	movs	r2, #3
 8007282:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007284:	e012      	b.n	80072ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	60fa      	str	r2, [r7, #12]
 800728c:	7dfa      	ldrb	r2, [r7, #23]
 800728e:	1c51      	adds	r1, r2, #1
 8007290:	75f9      	strb	r1, [r7, #23]
 8007292:	4611      	mov	r1, r2
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	440a      	add	r2, r1
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800729c:	7dfb      	ldrb	r3, [r7, #23]
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	75fa      	strb	r2, [r7, #23]
 80072a2:	461a      	mov	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4413      	add	r3, r2
 80072a8:	2200      	movs	r2, #0
 80072aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e8      	bne.n	8007286 <USBD_GetString+0x4e>
    }
  }
}
 80072b4:	bf00      	nop
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80072c8:	e005      	b.n	80072d6 <USBD_GetLen+0x1a>
  {
    len++;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	3301      	adds	r3, #1
 80072ce:	73fb      	strb	r3, [r7, #15]
    buf++;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3301      	adds	r3, #1
 80072d4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f5      	bne.n	80072ca <USBD_GetLen+0xe>
  }

  return len;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	4613      	mov	r3, r2
 80072f8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2202      	movs	r2, #2
 80072fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007308:	88fa      	ldrh	r2, [r7, #6]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800730e:	88fb      	ldrh	r3, [r7, #6]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	2100      	movs	r1, #0
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 ff18 	bl	800814a <USBD_LL_Transmit>

  return USBD_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007332:	88fb      	ldrh	r3, [r7, #6]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	2100      	movs	r1, #0
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 ff06 	bl	800814a <USBD_LL_Transmit>

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	4613      	mov	r3, r2
 8007354:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2203      	movs	r2, #3
 800735a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007366:	88fa      	ldrh	r2, [r7, #6]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	2100      	movs	r1, #0
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 ff0b 	bl	8008190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	2100      	movs	r1, #0
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 fef9 	bl	8008190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2204      	movs	r2, #4
 80073b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073b8:	2300      	movs	r3, #0
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fec3 	bl	800814a <USBD_LL_Transmit>

  return USBD_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2205      	movs	r2, #5
 80073da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073de:	2300      	movs	r3, #0
 80073e0:	2200      	movs	r2, #0
 80073e2:	2100      	movs	r1, #0
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fed3 	bl	8008190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80073f8:	f7f8 ff0e 	bl	8000218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80073fc:	f000 f80f 	bl	800741e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007400:	f000 fa42 	bl	8007888 <MX_GPIO_Init>
  MX_DMA_Init();
 8007404:	f000 fa16 	bl	8007834 <MX_DMA_Init>
  MX_ADC1_Init();
 8007408:	f000 f874 	bl	80074f4 <MX_ADC1_Init>
  MX_DAC1_Init();
 800740c:	f000 f90e 	bl	800762c <MX_DAC1_Init>
  MX_TIM1_Init();
 8007410:	f000 f952 	bl	80076b8 <MX_TIM1_Init>
  MX_CORDIC_Init();
 8007414:	f000 f8f6 	bl	8007604 <MX_CORDIC_Init>
  MX_USB_Device_Init();
 8007418:	f000 fc42 	bl	8007ca0 <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800741c:	e7fe      	b.n	800741c <main+0x28>

0800741e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b0a4      	sub	sp, #144	; 0x90
 8007422:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007424:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007428:	2238      	movs	r2, #56	; 0x38
 800742a:	2100      	movs	r1, #0
 800742c:	4618      	mov	r0, r3
 800742e:	f001 f8cf 	bl	80085d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007432:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007436:	2200      	movs	r2, #0
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	605a      	str	r2, [r3, #4]
 800743c:	609a      	str	r2, [r3, #8]
 800743e:	60da      	str	r2, [r3, #12]
 8007440:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007442:	463b      	mov	r3, r7
 8007444:	2244      	movs	r2, #68	; 0x44
 8007446:	2100      	movs	r1, #0
 8007448:	4618      	mov	r0, r3
 800744a:	f001 f8c1 	bl	80085d0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800744e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007452:	f7fb fc35 	bl	8002cc0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007456:	2302      	movs	r3, #2
 8007458:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800745a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800745e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007460:	2340      	movs	r3, #64	; 0x40
 8007462:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007464:	2302      	movs	r3, #2
 8007466:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007468:	2302      	movs	r3, #2
 800746a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800746c:	2302      	movs	r3, #2
 800746e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8007470:	230c      	movs	r3, #12
 8007472:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007476:	2302      	movs	r3, #2
 8007478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800747c:	2302      	movs	r3, #2
 800747e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007482:	2302      	movs	r3, #2
 8007484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007488:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800748c:	4618      	mov	r0, r3
 800748e:	f7fb fcbb 	bl	8002e08 <HAL_RCC_OscConfig>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8007498:	f000 fa2e 	bl	80078f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800749c:	230f      	movs	r3, #15
 800749e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80074a0:	2303      	movs	r3, #3
 80074a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80074a4:	2300      	movs	r3, #0
 80074a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80074a8:	2300      	movs	r3, #0
 80074aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80074ac:	2300      	movs	r3, #0
 80074ae:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80074b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80074b4:	2102      	movs	r1, #2
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fb ffbe 	bl	8003438 <HAL_RCC_ClockConfig>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80074c2:	f000 fa19 	bl	80078f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12;
 80074c6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80074ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80074cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074d0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80074d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80074d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80074d8:	463b      	mov	r3, r7
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fc f99c 	bl	8003818 <HAL_RCCEx_PeriphCLKConfig>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80074e6:	f000 fa07 	bl	80078f8 <Error_Handler>
  }
}
 80074ea:	bf00      	nop
 80074ec:	3790      	adds	r7, #144	; 0x90
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08c      	sub	sp, #48	; 0x30
 80074f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80074fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	605a      	str	r2, [r3, #4]
 8007504:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	2220      	movs	r2, #32
 800750a:	2100      	movs	r1, #0
 800750c:	4618      	mov	r0, r3
 800750e:	f001 f85f 	bl	80085d0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007512:	4b39      	ldr	r3, [pc, #228]	; (80075f8 <MX_ADC1_Init+0x104>)
 8007514:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007518:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800751a:	4b37      	ldr	r3, [pc, #220]	; (80075f8 <MX_ADC1_Init+0x104>)
 800751c:	2200      	movs	r2, #0
 800751e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007520:	4b35      	ldr	r3, [pc, #212]	; (80075f8 <MX_ADC1_Init+0x104>)
 8007522:	2200      	movs	r2, #0
 8007524:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007526:	4b34      	ldr	r3, [pc, #208]	; (80075f8 <MX_ADC1_Init+0x104>)
 8007528:	2200      	movs	r2, #0
 800752a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800752c:	4b32      	ldr	r3, [pc, #200]	; (80075f8 <MX_ADC1_Init+0x104>)
 800752e:	2200      	movs	r2, #0
 8007530:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007532:	4b31      	ldr	r3, [pc, #196]	; (80075f8 <MX_ADC1_Init+0x104>)
 8007534:	2201      	movs	r2, #1
 8007536:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007538:	4b2f      	ldr	r3, [pc, #188]	; (80075f8 <MX_ADC1_Init+0x104>)
 800753a:	2208      	movs	r2, #8
 800753c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800753e:	4b2e      	ldr	r3, [pc, #184]	; (80075f8 <MX_ADC1_Init+0x104>)
 8007540:	2200      	movs	r2, #0
 8007542:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007544:	4b2c      	ldr	r3, [pc, #176]	; (80075f8 <MX_ADC1_Init+0x104>)
 8007546:	2201      	movs	r2, #1
 8007548:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800754a:	4b2b      	ldr	r3, [pc, #172]	; (80075f8 <MX_ADC1_Init+0x104>)
 800754c:	2202      	movs	r2, #2
 800754e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007550:	4b29      	ldr	r3, [pc, #164]	; (80075f8 <MX_ADC1_Init+0x104>)
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8007558:	4b27      	ldr	r3, [pc, #156]	; (80075f8 <MX_ADC1_Init+0x104>)
 800755a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800755e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8007560:	4b25      	ldr	r3, [pc, #148]	; (80075f8 <MX_ADC1_Init+0x104>)
 8007562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007568:	4b23      	ldr	r3, [pc, #140]	; (80075f8 <MX_ADC1_Init+0x104>)
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007570:	4b21      	ldr	r3, [pc, #132]	; (80075f8 <MX_ADC1_Init+0x104>)
 8007572:	2200      	movs	r2, #0
 8007574:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007576:	4b20      	ldr	r3, [pc, #128]	; (80075f8 <MX_ADC1_Init+0x104>)
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800757e:	481e      	ldr	r0, [pc, #120]	; (80075f8 <MX_ADC1_Init+0x104>)
 8007580:	f7f9 f89e 	bl	80006c0 <HAL_ADC_Init>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800758a:	f000 f9b5 	bl	80078f8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800758e:	2300      	movs	r3, #0
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007596:	4619      	mov	r1, r3
 8007598:	4817      	ldr	r0, [pc, #92]	; (80075f8 <MX_ADC1_Init+0x104>)
 800759a:	f7f9 fda3 	bl	80010e4 <HAL_ADCEx_MultiModeConfigChannel>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80075a4:	f000 f9a8 	bl	80078f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80075a8:	4b14      	ldr	r3, [pc, #80]	; (80075fc <MX_ADC1_Init+0x108>)
 80075aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80075ac:	2306      	movs	r3, #6
 80075ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80075b0:	2306      	movs	r3, #6
 80075b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80075b4:	237f      	movs	r3, #127	; 0x7f
 80075b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80075b8:	2304      	movs	r3, #4
 80075ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80075c0:	1d3b      	adds	r3, r7, #4
 80075c2:	4619      	mov	r1, r3
 80075c4:	480c      	ldr	r0, [pc, #48]	; (80075f8 <MX_ADC1_Init+0x104>)
 80075c6:	f7f9 fa03 	bl	80009d0 <HAL_ADC_ConfigChannel>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80075d0:	f000 f992 	bl	80078f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80075d4:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <MX_ADC1_Init+0x10c>)
 80075d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80075d8:	230c      	movs	r3, #12
 80075da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80075dc:	1d3b      	adds	r3, r7, #4
 80075de:	4619      	mov	r1, r3
 80075e0:	4805      	ldr	r0, [pc, #20]	; (80075f8 <MX_ADC1_Init+0x104>)
 80075e2:	f7f9 f9f5 	bl	80009d0 <HAL_ADC_ConfigChannel>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80075ec:	f000 f984 	bl	80078f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80075f0:	bf00      	nop
 80075f2:	3730      	adds	r7, #48	; 0x30
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	2000019c 	.word	0x2000019c
 80075fc:	04300002 	.word	0x04300002
 8007600:	08600004 	.word	0x08600004

08007604 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8007608:	4b06      	ldr	r3, [pc, #24]	; (8007624 <MX_CORDIC_Init+0x20>)
 800760a:	4a07      	ldr	r2, [pc, #28]	; (8007628 <MX_CORDIC_Init+0x24>)
 800760c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800760e:	4805      	ldr	r0, [pc, #20]	; (8007624 <MX_CORDIC_Init+0x20>)
 8007610:	f7f9 fe08 	bl	8001224 <HAL_CORDIC_Init>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800761a:	f000 f96d 	bl	80078f8 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800761e:	bf00      	nop
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000268 	.word	0x20000268
 8007628:	40020c00 	.word	0x40020c00

0800762c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b08c      	sub	sp, #48	; 0x30
 8007630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8007632:	463b      	mov	r3, r7
 8007634:	2230      	movs	r2, #48	; 0x30
 8007636:	2100      	movs	r1, #0
 8007638:	4618      	mov	r0, r3
 800763a:	f000 ffc9 	bl	80085d0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800763e:	4b1c      	ldr	r3, [pc, #112]	; (80076b0 <MX_DAC1_Init+0x84>)
 8007640:	4a1c      	ldr	r2, [pc, #112]	; (80076b4 <MX_DAC1_Init+0x88>)
 8007642:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007644:	481a      	ldr	r0, [pc, #104]	; (80076b0 <MX_DAC1_Init+0x84>)
 8007646:	f7f9 ff2e 	bl	80014a6 <HAL_DAC_Init>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007650:	f000 f952 	bl	80078f8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007654:	2300      	movs	r3, #0
 8007656:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007658:	2300      	movs	r3, #0
 800765a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800765c:	2300      	movs	r3, #0
 800765e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007660:	2300      	movs	r3, #0
 8007662:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800766c:	2300      	movs	r3, #0
 800766e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007670:	2301      	movs	r3, #1
 8007672:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007674:	2300      	movs	r3, #0
 8007676:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007678:	463b      	mov	r3, r7
 800767a:	2200      	movs	r2, #0
 800767c:	4619      	mov	r1, r3
 800767e:	480c      	ldr	r0, [pc, #48]	; (80076b0 <MX_DAC1_Init+0x84>)
 8007680:	f7f9 ff34 	bl	80014ec <HAL_DAC_ConfigChannel>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800768a:	f000 f935 	bl	80078f8 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800768e:	2301      	movs	r3, #1
 8007690:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007692:	463b      	mov	r3, r7
 8007694:	2210      	movs	r2, #16
 8007696:	4619      	mov	r1, r3
 8007698:	4805      	ldr	r0, [pc, #20]	; (80076b0 <MX_DAC1_Init+0x84>)
 800769a:	f7f9 ff27 	bl	80014ec <HAL_DAC_ConfigChannel>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 80076a4:	f000 f928 	bl	80078f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80076a8:	bf00      	nop
 80076aa:	3730      	adds	r7, #48	; 0x30
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20000188 	.word	0x20000188
 80076b4:	50000800 	.word	0x50000800

080076b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b09c      	sub	sp, #112	; 0x70
 80076bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80076be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	605a      	str	r2, [r3, #4]
 80076c8:	609a      	str	r2, [r3, #8]
 80076ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	605a      	str	r2, [r3, #4]
 80076d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80076d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80076dc:	2200      	movs	r2, #0
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	605a      	str	r2, [r3, #4]
 80076e2:	609a      	str	r2, [r3, #8]
 80076e4:	60da      	str	r2, [r3, #12]
 80076e6:	611a      	str	r2, [r3, #16]
 80076e8:	615a      	str	r2, [r3, #20]
 80076ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80076ec:	1d3b      	adds	r3, r7, #4
 80076ee:	2234      	movs	r2, #52	; 0x34
 80076f0:	2100      	movs	r1, #0
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 ff6c 	bl	80085d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80076f8:	4b4c      	ldr	r3, [pc, #304]	; (800782c <MX_TIM1_Init+0x174>)
 80076fa:	4a4d      	ldr	r2, [pc, #308]	; (8007830 <MX_TIM1_Init+0x178>)
 80076fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80076fe:	4b4b      	ldr	r3, [pc, #300]	; (800782c <MX_TIM1_Init+0x174>)
 8007700:	2200      	movs	r2, #0
 8007702:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007704:	4b49      	ldr	r3, [pc, #292]	; (800782c <MX_TIM1_Init+0x174>)
 8007706:	2200      	movs	r2, #0
 8007708:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800770a:	4b48      	ldr	r3, [pc, #288]	; (800782c <MX_TIM1_Init+0x174>)
 800770c:	2200      	movs	r2, #0
 800770e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007710:	4b46      	ldr	r3, [pc, #280]	; (800782c <MX_TIM1_Init+0x174>)
 8007712:	2200      	movs	r2, #0
 8007714:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007716:	4b45      	ldr	r3, [pc, #276]	; (800782c <MX_TIM1_Init+0x174>)
 8007718:	2200      	movs	r2, #0
 800771a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800771c:	4b43      	ldr	r3, [pc, #268]	; (800782c <MX_TIM1_Init+0x174>)
 800771e:	2200      	movs	r2, #0
 8007720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007722:	4842      	ldr	r0, [pc, #264]	; (800782c <MX_TIM1_Init+0x174>)
 8007724:	f7fc fa68 	bl	8003bf8 <HAL_TIM_Base_Init>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800772e:	f000 f8e3 	bl	80078f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007736:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007738:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800773c:	4619      	mov	r1, r3
 800773e:	483b      	ldr	r0, [pc, #236]	; (800782c <MX_TIM1_Init+0x174>)
 8007740:	f7fc fc22 	bl	8003f88 <HAL_TIM_ConfigClockSource>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800774a:	f000 f8d5 	bl	80078f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800774e:	4837      	ldr	r0, [pc, #220]	; (800782c <MX_TIM1_Init+0x174>)
 8007750:	f7fc faa9 	bl	8003ca6 <HAL_TIM_PWM_Init>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800775a:	f000 f8cd 	bl	80078f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800775e:	2300      	movs	r3, #0
 8007760:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007762:	2300      	movs	r3, #0
 8007764:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007766:	2300      	movs	r3, #0
 8007768:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800776a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800776e:	4619      	mov	r1, r3
 8007770:	482e      	ldr	r0, [pc, #184]	; (800782c <MX_TIM1_Init+0x174>)
 8007772:	f7fd f909 	bl	8004988 <HAL_TIMEx_MasterConfigSynchronization>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800777c:	f000 f8bc 	bl	80078f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007780:	2360      	movs	r3, #96	; 0x60
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007788:	2300      	movs	r3, #0
 800778a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800778c:	2300      	movs	r3, #0
 800778e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007790:	2300      	movs	r3, #0
 8007792:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007794:	2300      	movs	r3, #0
 8007796:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007798:	2300      	movs	r3, #0
 800779a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800779c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80077a0:	2200      	movs	r2, #0
 80077a2:	4619      	mov	r1, r3
 80077a4:	4821      	ldr	r0, [pc, #132]	; (800782c <MX_TIM1_Init+0x174>)
 80077a6:	f7fc fadf 	bl	8003d68 <HAL_TIM_PWM_ConfigChannel>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80077b0:	f000 f8a2 	bl	80078f8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80077b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80077bc:	2204      	movs	r2, #4
 80077be:	4619      	mov	r1, r3
 80077c0:	481a      	ldr	r0, [pc, #104]	; (800782c <MX_TIM1_Init+0x174>)
 80077c2:	f7fc fad1 	bl	8003d68 <HAL_TIM_PWM_ConfigChannel>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80077cc:	f000 f894 	bl	80078f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80077e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80077ee:	2300      	movs	r3, #0
 80077f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80077f2:	2300      	movs	r3, #0
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80077f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007800:	2300      	movs	r3, #0
 8007802:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007804:	2300      	movs	r3, #0
 8007806:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007808:	1d3b      	adds	r3, r7, #4
 800780a:	4619      	mov	r1, r3
 800780c:	4807      	ldr	r0, [pc, #28]	; (800782c <MX_TIM1_Init+0x174>)
 800780e:	f7fd f93d 	bl	8004a8c <HAL_TIMEx_ConfigBreakDeadTime>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8007818:	f000 f86e 	bl	80078f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800781c:	4803      	ldr	r0, [pc, #12]	; (800782c <MX_TIM1_Init+0x174>)
 800781e:	f000 f991 	bl	8007b44 <HAL_TIM_MspPostInit>

}
 8007822:	bf00      	nop
 8007824:	3770      	adds	r7, #112	; 0x70
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20000290 	.word	0x20000290
 8007830:	40012c00 	.word	0x40012c00

08007834 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800783a:	4b12      	ldr	r3, [pc, #72]	; (8007884 <MX_DMA_Init+0x50>)
 800783c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783e:	4a11      	ldr	r2, [pc, #68]	; (8007884 <MX_DMA_Init+0x50>)
 8007840:	f043 0304 	orr.w	r3, r3, #4
 8007844:	6493      	str	r3, [r2, #72]	; 0x48
 8007846:	4b0f      	ldr	r3, [pc, #60]	; (8007884 <MX_DMA_Init+0x50>)
 8007848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	607b      	str	r3, [r7, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007852:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <MX_DMA_Init+0x50>)
 8007854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007856:	4a0b      	ldr	r2, [pc, #44]	; (8007884 <MX_DMA_Init+0x50>)
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	6493      	str	r3, [r2, #72]	; 0x48
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <MX_DMA_Init+0x50>)
 8007860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800786a:	2200      	movs	r2, #0
 800786c:	2100      	movs	r1, #0
 800786e:	200b      	movs	r0, #11
 8007870:	f7f9 fde5 	bl	800143e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007874:	200b      	movs	r0, #11
 8007876:	f7f9 fdfc 	bl	8001472 <HAL_NVIC_EnableIRQ>

}
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	40021000 	.word	0x40021000

08007888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800788e:	f107 030c 	add.w	r3, r7, #12
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	605a      	str	r2, [r3, #4]
 8007898:	609a      	str	r2, [r3, #8]
 800789a:	60da      	str	r2, [r3, #12]
 800789c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800789e:	4b14      	ldr	r3, [pc, #80]	; (80078f0 <MX_GPIO_Init+0x68>)
 80078a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a2:	4a13      	ldr	r2, [pc, #76]	; (80078f0 <MX_GPIO_Init+0x68>)
 80078a4:	f043 0301 	orr.w	r3, r3, #1
 80078a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078aa:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <MX_GPIO_Init+0x68>)
 80078ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	60bb      	str	r3, [r7, #8]
 80078b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80078b6:	4b0e      	ldr	r3, [pc, #56]	; (80078f0 <MX_GPIO_Init+0x68>)
 80078b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ba:	4a0d      	ldr	r2, [pc, #52]	; (80078f0 <MX_GPIO_Init+0x68>)
 80078bc:	f043 0302 	orr.w	r3, r3, #2
 80078c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078c2:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <MX_GPIO_Init+0x68>)
 80078c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	607b      	str	r3, [r7, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BT1_Pin BT2_Pin BT3_Pin BT4_Pin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin|BT4_Pin;
 80078ce:	2378      	movs	r3, #120	; 0x78
 80078d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078d2:	2300      	movs	r3, #0
 80078d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078da:	f107 030c 	add.w	r3, r7, #12
 80078de:	4619      	mov	r1, r3
 80078e0:	4804      	ldr	r0, [pc, #16]	; (80078f4 <MX_GPIO_Init+0x6c>)
 80078e2:	f7fa f969 	bl	8001bb8 <HAL_GPIO_Init>

}
 80078e6:	bf00      	nop
 80078e8:	3720      	adds	r7, #32
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40021000 	.word	0x40021000
 80078f4:	48000400 	.word	0x48000400

080078f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80078fc:	bf00      	nop
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
	...

08007908 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	4a04      	ldr	r2, [pc, #16]	; (8007924 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007916:	6093      	str	r3, [r2, #8]
}
 8007918:	bf00      	nop
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40007000 	.word	0x40007000

08007928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800792e:	4b0f      	ldr	r3, [pc, #60]	; (800796c <HAL_MspInit+0x44>)
 8007930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007932:	4a0e      	ldr	r2, [pc, #56]	; (800796c <HAL_MspInit+0x44>)
 8007934:	f043 0301 	orr.w	r3, r3, #1
 8007938:	6613      	str	r3, [r2, #96]	; 0x60
 800793a:	4b0c      	ldr	r3, [pc, #48]	; (800796c <HAL_MspInit+0x44>)
 800793c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <HAL_MspInit+0x44>)
 8007948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794a:	4a08      	ldr	r2, [pc, #32]	; (800796c <HAL_MspInit+0x44>)
 800794c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007950:	6593      	str	r3, [r2, #88]	; 0x58
 8007952:	4b06      	ldr	r3, [pc, #24]	; (800796c <HAL_MspInit+0x44>)
 8007954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800795e:	f7ff ffd3 	bl	8007908 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	40021000 	.word	0x40021000

08007970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	; 0x28
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007978:	f107 0314 	add.w	r3, r7, #20
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	609a      	str	r2, [r3, #8]
 8007984:	60da      	str	r2, [r3, #12]
 8007986:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007990:	d14f      	bne.n	8007a32 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007992:	4b2a      	ldr	r3, [pc, #168]	; (8007a3c <HAL_ADC_MspInit+0xcc>)
 8007994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007996:	4a29      	ldr	r2, [pc, #164]	; (8007a3c <HAL_ADC_MspInit+0xcc>)
 8007998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800799c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800799e:	4b27      	ldr	r3, [pc, #156]	; (8007a3c <HAL_ADC_MspInit+0xcc>)
 80079a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079aa:	4b24      	ldr	r3, [pc, #144]	; (8007a3c <HAL_ADC_MspInit+0xcc>)
 80079ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ae:	4a23      	ldr	r2, [pc, #140]	; (8007a3c <HAL_ADC_MspInit+0xcc>)
 80079b0:	f043 0301 	orr.w	r3, r3, #1
 80079b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079b6:	4b21      	ldr	r3, [pc, #132]	; (8007a3c <HAL_ADC_MspInit+0xcc>)
 80079b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = Vkeyboard_L_Pin|Vkeyboard_H_Pin;
 80079c2:	2303      	movs	r3, #3
 80079c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80079c6:	2303      	movs	r3, #3
 80079c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079ce:	f107 0314 	add.w	r3, r7, #20
 80079d2:	4619      	mov	r1, r3
 80079d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079d8:	f7fa f8ee 	bl	8001bb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80079dc:	4b18      	ldr	r3, [pc, #96]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 80079de:	4a19      	ldr	r2, [pc, #100]	; (8007a44 <HAL_ADC_MspInit+0xd4>)
 80079e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80079e2:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 80079e4:	2205      	movs	r2, #5
 80079e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80079e8:	4b15      	ldr	r3, [pc, #84]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80079ee:	4b14      	ldr	r3, [pc, #80]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80079f4:	4b12      	ldr	r3, [pc, #72]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 80079f6:	2280      	movs	r2, #128	; 0x80
 80079f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80079fa:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 80079fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007a02:	4b0f      	ldr	r3, [pc, #60]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 8007a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007a0a:	4b0d      	ldr	r3, [pc, #52]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007a16:	480a      	ldr	r0, [pc, #40]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 8007a18:	f7f9 ff14 	bl	8001844 <HAL_DMA_Init>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8007a22:	f7ff ff69 	bl	80078f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a05      	ldr	r2, [pc, #20]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 8007a2a:	655a      	str	r2, [r3, #84]	; 0x54
 8007a2c:	4a04      	ldr	r2, [pc, #16]	; (8007a40 <HAL_ADC_MspInit+0xd0>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007a32:	bf00      	nop
 8007a34:	3728      	adds	r7, #40	; 0x28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	20000208 	.word	0x20000208
 8007a44:	40020008 	.word	0x40020008

08007a48 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a0a      	ldr	r2, [pc, #40]	; (8007a80 <HAL_CORDIC_MspInit+0x38>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d10b      	bne.n	8007a72 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8007a5a:	4b0a      	ldr	r3, [pc, #40]	; (8007a84 <HAL_CORDIC_MspInit+0x3c>)
 8007a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5e:	4a09      	ldr	r2, [pc, #36]	; (8007a84 <HAL_CORDIC_MspInit+0x3c>)
 8007a60:	f043 0308 	orr.w	r3, r3, #8
 8007a64:	6493      	str	r3, [r2, #72]	; 0x48
 8007a66:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <HAL_CORDIC_MspInit+0x3c>)
 8007a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6a:	f003 0308 	and.w	r3, r3, #8
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8007a72:	bf00      	nop
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	40020c00 	.word	0x40020c00
 8007a84:	40021000 	.word	0x40021000

08007a88 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	; 0x28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a90:	f107 0314 	add.w	r3, r7, #20
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	605a      	str	r2, [r3, #4]
 8007a9a:	609a      	str	r2, [r3, #8]
 8007a9c:	60da      	str	r2, [r3, #12]
 8007a9e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a15      	ldr	r2, [pc, #84]	; (8007afc <HAL_DAC_MspInit+0x74>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d124      	bne.n	8007af4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007aaa:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <HAL_DAC_MspInit+0x78>)
 8007aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aae:	4a14      	ldr	r2, [pc, #80]	; (8007b00 <HAL_DAC_MspInit+0x78>)
 8007ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ab6:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <HAL_DAC_MspInit+0x78>)
 8007ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007abe:	613b      	str	r3, [r7, #16]
 8007ac0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <HAL_DAC_MspInit+0x78>)
 8007ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac6:	4a0e      	ldr	r2, [pc, #56]	; (8007b00 <HAL_DAC_MspInit+0x78>)
 8007ac8:	f043 0301 	orr.w	r3, r3, #1
 8007acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ace:	4b0c      	ldr	r3, [pc, #48]	; (8007b00 <HAL_DAC_MspInit+0x78>)
 8007ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = Audio_out_R_Pin|Audio_out_L_Pin;
 8007ada:	2330      	movs	r3, #48	; 0x30
 8007adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ae6:	f107 0314 	add.w	r3, r7, #20
 8007aea:	4619      	mov	r1, r3
 8007aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007af0:	f7fa f862 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8007af4:	bf00      	nop
 8007af6:	3728      	adds	r7, #40	; 0x28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	50000800 	.word	0x50000800
 8007b00:	40021000 	.word	0x40021000

08007b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a0a      	ldr	r2, [pc, #40]	; (8007b3c <HAL_TIM_Base_MspInit+0x38>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d10b      	bne.n	8007b2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007b16:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <HAL_TIM_Base_MspInit+0x3c>)
 8007b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b1a:	4a09      	ldr	r2, [pc, #36]	; (8007b40 <HAL_TIM_Base_MspInit+0x3c>)
 8007b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b20:	6613      	str	r3, [r2, #96]	; 0x60
 8007b22:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <HAL_TIM_Base_MspInit+0x3c>)
 8007b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007b2e:	bf00      	nop
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40012c00 	.word	0x40012c00
 8007b40:	40021000 	.word	0x40021000

08007b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b4c:	f107 0314 	add.w	r3, r7, #20
 8007b50:	2200      	movs	r2, #0
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	605a      	str	r2, [r3, #4]
 8007b56:	609a      	str	r2, [r3, #8]
 8007b58:	60da      	str	r2, [r3, #12]
 8007b5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a20      	ldr	r2, [pc, #128]	; (8007be4 <HAL_TIM_MspPostInit+0xa0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d139      	bne.n	8007bda <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b66:	4b20      	ldr	r3, [pc, #128]	; (8007be8 <HAL_TIM_MspPostInit+0xa4>)
 8007b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b6a:	4a1f      	ldr	r2, [pc, #124]	; (8007be8 <HAL_TIM_MspPostInit+0xa4>)
 8007b6c:	f043 0301 	orr.w	r3, r3, #1
 8007b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b72:	4b1d      	ldr	r3, [pc, #116]	; (8007be8 <HAL_TIM_MspPostInit+0xa4>)
 8007b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b7e:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <HAL_TIM_MspPostInit+0xa4>)
 8007b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b82:	4a19      	ldr	r2, [pc, #100]	; (8007be8 <HAL_TIM_MspPostInit+0xa4>)
 8007b84:	f043 0302 	orr.w	r3, r3, #2
 8007b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b8a:	4b17      	ldr	r3, [pc, #92]	; (8007be8 <HAL_TIM_MspPostInit+0xa4>)
 8007b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = SPK_hi_B_G_Pin|SPK_lo_B_G_Pin|SPK_lo_A_G_Pin;
 8007b96:	f44f 7360 	mov.w	r3, #896	; 0x380
 8007b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8007ba8:	2306      	movs	r3, #6
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bac:	f107 0314 	add.w	r3, r7, #20
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bb6:	f7f9 ffff 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPK_hi_A_G_Pin;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8007bca:	2306      	movs	r3, #6
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPK_hi_A_G_GPIO_Port, &GPIO_InitStruct);
 8007bce:	f107 0314 	add.w	r3, r7, #20
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4805      	ldr	r0, [pc, #20]	; (8007bec <HAL_TIM_MspPostInit+0xa8>)
 8007bd6:	f7f9 ffef 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8007bda:	bf00      	nop
 8007bdc:	3728      	adds	r7, #40	; 0x28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	40021000 	.word	0x40021000
 8007bec:	48000400 	.word	0x48000400

08007bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007bf4:	bf00      	nop
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c02:	e7fe      	b.n	8007c02 <HardFault_Handler+0x4>

08007c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c08:	e7fe      	b.n	8007c08 <MemManage_Handler+0x4>

08007c0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c0e:	e7fe      	b.n	8007c0e <BusFault_Handler+0x4>

08007c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c14:	e7fe      	b.n	8007c14 <UsageFault_Handler+0x4>

08007c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c16:	b480      	push	{r7}
 8007c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c1a:	bf00      	nop
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c28:	bf00      	nop
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c32:	b480      	push	{r7}
 8007c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c36:	bf00      	nop
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c44:	f7f8 fb3a 	bl	80002bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c48:	bf00      	nop
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007c50:	4802      	ldr	r0, [pc, #8]	; (8007c5c <DMA1_Channel1_IRQHandler+0x10>)
 8007c52:	f7f9 fe9f 	bl	8001994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007c56:	bf00      	nop
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000208 	.word	0x20000208

08007c60 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007c64:	4802      	ldr	r0, [pc, #8]	; (8007c70 <USB_LP_IRQHandler+0x10>)
 8007c66:	f7fa fa06 	bl	8002076 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8007c6a:	bf00      	nop
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	200005a0 	.word	0x200005a0

08007c74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007c78:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <SystemInit+0x28>)
 8007c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c7e:	4a07      	ldr	r2, [pc, #28]	; (8007c9c <SystemInit+0x28>)
 8007c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007c88:	4b04      	ldr	r3, [pc, #16]	; (8007c9c <SystemInit+0x28>)
 8007c8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c8e:	609a      	str	r2, [r3, #8]
#endif
}
 8007c90:	bf00      	nop
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	e000ed00 	.word	0xe000ed00

08007ca0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CUSTOM_HID_Desc, DEVICE_FS) != USBD_OK) {
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	4912      	ldr	r1, [pc, #72]	; (8007cf0 <MX_USB_Device_Init+0x50>)
 8007ca8:	4812      	ldr	r0, [pc, #72]	; (8007cf4 <MX_USB_Device_Init+0x54>)
 8007caa:	f7fe fae6 	bl	800627a <USBD_Init>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007cb4:	f7ff fe20 	bl	80078f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK) {
 8007cb8:	490f      	ldr	r1, [pc, #60]	; (8007cf8 <MX_USB_Device_Init+0x58>)
 8007cba:	480e      	ldr	r0, [pc, #56]	; (8007cf4 <MX_USB_Device_Init+0x54>)
 8007cbc:	f7fe fb08 	bl	80062d0 <USBD_RegisterClass>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8007cc6:	f7ff fe17 	bl	80078f8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK) {
 8007cca:	490c      	ldr	r1, [pc, #48]	; (8007cfc <MX_USB_Device_Init+0x5c>)
 8007ccc:	4809      	ldr	r0, [pc, #36]	; (8007cf4 <MX_USB_Device_Init+0x54>)
 8007cce:	f7fe fabd 	bl	800624c <USBD_CUSTOM_HID_RegisterInterface>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8007cd8:	f7ff fe0e 	bl	80078f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8007cdc:	4805      	ldr	r0, [pc, #20]	; (8007cf4 <MX_USB_Device_Init+0x54>)
 8007cde:	f7fe fb11 	bl	8006304 <USBD_Start>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8007ce8:	f7ff fe06 	bl	80078f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007cec:	bf00      	nop
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	200000f4 	.word	0x200000f4
 8007cf4:	200002dc 	.word	0x200002dc
 8007cf8:	20000008 	.word	0x20000008
 8007cfc:	200000e4 	.word	0x200000e4

08007d00 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	; 0x28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d08:	f107 0314 	add.w	r3, r7, #20
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	605a      	str	r2, [r3, #4]
 8007d12:	609a      	str	r2, [r3, #8]
 8007d14:	60da      	str	r2, [r3, #12]
 8007d16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a1a      	ldr	r2, [pc, #104]	; (8007d88 <HAL_PCD_MspInit+0x88>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d12d      	bne.n	8007d7e <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d22:	4b1a      	ldr	r3, [pc, #104]	; (8007d8c <HAL_PCD_MspInit+0x8c>)
 8007d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d26:	4a19      	ldr	r2, [pc, #100]	; (8007d8c <HAL_PCD_MspInit+0x8c>)
 8007d28:	f043 0301 	orr.w	r3, r3, #1
 8007d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d2e:	4b17      	ldr	r3, [pc, #92]	; (8007d8c <HAL_PCD_MspInit+0x8c>)
 8007d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007d3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d40:	2303      	movs	r3, #3
 8007d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d48:	f107 0314 	add.w	r3, r7, #20
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d52:	f7f9 ff31 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d56:	4b0d      	ldr	r3, [pc, #52]	; (8007d8c <HAL_PCD_MspInit+0x8c>)
 8007d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5a:	4a0c      	ldr	r2, [pc, #48]	; (8007d8c <HAL_PCD_MspInit+0x8c>)
 8007d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d60:	6593      	str	r3, [r2, #88]	; 0x58
 8007d62:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <HAL_PCD_MspInit+0x8c>)
 8007d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2100      	movs	r1, #0
 8007d72:	2014      	movs	r0, #20
 8007d74:	f7f9 fb63 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007d78:	2014      	movs	r0, #20
 8007d7a:	f7f9 fb7a 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d7e:	bf00      	nop
 8007d80:	3728      	adds	r7, #40	; 0x28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	40005c00 	.word	0x40005c00
 8007d8c:	40021000 	.word	0x40021000

08007d90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007da4:	4619      	mov	r1, r3
 8007da6:	4610      	mov	r0, r2
 8007da8:	f7fe faf5 	bl	8006396 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8007dc6:	78fb      	ldrb	r3, [r7, #3]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	015b      	lsls	r3, r3, #5
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	f7fe fb28 	bl	800642c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8007ddc:	bf00      	nop
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	015b      	lsls	r3, r3, #5
 8007dfc:	4413      	add	r3, r2
 8007dfe:	333c      	adds	r3, #60	; 0x3c
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	4619      	mov	r1, r3
 8007e06:	f7fe fb82 	bl	800650e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fe fc95 	bl	8006750 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e36:	2301      	movs	r3, #1
 8007e38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d001      	beq.n	8007e46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e42:	f7ff fd59 	bl	80078f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e4c:	7bfa      	ldrb	r2, [r7, #15]
 8007e4e:	4611      	mov	r1, r2
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fe fc42 	bl	80066da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe fbfb 	bl	8006658 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe fc3d 	bl	80066fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d005      	beq.n	8007e94 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e88:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <HAL_PCD_SuspendCallback+0x30>)
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	4a03      	ldr	r2, [pc, #12]	; (8007e9c <HAL_PCD_SuspendCallback+0x30>)
 8007e8e:	f043 0306 	orr.w	r3, r3, #6
 8007e92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	e000ed00 	.word	0xe000ed00

08007ea0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d007      	beq.n	8007ec0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007eb0:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <HAL_PCD_ResumeCallback+0x34>)
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	4a07      	ldr	r2, [pc, #28]	; (8007ed4 <HAL_PCD_ResumeCallback+0x34>)
 8007eb6:	f023 0306 	bic.w	r3, r3, #6
 8007eba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007ebc:	f000 f9da 	bl	8008274 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe fc2c 	bl	8006724 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007ecc:	bf00      	nop
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	e000ed00 	.word	0xe000ed00

08007ed8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007ee0:	4a26      	ldr	r2, [pc, #152]	; (8007f7c <USBD_LL_Init+0xa4>)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a24      	ldr	r2, [pc, #144]	; (8007f7c <USBD_LL_Init+0xa4>)
 8007eec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007ef0:	4b22      	ldr	r3, [pc, #136]	; (8007f7c <USBD_LL_Init+0xa4>)
 8007ef2:	4a23      	ldr	r2, [pc, #140]	; (8007f80 <USBD_LL_Init+0xa8>)
 8007ef4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007ef6:	4b21      	ldr	r3, [pc, #132]	; (8007f7c <USBD_LL_Init+0xa4>)
 8007ef8:	2208      	movs	r2, #8
 8007efa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007efc:	4b1f      	ldr	r3, [pc, #124]	; (8007f7c <USBD_LL_Init+0xa4>)
 8007efe:	2202      	movs	r2, #2
 8007f00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f02:	4b1e      	ldr	r3, [pc, #120]	; (8007f7c <USBD_LL_Init+0xa4>)
 8007f04:	2202      	movs	r2, #2
 8007f06:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007f08:	4b1c      	ldr	r3, [pc, #112]	; (8007f7c <USBD_LL_Init+0xa4>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007f0e:	4b1b      	ldr	r3, [pc, #108]	; (8007f7c <USBD_LL_Init+0xa4>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007f14:	4b19      	ldr	r3, [pc, #100]	; (8007f7c <USBD_LL_Init+0xa4>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007f1a:	4b18      	ldr	r3, [pc, #96]	; (8007f7c <USBD_LL_Init+0xa4>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007f20:	4816      	ldr	r0, [pc, #88]	; (8007f7c <USBD_LL_Init+0xa4>)
 8007f22:	f7f9 ffcb 	bl	8001ebc <HAL_PCD_Init>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007f2c:	f7ff fce4 	bl	80078f8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f36:	2318      	movs	r3, #24
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	f7fa fe58 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f46:	2358      	movs	r3, #88	; 0x58
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2180      	movs	r1, #128	; 0x80
 8007f4c:	f7fa fe50 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f56:	2398      	movs	r3, #152	; 0x98
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2181      	movs	r1, #129	; 0x81
 8007f5c:	f7fa fe48 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f66:	23d8      	movs	r3, #216	; 0xd8
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	f7fa fe40 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200005a0 	.word	0x200005a0
 8007f80:	40005c00 	.word	0x40005c00

08007f84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fa f849 	bl	8002032 <HAL_PCD_Start>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 f96a 	bl	8008280 <USBD_Get_USB_Status>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	4608      	mov	r0, r1
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	4603      	mov	r3, r0
 8007fca:	70fb      	strb	r3, [r7, #3]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70bb      	strb	r3, [r7, #2]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fe2:	78bb      	ldrb	r3, [r7, #2]
 8007fe4:	883a      	ldrh	r2, [r7, #0]
 8007fe6:	78f9      	ldrb	r1, [r7, #3]
 8007fe8:	f7fa f9b8 	bl	800235c <HAL_PCD_EP_Open>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 f944 	bl	8008280 <USBD_Get_USB_Status>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	460b      	mov	r3, r1
 8008010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008020:	78fa      	ldrb	r2, [r7, #3]
 8008022:	4611      	mov	r1, r2
 8008024:	4618      	mov	r0, r3
 8008026:	f7fa f9f9 	bl	800241c <HAL_PCD_EP_Close>
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f925 	bl	8008280 <USBD_Get_USB_Status>
 8008036:	4603      	mov	r3, r0
 8008038:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800803a:	7bbb      	ldrb	r3, [r7, #14]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800805e:	78fa      	ldrb	r2, [r7, #3]
 8008060:	4611      	mov	r1, r2
 8008062:	4618      	mov	r0, r3
 8008064:	f7fa fa8f 	bl	8002586 <HAL_PCD_EP_SetStall>
 8008068:	4603      	mov	r3, r0
 800806a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800806c:	7bfb      	ldrb	r3, [r7, #15]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 f906 	bl	8008280 <USBD_Get_USB_Status>
 8008074:	4603      	mov	r3, r0
 8008076:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008078:	7bbb      	ldrb	r3, [r7, #14]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	460b      	mov	r3, r1
 800808c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800809c:	78fa      	ldrb	r2, [r7, #3]
 800809e:	4611      	mov	r1, r2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fa faca 	bl	800263a <HAL_PCD_EP_ClrStall>
 80080a6:	4603      	mov	r3, r0
 80080a8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 f8e7 	bl	8008280 <USBD_Get_USB_Status>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80080d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	da08      	bge.n	80080ee <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	015b      	lsls	r3, r3, #5
 80080e6:	4413      	add	r3, r2
 80080e8:	332a      	adds	r3, #42	; 0x2a
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	e008      	b.n	8008100 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	015b      	lsls	r3, r3, #5
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80080fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	4611      	mov	r1, r2
 800812a:	4618      	mov	r0, r3
 800812c:	f7fa f8f1 	bl	8002312 <HAL_PCD_SetAddress>
 8008130:	4603      	mov	r3, r0
 8008132:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 f8a2 	bl	8008280 <USBD_Get_USB_Status>
 800813c:	4603      	mov	r3, r0
 800813e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008140:	7bbb      	ldrb	r3, [r7, #14]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b086      	sub	sp, #24
 800814e:	af00      	add	r7, sp, #0
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	461a      	mov	r2, r3
 8008156:	460b      	mov	r3, r1
 8008158:	72fb      	strb	r3, [r7, #11]
 800815a:	4613      	mov	r3, r2
 800815c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800816c:	893b      	ldrh	r3, [r7, #8]
 800816e:	7af9      	ldrb	r1, [r7, #11]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	f7fa f9cf 	bl	8002514 <HAL_PCD_EP_Transmit>
 8008176:	4603      	mov	r3, r0
 8008178:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	4618      	mov	r0, r3
 800817e:	f000 f87f 	bl	8008280 <USBD_Get_USB_Status>
 8008182:	4603      	mov	r3, r0
 8008184:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008186:	7dbb      	ldrb	r3, [r7, #22]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	607a      	str	r2, [r7, #4]
 800819a:	461a      	mov	r2, r3
 800819c:	460b      	mov	r3, r1
 800819e:	72fb      	strb	r3, [r7, #11]
 80081a0:	4613      	mov	r3, r2
 80081a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081b2:	893b      	ldrh	r3, [r7, #8]
 80081b4:	7af9      	ldrb	r1, [r7, #11]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	f7fa f972 	bl	80024a0 <HAL_PCD_EP_Receive>
 80081bc:	4603      	mov	r3, r0
 80081be:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f85c 	bl	8008280 <USBD_Get_USB_Status>
 80081c8:	4603      	mov	r3, r0
 80081ca:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80081cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80081e4:	78fb      	ldrb	r3, [r7, #3]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <HAL_PCDEx_LPM_Callback+0x18>
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d013      	beq.n	8008216 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 80081ee:	e023      	b.n	8008238 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80081f8:	f000 f83c 	bl	8008274 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081fc:	4b10      	ldr	r3, [pc, #64]	; (8008240 <HAL_PCDEx_LPM_Callback+0x68>)
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	4a0f      	ldr	r2, [pc, #60]	; (8008240 <HAL_PCDEx_LPM_Callback+0x68>)
 8008202:	f023 0306 	bic.w	r3, r3, #6
 8008206:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800820e:	4618      	mov	r0, r3
 8008210:	f7fe fa88 	bl	8006724 <USBD_LL_Resume>
    break;
 8008214:	e010      	b.n	8008238 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe fa6c 	bl	80066fa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d005      	beq.n	8008236 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800822a:	4b05      	ldr	r3, [pc, #20]	; (8008240 <HAL_PCDEx_LPM_Callback+0x68>)
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	4a04      	ldr	r2, [pc, #16]	; (8008240 <HAL_PCDEx_LPM_Callback+0x68>)
 8008230:	f043 0306 	orr.w	r3, r3, #6
 8008234:	6113      	str	r3, [r2, #16]
    break;   
 8008236:	bf00      	nop
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	e000ed00 	.word	0xe000ed00

08008244 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800824c:	4b03      	ldr	r3, [pc, #12]	; (800825c <USBD_static_malloc+0x18>)
}
 800824e:	4618      	mov	r0, r3
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20000168 	.word	0x20000168

08008260 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]

}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008278:	f7ff f8d1 	bl	800741e <SystemClock_Config>
}
 800827c:	bf00      	nop
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	2b03      	cmp	r3, #3
 8008292:	d817      	bhi.n	80082c4 <USBD_Get_USB_Status+0x44>
 8008294:	a201      	add	r2, pc, #4	; (adr r2, 800829c <USBD_Get_USB_Status+0x1c>)
 8008296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829a:	bf00      	nop
 800829c:	080082ad 	.word	0x080082ad
 80082a0:	080082b3 	.word	0x080082b3
 80082a4:	080082b9 	.word	0x080082b9
 80082a8:	080082bf 	.word	0x080082bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]
    break;
 80082b0:	e00b      	b.n	80082ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082b2:	2302      	movs	r3, #2
 80082b4:	73fb      	strb	r3, [r7, #15]
    break;
 80082b6:	e008      	b.n	80082ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082b8:	2301      	movs	r3, #1
 80082ba:	73fb      	strb	r3, [r7, #15]
    break;
 80082bc:	e005      	b.n	80082ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082be:	2302      	movs	r3, #2
 80082c0:	73fb      	strb	r3, [r7, #15]
    break;
 80082c2:	e002      	b.n	80082ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082c4:	2302      	movs	r3, #2
 80082c6:	73fb      	strb	r3, [r7, #15]
    break;
 80082c8:	bf00      	nop
  }
  return usb_status;
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082de:	4618      	mov	r0, r3
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80082ec:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4603      	mov	r3, r0
 8008300:	460a      	mov	r2, r1
 8008302:	71fb      	strb	r3, [r7, #7]
 8008304:	4613      	mov	r3, r2
 8008306:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008308:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
	...

08008318 <USBD_CUSTOM_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	6039      	str	r1, [r7, #0]
 8008322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CUSTOM_HID_DeviceDesc);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2212      	movs	r2, #18
 8008328:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceDesc;
 800832a:	4b03      	ldr	r3, [pc, #12]	; (8008338 <USBD_CUSTOM_HID_DeviceDescriptor+0x20>)
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	20000114 	.word	0x20000114

0800833c <USBD_CUSTOM_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	6039      	str	r1, [r7, #0]
 8008346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	2204      	movs	r2, #4
 800834c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800834e:	4b03      	ldr	r3, [pc, #12]	; (800835c <USBD_CUSTOM_HID_LangIDStrDescriptor+0x20>)
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	20000128 	.word	0x20000128

08008360 <USBD_CUSTOM_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	6039      	str	r1, [r7, #0]
 800836a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d105      	bne.n	800837e <USBD_CUSTOM_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	4907      	ldr	r1, [pc, #28]	; (8008394 <USBD_CUSTOM_HID_ProductStrDescriptor+0x34>)
 8008376:	4808      	ldr	r0, [pc, #32]	; (8008398 <USBD_CUSTOM_HID_ProductStrDescriptor+0x38>)
 8008378:	f7fe ff5e 	bl	8007238 <USBD_GetString>
 800837c:	e004      	b.n	8008388 <USBD_CUSTOM_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	4904      	ldr	r1, [pc, #16]	; (8008394 <USBD_CUSTOM_HID_ProductStrDescriptor+0x34>)
 8008382:	4805      	ldr	r0, [pc, #20]	; (8008398 <USBD_CUSTOM_HID_ProductStrDescriptor+0x38>)
 8008384:	f7fe ff58 	bl	8007238 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008388:	4b02      	ldr	r3, [pc, #8]	; (8008394 <USBD_CUSTOM_HID_ProductStrDescriptor+0x34>)
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20000814 	.word	0x20000814
 8008398:	080085f8 	.word	0x080085f8

0800839c <USBD_CUSTOM_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	4904      	ldr	r1, [pc, #16]	; (80083bc <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x20>)
 80083ac:	4804      	ldr	r0, [pc, #16]	; (80083c0 <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x24>)
 80083ae:	f7fe ff43 	bl	8007238 <USBD_GetString>
  return USBD_StrDesc;
 80083b2:	4b02      	ldr	r3, [pc, #8]	; (80083bc <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x20>)
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20000814 	.word	0x20000814
 80083c0:	08008618 	.word	0x08008618

080083c4 <USBD_CUSTOM_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	221a      	movs	r2, #26
 80083d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083d6:	f000 f843 	bl	8008460 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CUSTOM_HID_SerialStrDescriptor */
  
  /* USER CODE END USBD_CUSTOM_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80083da:	4b02      	ldr	r3, [pc, #8]	; (80083e4 <USBD_CUSTOM_HID_SerialStrDescriptor+0x20>)
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	2000012c 	.word	0x2000012c

080083e8 <USBD_CUSTOM_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	6039      	str	r1, [r7, #0]
 80083f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083f4:	79fb      	ldrb	r3, [r7, #7]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d105      	bne.n	8008406 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	4907      	ldr	r1, [pc, #28]	; (800841c <USBD_CUSTOM_HID_ConfigStrDescriptor+0x34>)
 80083fe:	4808      	ldr	r0, [pc, #32]	; (8008420 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x38>)
 8008400:	f7fe ff1a 	bl	8007238 <USBD_GetString>
 8008404:	e004      	b.n	8008410 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	4904      	ldr	r1, [pc, #16]	; (800841c <USBD_CUSTOM_HID_ConfigStrDescriptor+0x34>)
 800840a:	4805      	ldr	r0, [pc, #20]	; (8008420 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x38>)
 800840c:	f7fe ff14 	bl	8007238 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008410:	4b02      	ldr	r3, [pc, #8]	; (800841c <USBD_CUSTOM_HID_ConfigStrDescriptor+0x34>)
}
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000814 	.word	0x20000814
 8008420:	0800862c 	.word	0x0800862c

08008424 <USBD_CUSTOM_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	6039      	str	r1, [r7, #0]
 800842e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d105      	bne.n	8008442 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	4907      	ldr	r1, [pc, #28]	; (8008458 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x34>)
 800843a:	4808      	ldr	r0, [pc, #32]	; (800845c <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x38>)
 800843c:	f7fe fefc 	bl	8007238 <USBD_GetString>
 8008440:	e004      	b.n	800844c <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	4904      	ldr	r1, [pc, #16]	; (8008458 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x34>)
 8008446:	4805      	ldr	r0, [pc, #20]	; (800845c <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x38>)
 8008448:	f7fe fef6 	bl	8007238 <USBD_GetString>
  }
  return USBD_StrDesc;
 800844c:	4b02      	ldr	r3, [pc, #8]	; (8008458 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x34>)
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000814 	.word	0x20000814
 800845c:	08008640 	.word	0x08008640

08008460 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008466:	4b0f      	ldr	r3, [pc, #60]	; (80084a4 <Get_SerialNum+0x44>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800846c:	4b0e      	ldr	r3, [pc, #56]	; (80084a8 <Get_SerialNum+0x48>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008472:	4b0e      	ldr	r3, [pc, #56]	; (80084ac <Get_SerialNum+0x4c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4413      	add	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d009      	beq.n	800849a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008486:	2208      	movs	r2, #8
 8008488:	4909      	ldr	r1, [pc, #36]	; (80084b0 <Get_SerialNum+0x50>)
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 f814 	bl	80084b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008490:	2204      	movs	r2, #4
 8008492:	4908      	ldr	r1, [pc, #32]	; (80084b4 <Get_SerialNum+0x54>)
 8008494:	68b8      	ldr	r0, [r7, #8]
 8008496:	f000 f80f 	bl	80084b8 <IntToUnicode>
  }
}
 800849a:	bf00      	nop
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	1fff7590 	.word	0x1fff7590
 80084a8:	1fff7594 	.word	0x1fff7594
 80084ac:	1fff7598 	.word	0x1fff7598
 80084b0:	2000012e 	.word	0x2000012e
 80084b4:	2000013e 	.word	0x2000013e

080084b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	4613      	mov	r3, r2
 80084c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084ca:	2300      	movs	r3, #0
 80084cc:	75fb      	strb	r3, [r7, #23]
 80084ce:	e027      	b.n	8008520 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	0f1b      	lsrs	r3, r3, #28
 80084d4:	2b09      	cmp	r3, #9
 80084d6:	d80b      	bhi.n	80084f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	0f1b      	lsrs	r3, r3, #28
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	005b      	lsls	r3, r3, #1
 80084e2:	4619      	mov	r1, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	440b      	add	r3, r1
 80084e8:	3230      	adds	r2, #48	; 0x30
 80084ea:	b2d2      	uxtb	r2, r2
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	e00a      	b.n	8008506 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	0f1b      	lsrs	r3, r3, #28
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	4619      	mov	r1, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	440b      	add	r3, r1
 8008500:	3237      	adds	r2, #55	; 0x37
 8008502:	b2d2      	uxtb	r2, r2
 8008504:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	011b      	lsls	r3, r3, #4
 800850a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	3301      	adds	r3, #1
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	4413      	add	r3, r2
 8008516:	2200      	movs	r2, #0
 8008518:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	3301      	adds	r3, #1
 800851e:	75fb      	strb	r3, [r7, #23]
 8008520:	7dfa      	ldrb	r2, [r7, #23]
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	429a      	cmp	r2, r3
 8008526:	d3d3      	bcc.n	80084d0 <IntToUnicode+0x18>
  }
}
 8008528:	bf00      	nop
 800852a:	371c      	adds	r7, #28
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008534:	480d      	ldr	r0, [pc, #52]	; (800856c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008536:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008538:	480d      	ldr	r0, [pc, #52]	; (8008570 <LoopForever+0x6>)
  ldr r1, =_edata
 800853a:	490e      	ldr	r1, [pc, #56]	; (8008574 <LoopForever+0xa>)
  ldr r2, =_sidata
 800853c:	4a0e      	ldr	r2, [pc, #56]	; (8008578 <LoopForever+0xe>)
  movs r3, #0
 800853e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008540:	e002      	b.n	8008548 <LoopCopyDataInit>

08008542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008546:	3304      	adds	r3, #4

08008548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800854a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800854c:	d3f9      	bcc.n	8008542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800854e:	4a0b      	ldr	r2, [pc, #44]	; (800857c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008550:	4c0b      	ldr	r4, [pc, #44]	; (8008580 <LoopForever+0x16>)
  movs r3, #0
 8008552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008554:	e001      	b.n	800855a <LoopFillZerobss>

08008556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008558:	3204      	adds	r2, #4

0800855a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800855a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800855c:	d3fb      	bcc.n	8008556 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800855e:	f7ff fb89 	bl	8007c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008562:	f000 f811 	bl	8008588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008566:	f7fe ff45 	bl	80073f4 <main>

0800856a <LoopForever>:

LoopForever:
    b LoopForever
 800856a:	e7fe      	b.n	800856a <LoopForever>
  ldr   r0, =_estack
 800856c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8008570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008574:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8008578:	08008670 	.word	0x08008670
  ldr r2, =_sbss
 800857c:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8008580:	20000a14 	.word	0x20000a14

08008584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008584:	e7fe      	b.n	8008584 <ADC1_2_IRQHandler>
	...

08008588 <__libc_init_array>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4e0d      	ldr	r6, [pc, #52]	; (80085c0 <__libc_init_array+0x38>)
 800858c:	4c0d      	ldr	r4, [pc, #52]	; (80085c4 <__libc_init_array+0x3c>)
 800858e:	1ba4      	subs	r4, r4, r6
 8008590:	10a4      	asrs	r4, r4, #2
 8008592:	2500      	movs	r5, #0
 8008594:	42a5      	cmp	r5, r4
 8008596:	d109      	bne.n	80085ac <__libc_init_array+0x24>
 8008598:	4e0b      	ldr	r6, [pc, #44]	; (80085c8 <__libc_init_array+0x40>)
 800859a:	4c0c      	ldr	r4, [pc, #48]	; (80085cc <__libc_init_array+0x44>)
 800859c:	f000 f820 	bl	80085e0 <_init>
 80085a0:	1ba4      	subs	r4, r4, r6
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	2500      	movs	r5, #0
 80085a6:	42a5      	cmp	r5, r4
 80085a8:	d105      	bne.n	80085b6 <__libc_init_array+0x2e>
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085b0:	4798      	blx	r3
 80085b2:	3501      	adds	r5, #1
 80085b4:	e7ee      	b.n	8008594 <__libc_init_array+0xc>
 80085b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085ba:	4798      	blx	r3
 80085bc:	3501      	adds	r5, #1
 80085be:	e7f2      	b.n	80085a6 <__libc_init_array+0x1e>
 80085c0:	08008668 	.word	0x08008668
 80085c4:	08008668 	.word	0x08008668
 80085c8:	08008668 	.word	0x08008668
 80085cc:	0800866c 	.word	0x0800866c

080085d0 <memset>:
 80085d0:	4402      	add	r2, r0
 80085d2:	4603      	mov	r3, r0
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d100      	bne.n	80085da <memset+0xa>
 80085d8:	4770      	bx	lr
 80085da:	f803 1b01 	strb.w	r1, [r3], #1
 80085de:	e7f9      	b.n	80085d4 <memset+0x4>

080085e0 <_init>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr

080085ec <_fini>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr
