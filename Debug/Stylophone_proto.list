
Stylophone_proto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b18  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d18  08004d18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d20  08004d20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d24  08004d24  00014d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08004d34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08004d34  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e79e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001be9  00000000  00000000  0002e7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  000303c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e48  00000000  00000000  000312f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d5b4  00000000  00000000  00032140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc8a  00000000  00000000  0004f6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1de4  00000000  00000000  0005b37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a4  00000000  00000000  0011d1e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004cd8 	.word	0x08004cd8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004cd8 	.word	0x08004cd8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fb15 	bl	8000b4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f812 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f970 	bl	8000808 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f922 	bl	8000770 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800052c:	f000 f870 	bl	8000610 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000530:	2104      	movs	r1, #4
 8000532:	4804      	ldr	r0, [pc, #16]	; (8000544 <main+0x2c>)
 8000534:	f001 fe78 	bl	8002228 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000538:	2104      	movs	r1, #4
 800053a:	4802      	ldr	r0, [pc, #8]	; (8000544 <main+0x2c>)
 800053c:	f002 fd7c 	bl	8003038 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x28>
 8000542:	bf00      	nop
 8000544:	20000028 	.word	0x20000028

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0a4      	sub	sp, #144	; 0x90
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000552:	2238      	movs	r2, #56	; 0x38
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f004 fbb6 	bl	8004cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2244      	movs	r2, #68	; 0x44
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fba8 	bl	8004cc8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fdd5 	bl	8001128 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057e:	2302      	movs	r3, #2
 8000580:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000586:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2340      	movs	r3, #64	; 0x40
 800058a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000594:	2304      	movs	r3, #4
 8000596:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000598:	2355      	movs	r3, #85	; 0x55
 800059a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fe5b 	bl	8001270 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005c0:	f000 f962 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2303      	movs	r3, #3
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80005d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005dc:	2108      	movs	r1, #8
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f95e 	bl	80018a0 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005ea:	f000 f94d 	bl	8000888 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fb6d 	bl	8001cd8 <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000604:	f000 f940 	bl	8000888 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3790      	adds	r7, #144	; 0x90
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b09c      	sub	sp, #112	; 0x70
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000616:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000624:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000630:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
 8000640:	615a      	str	r2, [r3, #20]
 8000642:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fb3c 	bl	8004cc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000650:	4b45      	ldr	r3, [pc, #276]	; (8000768 <MX_TIM1_Init+0x158>)
 8000652:	4a46      	ldr	r2, [pc, #280]	; (800076c <MX_TIM1_Init+0x15c>)
 8000654:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000656:	4b44      	ldr	r3, [pc, #272]	; (8000768 <MX_TIM1_Init+0x158>)
 8000658:	2209      	movs	r2, #9
 800065a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065c:	4b42      	ldr	r3, [pc, #264]	; (8000768 <MX_TIM1_Init+0x158>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 849;
 8000662:	4b41      	ldr	r3, [pc, #260]	; (8000768 <MX_TIM1_Init+0x158>)
 8000664:	f240 3251 	movw	r2, #849	; 0x351
 8000668:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066a:	4b3f      	ldr	r3, [pc, #252]	; (8000768 <MX_TIM1_Init+0x158>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000670:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <MX_TIM1_Init+0x158>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000676:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <MX_TIM1_Init+0x158>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800067c:	483a      	ldr	r0, [pc, #232]	; (8000768 <MX_TIM1_Init+0x158>)
 800067e:	f001 fd1b 	bl	80020b8 <HAL_TIM_Base_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000688:	f000 f8fe 	bl	8000888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000692:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000696:	4619      	mov	r1, r3
 8000698:	4833      	ldr	r0, [pc, #204]	; (8000768 <MX_TIM1_Init+0x158>)
 800069a:	f001 ffa7 	bl	80025ec <HAL_TIM_ConfigClockSource>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006a4:	f000 f8f0 	bl	8000888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006a8:	482f      	ldr	r0, [pc, #188]	; (8000768 <MX_TIM1_Init+0x158>)
 80006aa:	f001 fd5c 	bl	8002166 <HAL_TIM_PWM_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006b4:	f000 f8e8 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006bc:	2300      	movs	r3, #0
 80006be:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c8:	4619      	mov	r1, r3
 80006ca:	4827      	ldr	r0, [pc, #156]	; (8000768 <MX_TIM1_Init+0x158>)
 80006cc:	f002 fd34 	bl	8003138 <HAL_TIMEx_MasterConfigSynchronization>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006d6:	f000 f8d7 	bl	8000888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006da:	2360      	movs	r3, #96	; 0x60
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 250;
 80006de:	23fa      	movs	r3, #250	; 0xfa
 80006e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e2:	2300      	movs	r3, #0
 80006e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006e6:	2300      	movs	r3, #0
 80006e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80006ea:	2304      	movs	r3, #4
 80006ec:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006fa:	2204      	movs	r2, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	481a      	ldr	r0, [pc, #104]	; (8000768 <MX_TIM1_Init+0x158>)
 8000700:	f001 fe64 	bl	80023cc <HAL_TIM_PWM_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800070a:	f000 f8bd 	bl	8000888 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000734:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800073e:	2300      	movs	r3, #0
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <MX_TIM1_Init+0x158>)
 800074c:	f002 fd76 	bl	800323c <HAL_TIMEx_ConfigBreakDeadTime>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000756:	f000 f897 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <MX_TIM1_Init+0x158>)
 800075c:	f000 f8f0 	bl	8000940 <HAL_TIM_MspPostInit>

}
 8000760:	bf00      	nop
 8000762:	3770      	adds	r7, #112	; 0x70
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000028 	.word	0x20000028
 800076c:	40012c00 	.word	0x40012c00

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_USART2_UART_Init+0x90>)
 8000776:	4a23      	ldr	r2, [pc, #140]	; (8000804 <MX_USART2_UART_Init+0x94>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_USART2_UART_Init+0x90>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_USART2_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_USART2_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_USART2_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_USART2_UART_Init+0x90>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_USART2_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007ba:	f002 fe04 	bl	80033c6 <HAL_UART_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 f860 	bl	8000888 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007cc:	f004 f973 	bl	8004ab6 <HAL_UARTEx_SetTxFifoThreshold>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007d6:	f000 f857 	bl	8000888 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007de:	f004 f9a8 	bl	8004b32 <HAL_UARTEx_SetRxFifoThreshold>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007e8:	f000 f84e 	bl	8000888 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007ee:	f004 f929 	bl	8004a44 <HAL_UARTEx_DisableFifoMode>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f846 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000074 	.word	0x20000074
 8000804:	40004400 	.word	0x40004400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_GPIO_Init+0x78>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <MX_GPIO_Init+0x78>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_GPIO_Init+0x78>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_GPIO_Init+0x78>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a11      	ldr	r2, [pc, #68]	; (8000880 <MX_GPIO_Init+0x78>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_GPIO_Init+0x78>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <MX_GPIO_Init+0x7c>)
 8000856:	f000 fc4f 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800085a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_GPIO_Init+0x7c>)
 8000874:	f000 fabe 	bl	8000df4 <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	48000400 	.word	0x48000400

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6093      	str	r3, [r2, #8]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40007000 	.word	0x40007000

080008b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_MspInit+0x44>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x44>)
 80008cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x44>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6593      	str	r3, [r2, #88]	; 0x58
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x44>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80008ee:	f7ff ffd3 	bl	8000898 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_TIM_Base_MspInit+0x38>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d10b      	bne.n	800092a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_TIM_Base_MspInit+0x3c>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <HAL_TIM_Base_MspInit+0x3c>)
 8000918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800091c:	6613      	str	r3, [r2, #96]	; 0x60
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <HAL_TIM_Base_MspInit+0x3c>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40012c00 	.word	0x40012c00
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <HAL_TIM_MspPostInit+0xa0>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d139      	bne.n	80009d6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <HAL_TIM_MspPostInit+0xa4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <HAL_TIM_MspPostInit+0xa4>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <HAL_TIM_MspPostInit+0xa4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_TIM_MspPostInit+0xa4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <HAL_TIM_MspPostInit+0xa4>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <HAL_TIM_MspPostInit+0xa4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PB0     ------> TIM1_CH2N
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009a2:	2306      	movs	r3, #6
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	480e      	ldr	r0, [pc, #56]	; (80009e8 <HAL_TIM_MspPostInit+0xa8>)
 80009ae:	f000 fa21 	bl	8000df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009c4:	2306      	movs	r3, #6
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d2:	f000 fa0f 	bl	8000df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40012c00 	.word	0x40012c00
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0x7c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d128      	bne.n	8000a60 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 f9ca 	bl	8000df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40021000 	.word	0x40021000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f894 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <SystemInit+0x28>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad6:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <SystemInit+0x28>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <SystemInit+0x28>)
 8000ae2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000afe:	490e      	ldr	r1, [pc, #56]	; (8000b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <LoopForever+0xe>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b14:	4c0b      	ldr	r4, [pc, #44]	; (8000b44 <LoopForever+0x16>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b22:	f7ff ffd3 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f004 f8ab 	bl	8004c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2a:	f7ff fcf5 	bl	8000518 <main>

08000b2e <LoopForever>:

LoopForever:
    b LoopForever
 8000b2e:	e7fe      	b.n	8000b2e <LoopForever>
  ldr   r0, =_estack
 8000b30:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b3c:	08004d28 	.word	0x08004d28
  ldr r2, =_sbss
 8000b40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b44:	20000104 	.word	0x20000104

08000b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_2_IRQHandler>

08000b4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f91b 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f000 f80e 	bl	8000b7c <HAL_InitTick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	e001      	b.n	8000b70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6c:	f7ff fea4 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b70:	79fb      	ldrb	r3, [r7, #7]

}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_InitTick+0x68>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d022      	beq.n	8000bd6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_InitTick+0x68>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f918 	bl	8000dda <HAL_SYSTICK_Config>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10f      	bne.n	8000bd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	d809      	bhi.n	8000bca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbe:	f000 f8f2 	bl	8000da6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_InitTick+0x70>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e007      	b.n	8000bda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
 8000bce:	e004      	b.n	8000bda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e001      	b.n	8000bda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x20>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <HAL_IncTick+0x1c>)
 8000c00:	6013      	str	r3, [r2, #0]
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	20000100 	.word	0x20000100
 8000c10:	20000008 	.word	0x20000008

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000100 	.word	0x20000100

08000c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff47 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff5e 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff90 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5f 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffb2 	bl	8000d4c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e02:	e15a      	b.n	80010ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 814c 	beq.w	80010b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d00b      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e30:	2b11      	cmp	r3, #17
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b12      	cmp	r3, #18
 8000e3a:	d130      	bne.n	8000e9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	f003 0201 	and.w	r2, r3, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0xea>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b12      	cmp	r3, #18
 8000edc:	d123      	bne.n	8000f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	691a      	ldr	r2, [r3, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	6939      	ldr	r1, [r7, #16]
 8000f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0203 	and.w	r2, r3, #3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 80a6 	beq.w	80010b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f68:	4b5b      	ldr	r3, [pc, #364]	; (80010d8 <HAL_GPIO_Init+0x2e4>)
 8000f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6c:	4a5a      	ldr	r2, [pc, #360]	; (80010d8 <HAL_GPIO_Init+0x2e4>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6613      	str	r3, [r2, #96]	; 0x60
 8000f74:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_GPIO_Init+0x2e4>)
 8000f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f80:	4a56      	ldr	r2, [pc, #344]	; (80010dc <HAL_GPIO_Init+0x2e8>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000faa:	d01f      	beq.n	8000fec <HAL_GPIO_Init+0x1f8>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_GPIO_Init+0x2ec>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d019      	beq.n	8000fe8 <HAL_GPIO_Init+0x1f4>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a4b      	ldr	r2, [pc, #300]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d013      	beq.n	8000fe4 <HAL_GPIO_Init+0x1f0>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a4a      	ldr	r2, [pc, #296]	; (80010e8 <HAL_GPIO_Init+0x2f4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d00d      	beq.n	8000fe0 <HAL_GPIO_Init+0x1ec>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a49      	ldr	r2, [pc, #292]	; (80010ec <HAL_GPIO_Init+0x2f8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d007      	beq.n	8000fdc <HAL_GPIO_Init+0x1e8>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_GPIO_Init+0x2fc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d101      	bne.n	8000fd8 <HAL_GPIO_Init+0x1e4>
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	e00a      	b.n	8000fee <HAL_GPIO_Init+0x1fa>
 8000fd8:	2306      	movs	r3, #6
 8000fda:	e008      	b.n	8000fee <HAL_GPIO_Init+0x1fa>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e006      	b.n	8000fee <HAL_GPIO_Init+0x1fa>
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e004      	b.n	8000fee <HAL_GPIO_Init+0x1fa>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e002      	b.n	8000fee <HAL_GPIO_Init+0x1fa>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <HAL_GPIO_Init+0x1fa>
 8000fec:	2300      	movs	r3, #0
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	f002 0203 	and.w	r2, r2, #3
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	4093      	lsls	r3, r2
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ffe:	4937      	ldr	r1, [pc, #220]	; (80010dc <HAL_GPIO_Init+0x2e8>)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800100c:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <HAL_GPIO_Init+0x300>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001030:	4a30      	ldr	r2, [pc, #192]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001036:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800105a:	4a26      	ldr	r2, [pc, #152]	; (80010f4 <HAL_GPIO_Init+0x300>)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_GPIO_Init+0x300>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ae:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <HAL_GPIO_Init+0x300>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	fa22 f303 	lsr.w	r3, r2, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f47f ae9d 	bne.w	8000e04 <HAL_GPIO_Init+0x10>
  }
}
 80010ca:	bf00      	nop
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000
 80010e0:	48000400 	.word	0x48000400
 80010e4:	48000800 	.word	0x48000800
 80010e8:	48000c00 	.word	0x48000c00
 80010ec:	48001000 	.word	0x48001000
 80010f0:	48001400 	.word	0x48001400
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001114:	e002      	b.n	800111c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d141      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001136:	4b4b      	ldr	r3, [pc, #300]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800113e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001142:	d131      	bne.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001144:	4b47      	ldr	r3, [pc, #284]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800114a:	4a46      	ldr	r2, [pc, #280]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001150:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001154:	4b43      	ldr	r3, [pc, #268]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800115c:	4a41      	ldr	r2, [pc, #260]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001164:	4b40      	ldr	r3, [pc, #256]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2232      	movs	r2, #50	; 0x32
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	4a3f      	ldr	r2, [pc, #252]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	0c9b      	lsrs	r3, r3, #18
 8001176:	3301      	adds	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800117a:	e002      	b.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3b01      	subs	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001182:	4b38      	ldr	r3, [pc, #224]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118e:	d102      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f2      	bne.n	800117c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001196:	4b33      	ldr	r3, [pc, #204]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a2:	d158      	bne.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e057      	b.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ae:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011b8:	e04d      	b.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011c0:	d141      	bne.n	8001246 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011c2:	4b28      	ldr	r3, [pc, #160]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ce:	d131      	bne.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011d6:	4a23      	ldr	r2, [pc, #140]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011e8:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2232      	movs	r2, #50	; 0x32
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	0c9b      	lsrs	r3, r3, #18
 8001202:	3301      	adds	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001206:	e002      	b.n	800120e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3b01      	subs	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800121a:	d102      	bne.n	8001222 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f2      	bne.n	8001208 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800122e:	d112      	bne.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e011      	b.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001244:	e007      	b.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001254:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40007000 	.word	0x40007000
 8001268:	20000000 	.word	0x20000000
 800126c:	431bde83 	.word	0x431bde83

08001270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e308      	b.n	8001894 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d075      	beq.n	800137a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128e:	4ba3      	ldr	r3, [pc, #652]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001298:	4ba0      	ldr	r3, [pc, #640]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	d102      	bne.n	80012ae <HAL_RCC_OscConfig+0x3e>
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d002      	beq.n	80012b4 <HAL_RCC_OscConfig+0x44>
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d10b      	bne.n	80012cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	4b99      	ldr	r3, [pc, #612]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d05b      	beq.n	8001378 <HAL_RCC_OscConfig+0x108>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d157      	bne.n	8001378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e2e3      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d4:	d106      	bne.n	80012e4 <HAL_RCC_OscConfig+0x74>
 80012d6:	4b91      	ldr	r3, [pc, #580]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a90      	ldr	r2, [pc, #576]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e01d      	b.n	8001320 <HAL_RCC_OscConfig+0xb0>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x98>
 80012ee:	4b8b      	ldr	r3, [pc, #556]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a8a      	ldr	r2, [pc, #552]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b88      	ldr	r3, [pc, #544]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a87      	ldr	r2, [pc, #540]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e00b      	b.n	8001320 <HAL_RCC_OscConfig+0xb0>
 8001308:	4b84      	ldr	r3, [pc, #528]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a83      	ldr	r2, [pc, #524]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 800130e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b81      	ldr	r3, [pc, #516]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a80      	ldr	r2, [pc, #512]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 800131a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d013      	beq.n	8001350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fc74 	bl	8000c14 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fc70 	bl	8000c14 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	; 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e2a8      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001342:	4b76      	ldr	r3, [pc, #472]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0xc0>
 800134e:	e014      	b.n	800137a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fc60 	bl	8000c14 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fc5c 	bl	8000c14 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e294      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800136a:	4b6c      	ldr	r3, [pc, #432]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0xe8>
 8001376:	e000      	b.n	800137a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d075      	beq.n	8001472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001386:	4b65      	ldr	r3, [pc, #404]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001390:	4b62      	ldr	r3, [pc, #392]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b0c      	cmp	r3, #12
 800139e:	d102      	bne.n	80013a6 <HAL_RCC_OscConfig+0x136>
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d002      	beq.n	80013ac <HAL_RCC_OscConfig+0x13c>
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d11f      	bne.n	80013ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ac:	4b5b      	ldr	r3, [pc, #364]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_RCC_OscConfig+0x154>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e267      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b55      	ldr	r3, [pc, #340]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	061b      	lsls	r3, r3, #24
 80013d2:	4952      	ldr	r1, [pc, #328]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013d8:	4b51      	ldr	r3, [pc, #324]	; (8001520 <HAL_RCC_OscConfig+0x2b0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fbcd 	bl	8000b7c <HAL_InitTick>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d043      	beq.n	8001470 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e253      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d023      	beq.n	800143c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f4:	4b49      	ldr	r3, [pc, #292]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a48      	ldr	r2, [pc, #288]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fc08 	bl	8000c14 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff fc04 	bl	8000c14 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e23c      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800141a:	4b40      	ldr	r3, [pc, #256]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4b3d      	ldr	r3, [pc, #244]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	061b      	lsls	r3, r3, #24
 8001434:	4939      	ldr	r1, [pc, #228]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
 800143a:	e01a      	b.n	8001472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143c:	4b37      	ldr	r3, [pc, #220]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a36      	ldr	r2, [pc, #216]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 8001442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fbe4 	bl	8000c14 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fbe0 	bl	8000c14 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e218      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x1e0>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d03c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d01c      	beq.n	80014c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 8001488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800148c:	4a23      	ldr	r2, [pc, #140]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001496:	f7ff fbbd 	bl	8000c14 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149e:	f7ff fbb9 	bl	8000c14 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e1f1      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80014b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0ef      	beq.n	800149e <HAL_RCC_OscConfig+0x22e>
 80014be:	e01b      	b.n	80014f8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d0:	f7ff fba0 	bl	8000c14 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fb9c 	bl	8000c14 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1d4      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ef      	bne.n	80014d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80ab 	beq.w	800165c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <HAL_RCC_OscConfig+0x2ac>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_RCC_OscConfig+0x2b4>
 8001516:	2301      	movs	r3, #1
 8001518:	e005      	b.n	8001526 <HAL_RCC_OscConfig+0x2b6>
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	20000004 	.word	0x20000004
 8001524:	2300      	movs	r3, #0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00d      	beq.n	8001546 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4baf      	ldr	r3, [pc, #700]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	4aae      	ldr	r2, [pc, #696]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6593      	str	r3, [r2, #88]	; 0x58
 8001536:	4bac      	ldr	r3, [pc, #688]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001542:	2301      	movs	r3, #1
 8001544:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001546:	4ba9      	ldr	r3, [pc, #676]	; (80017ec <HAL_RCC_OscConfig+0x57c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d118      	bne.n	8001584 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001552:	4ba6      	ldr	r3, [pc, #664]	; (80017ec <HAL_RCC_OscConfig+0x57c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4aa5      	ldr	r2, [pc, #660]	; (80017ec <HAL_RCC_OscConfig+0x57c>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155e:	f7ff fb59 	bl	8000c14 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001566:	f7ff fb55 	bl	8000c14 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e18d      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001578:	4b9c      	ldr	r3, [pc, #624]	; (80017ec <HAL_RCC_OscConfig+0x57c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d108      	bne.n	800159e <HAL_RCC_OscConfig+0x32e>
 800158c:	4b96      	ldr	r3, [pc, #600]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 800158e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001592:	4a95      	ldr	r2, [pc, #596]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800159c:	e024      	b.n	80015e8 <HAL_RCC_OscConfig+0x378>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d110      	bne.n	80015c8 <HAL_RCC_OscConfig+0x358>
 80015a6:	4b90      	ldr	r3, [pc, #576]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80015a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ac:	4a8e      	ldr	r2, [pc, #568]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015b6:	4b8c      	ldr	r3, [pc, #560]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80015b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015bc:	4a8a      	ldr	r2, [pc, #552]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c6:	e00f      	b.n	80015e8 <HAL_RCC_OscConfig+0x378>
 80015c8:	4b87      	ldr	r3, [pc, #540]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80015ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ce:	4a86      	ldr	r2, [pc, #536]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015d8:	4b83      	ldr	r3, [pc, #524]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80015da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015de:	4a82      	ldr	r2, [pc, #520]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d016      	beq.n	800161e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fb10 	bl	8000c14 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff fb0c 	bl	8000c14 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e142      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800160e:	4b76      	ldr	r3, [pc, #472]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0ed      	beq.n	80015f8 <HAL_RCC_OscConfig+0x388>
 800161c:	e015      	b.n	800164a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff faf9 	bl	8000c14 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff faf5 	bl	8000c14 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e12b      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800163c:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ed      	bne.n	8001626 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b65      	ldr	r3, [pc, #404]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	4a64      	ldr	r2, [pc, #400]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d03c      	beq.n	80016e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01c      	beq.n	80016aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001670:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001676:	4a5c      	ldr	r2, [pc, #368]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fac8 	bl	8000c14 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001688:	f7ff fac4 	bl	8000c14 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e0fc      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800169a:	4b53      	ldr	r3, [pc, #332]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 800169c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ef      	beq.n	8001688 <HAL_RCC_OscConfig+0x418>
 80016a8:	e01b      	b.n	80016e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016aa:	4b4f      	ldr	r3, [pc, #316]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80016ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016b0:	4a4d      	ldr	r2, [pc, #308]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff faab 	bl	8000c14 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c2:	f7ff faa7 	bl	8000c14 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e0df      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016d4:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80016d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ef      	bne.n	80016c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80d3 	beq.w	8001892 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ec:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b0c      	cmp	r3, #12
 80016f6:	f000 808d 	beq.w	8001814 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d15a      	bne.n	80017b8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a38      	ldr	r2, [pc, #224]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800170c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff fa81 	bl	8000c14 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff fa7d 	bl	8000c14 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e0b5      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001728:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001734:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_RCC_OscConfig+0x580>)
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6a11      	ldr	r1, [r2, #32]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001744:	3a01      	subs	r2, #1
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	4311      	orrs	r1, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800174e:	0212      	lsls	r2, r2, #8
 8001750:	4311      	orrs	r1, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001756:	0852      	lsrs	r2, r2, #1
 8001758:	3a01      	subs	r2, #1
 800175a:	0552      	lsls	r2, r2, #21
 800175c:	4311      	orrs	r1, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001762:	0852      	lsrs	r2, r2, #1
 8001764:	3a01      	subs	r2, #1
 8001766:	0652      	lsls	r2, r2, #25
 8001768:	4311      	orrs	r1, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800176e:	06d2      	lsls	r2, r2, #27
 8001770:	430a      	orrs	r2, r1
 8001772:	491d      	ldr	r1, [pc, #116]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001774:	4313      	orrs	r3, r2
 8001776:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1a      	ldr	r2, [pc, #104]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 800177e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001782:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 800178a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fa40 	bl	8000c14 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff fa3c 	bl	8000c14 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e074      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x528>
 80017b6:	e06c      	b.n	8001892 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80017be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_RCC_OscConfig+0x578>)
 80017d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80017da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fa18 	bl	8000c14 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e6:	e00e      	b.n	8001806 <HAL_RCC_OscConfig+0x596>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40007000 	.word	0x40007000
 80017f0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fa0e 	bl	8000c14 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e046      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_RCC_OscConfig+0x62c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x584>
 8001812:	e03e      	b.n	8001892 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e039      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_RCC_OscConfig+0x62c>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0203 	and.w	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	429a      	cmp	r2, r3
 8001832:	d12c      	bne.n	800188e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	3b01      	subs	r3, #1
 8001840:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d123      	bne.n	800188e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d11b      	bne.n	800188e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d113      	bne.n	800188e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	3b01      	subs	r3, #1
 8001874:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d109      	bne.n	800188e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	085b      	lsrs	r3, r3, #1
 8001886:	3b01      	subs	r3, #1
 8001888:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e11e      	b.n	8001af6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b91      	ldr	r3, [pc, #580]	; (8001b00 <HAL_RCC_ClockConfig+0x260>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d910      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b8e      	ldr	r3, [pc, #568]	; (8001b00 <HAL_RCC_ClockConfig+0x260>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 020f 	bic.w	r2, r3, #15
 80018ce:	498c      	ldr	r1, [pc, #560]	; (8001b00 <HAL_RCC_ClockConfig+0x260>)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b8a      	ldr	r3, [pc, #552]	; (8001b00 <HAL_RCC_ClockConfig+0x260>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e106      	b.n	8001af6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d073      	beq.n	80019dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d129      	bne.n	8001950 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fc:	4b81      	ldr	r3, [pc, #516]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0f4      	b.n	8001af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800190c:	f000 f99e 	bl	8001c4c <RCC_GetSysClockFreqFromPLLSource>
 8001910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4a7c      	ldr	r2, [pc, #496]	; (8001b08 <HAL_RCC_ClockConfig+0x268>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d93f      	bls.n	800199a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800191a:	4b7a      	ldr	r3, [pc, #488]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800192e:	2b00      	cmp	r3, #0
 8001930:	d033      	beq.n	800199a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001936:	2b00      	cmp	r3, #0
 8001938:	d12f      	bne.n	800199a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800193a:	4b72      	ldr	r3, [pc, #456]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001942:	4a70      	ldr	r2, [pc, #448]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001948:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e024      	b.n	800199a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d107      	bne.n	8001968 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0c6      	b.n	8001af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001968:	4b66      	ldr	r3, [pc, #408]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0be      	b.n	8001af6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001978:	f000 f8ce 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 800197c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4a61      	ldr	r2, [pc, #388]	; (8001b08 <HAL_RCC_ClockConfig+0x268>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d909      	bls.n	800199a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001986:	4b5f      	ldr	r3, [pc, #380]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800198e:	4a5d      	ldr	r2, [pc, #372]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800199a:	4b5a      	ldr	r3, [pc, #360]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f023 0203 	bic.w	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4957      	ldr	r1, [pc, #348]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ac:	f7ff f932 	bl	8000c14 <HAL_GetTick>
 80019b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b4:	f7ff f92e 	bl	8000c14 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e095      	b.n	8001af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 020c 	and.w	r2, r3, #12
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1eb      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d023      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f4:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a42      	ldr	r2, [pc, #264]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 80019fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d007      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a0c:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a14:	4a3b      	ldr	r2, [pc, #236]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4936      	ldr	r1, [pc, #216]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b80      	cmp	r3, #128	; 0x80
 8001a34:	d105      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a36:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <HAL_RCC_ClockConfig+0x260>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d21d      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_RCC_ClockConfig+0x260>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 020f 	bic.w	r2, r3, #15
 8001a58:	4929      	ldr	r1, [pc, #164]	; (8001b00 <HAL_RCC_ClockConfig+0x260>)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a60:	f7ff f8d8 	bl	8000c14 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff f8d4 	bl	8000c14 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e03b      	b.n	8001af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_RCC_ClockConfig+0x260>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1ed      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4917      	ldr	r1, [pc, #92]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490f      	ldr	r1, [pc, #60]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aca:	f000 f825 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ace:	4601      	mov	r1, r0
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_RCC_ClockConfig+0x264>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <HAL_RCC_ClockConfig+0x26c>)
 8001adc:	5cd3      	ldrb	r3, [r2, r3]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_RCC_ClockConfig+0x270>)
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_RCC_ClockConfig+0x274>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f844 	bl	8000b7c <HAL_InitTick>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40022000 	.word	0x40022000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	04c4b400 	.word	0x04c4b400
 8001b0c:	08004d00 	.word	0x08004d00
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d102      	bne.n	8001b30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	e047      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b30:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d102      	bne.n	8001b42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	e03e      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	d136      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3301      	adds	r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d10c      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	4a16      	ldr	r2, [pc, #88]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b76:	68d2      	ldr	r2, [r2, #12]
 8001b78:	0a12      	lsrs	r2, r2, #8
 8001b7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
      break;
 8001b84:	e00c      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b86:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4a10      	ldr	r2, [pc, #64]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b90:	68d2      	ldr	r2, [r2, #12]
 8001b92:	0a12      	lsrs	r2, r2, #8
 8001b94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
      break;
 8001b9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0e5b      	lsrs	r3, r3, #25
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	3301      	adds	r3, #1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e001      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bc0:	693b      	ldr	r3, [r7, #16]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	00f42400 	.word	0x00f42400
 8001bd8:	007a1200 	.word	0x007a1200

08001bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bf8:	f7ff fff0 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001bfc:	4601      	mov	r1, r0
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c0a:	5cd3      	ldrb	r3, [r2, r3]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08004d10 	.word	0x08004d10

08001c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c24:	f7ff ffda 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001c28:	4601      	mov	r1, r0
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0adb      	lsrs	r3, r3, #11
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08004d10 	.word	0x08004d10

08001c4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3301      	adds	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d10c      	bne.n	8001c8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c70:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c7a:	68d2      	ldr	r2, [r2, #12]
 8001c7c:	0a12      	lsrs	r2, r2, #8
 8001c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
    break;
 8001c88:	e00c      	b.n	8001ca4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c8a:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c94:	68d2      	ldr	r2, [r2, #12]
 8001c96:	0a12      	lsrs	r2, r2, #8
 8001c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
    break;
 8001ca2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0e5b      	lsrs	r3, r3, #25
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	007a1200 	.word	0x007a1200
 8001cd4:	00f42400 	.word	0x00f42400

08001cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8098 	beq.w	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b40      	ldr	r3, [pc, #256]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	4a3f      	ldr	r2, [pc, #252]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6593      	str	r3, [r2, #88]	; 0x58
 8001d12:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d22:	4b3a      	ldr	r3, [pc, #232]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d2e:	f7fe ff71 	bl	8000c14 <HAL_GetTick>
 8001d32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d34:	e009      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d36:	f7fe ff6d 	bl	8000c14 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d902      	bls.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	74fb      	strb	r3, [r7, #19]
        break;
 8001d48:	e005      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0ef      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d56:	7cfb      	ldrb	r3, [r7, #19]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d159      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d01e      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d019      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9a:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001da4:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d016      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7fe ff2d 	bl	8000c14 <HAL_GetTick>
 8001dba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dbc:	e00b      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7fe ff29 	bl	8000c14 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d902      	bls.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	74fb      	strb	r3, [r7, #19]
            break;
 8001dd4:	e006      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ec      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001de4:	7cfb      	ldrb	r3, [r7, #19]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10b      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	4903      	ldr	r1, [pc, #12]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e00:	e008      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e02:	7cfb      	ldrb	r3, [r7, #19]
 8001e04:	74bb      	strb	r3, [r7, #18]
 8001e06:	e005      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e10:	7cfb      	ldrb	r3, [r7, #19]
 8001e12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e14:	7c7b      	ldrb	r3, [r7, #17]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d105      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1a:	4ba6      	ldr	r3, [pc, #664]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	4aa5      	ldr	r2, [pc, #660]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e32:	4ba0      	ldr	r3, [pc, #640]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e38:	f023 0203 	bic.w	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	499c      	ldr	r1, [pc, #624]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e54:	4b97      	ldr	r3, [pc, #604]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	f023 020c 	bic.w	r2, r3, #12
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	4994      	ldr	r1, [pc, #592]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e76:	4b8f      	ldr	r3, [pc, #572]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	498b      	ldr	r1, [pc, #556]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e98:	4b86      	ldr	r3, [pc, #536]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	4983      	ldr	r1, [pc, #524]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001eba:	4b7e      	ldr	r3, [pc, #504]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	497a      	ldr	r1, [pc, #488]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001edc:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4972      	ldr	r1, [pc, #456]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001efe:	4b6d      	ldr	r3, [pc, #436]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	4969      	ldr	r1, [pc, #420]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f20:	4b64      	ldr	r3, [pc, #400]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4961      	ldr	r1, [pc, #388]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f42:	4b5c      	ldr	r3, [pc, #368]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	4958      	ldr	r1, [pc, #352]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d015      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	4950      	ldr	r1, [pc, #320]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f82:	d105      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f84:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4a4a      	ldr	r2, [pc, #296]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d015      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f9c:	4b45      	ldr	r3, [pc, #276]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	4942      	ldr	r1, [pc, #264]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a3c      	ldr	r2, [pc, #240]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fc6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d015      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001fd4:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4934      	ldr	r1, [pc, #208]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff2:	d105      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ff4:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a2e      	ldr	r2, [pc, #184]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ffe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d015      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800200c:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201a:	4926      	ldr	r1, [pc, #152]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800202a:	d105      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800202c:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a20      	ldr	r2, [pc, #128]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002036:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002044:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	4918      	ldr	r1, [pc, #96]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002062:	d105      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800206e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d015      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	490a      	ldr	r1, [pc, #40]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800209a:	d105      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80020a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e049      	b.n	800215e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fc0e 	bl	8000900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	4610      	mov	r0, r2
 80020f8:	f000 fb56 	bl	80027a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e049      	b.n	800220c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d106      	bne.n	8002192 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f841 	bl	8002214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	4619      	mov	r1, r3
 80021a4:	4610      	mov	r0, r2
 80021a6:	f000 faff 	bl	80027a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_TIM_PWM_Start+0x24>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e03c      	b.n	80022c6 <HAL_TIM_PWM_Start+0x9e>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b04      	cmp	r3, #4
 8002250:	d109      	bne.n	8002266 <HAL_TIM_PWM_Start+0x3e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	bf14      	ite	ne
 800225e:	2301      	movne	r3, #1
 8002260:	2300      	moveq	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	e02f      	b.n	80022c6 <HAL_TIM_PWM_Start+0x9e>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d109      	bne.n	8002280 <HAL_TIM_PWM_Start+0x58>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	bf14      	ite	ne
 8002278:	2301      	movne	r3, #1
 800227a:	2300      	moveq	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e022      	b.n	80022c6 <HAL_TIM_PWM_Start+0x9e>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d109      	bne.n	800229a <HAL_TIM_PWM_Start+0x72>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	bf14      	ite	ne
 8002292:	2301      	movne	r3, #1
 8002294:	2300      	moveq	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	e015      	b.n	80022c6 <HAL_TIM_PWM_Start+0x9e>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b10      	cmp	r3, #16
 800229e:	d109      	bne.n	80022b4 <HAL_TIM_PWM_Start+0x8c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e008      	b.n	80022c6 <HAL_TIM_PWM_Start+0x9e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	bf14      	ite	ne
 80022c0:	2301      	movne	r3, #1
 80022c2:	2300      	moveq	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e06e      	b.n	80023ac <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d104      	bne.n	80022de <HAL_TIM_PWM_Start+0xb6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022dc:	e023      	b.n	8002326 <HAL_TIM_PWM_Start+0xfe>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d104      	bne.n	80022ee <HAL_TIM_PWM_Start+0xc6>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022ec:	e01b      	b.n	8002326 <HAL_TIM_PWM_Start+0xfe>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_PWM_Start+0xd6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022fc:	e013      	b.n	8002326 <HAL_TIM_PWM_Start+0xfe>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b0c      	cmp	r3, #12
 8002302:	d104      	bne.n	800230e <HAL_TIM_PWM_Start+0xe6>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800230c:	e00b      	b.n	8002326 <HAL_TIM_PWM_Start+0xfe>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b10      	cmp	r3, #16
 8002312:	d104      	bne.n	800231e <HAL_TIM_PWM_Start+0xf6>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800231c:	e003      	b.n	8002326 <HAL_TIM_PWM_Start+0xfe>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2201      	movs	r2, #1
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fe5c 	bl	8002fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <HAL_TIM_PWM_Start+0x18c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_TIM_PWM_Start+0x13e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <HAL_TIM_PWM_Start+0x190>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00e      	beq.n	8002366 <HAL_TIM_PWM_Start+0x13e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_TIM_PWM_Start+0x194>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d009      	beq.n	8002366 <HAL_TIM_PWM_Start+0x13e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <HAL_TIM_PWM_Start+0x198>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d004      	beq.n	8002366 <HAL_TIM_PWM_Start+0x13e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <HAL_TIM_PWM_Start+0x19c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_TIM_PWM_Start+0x142>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_TIM_PWM_Start+0x144>
 800236a:	2300      	movs	r3, #0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <HAL_TIM_PWM_Start+0x1a0>)
 8002388:	4013      	ands	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b06      	cmp	r3, #6
 8002390:	d00b      	beq.n	80023aa <HAL_TIM_PWM_Start+0x182>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002398:	d007      	beq.n	80023aa <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40013400 	.word	0x40013400
 80023bc:	40014000 	.word	0x40014000
 80023c0:	40014400 	.word	0x40014400
 80023c4:	40014800 	.word	0x40014800
 80023c8:	00010007 	.word	0x00010007

080023cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e0fd      	b.n	80025e2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b14      	cmp	r3, #20
 80023f2:	f200 80f0 	bhi.w	80025d6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80023f6:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	08002451 	.word	0x08002451
 8002400:	080025d7 	.word	0x080025d7
 8002404:	080025d7 	.word	0x080025d7
 8002408:	080025d7 	.word	0x080025d7
 800240c:	08002491 	.word	0x08002491
 8002410:	080025d7 	.word	0x080025d7
 8002414:	080025d7 	.word	0x080025d7
 8002418:	080025d7 	.word	0x080025d7
 800241c:	080024d3 	.word	0x080024d3
 8002420:	080025d7 	.word	0x080025d7
 8002424:	080025d7 	.word	0x080025d7
 8002428:	080025d7 	.word	0x080025d7
 800242c:	08002513 	.word	0x08002513
 8002430:	080025d7 	.word	0x080025d7
 8002434:	080025d7 	.word	0x080025d7
 8002438:	080025d7 	.word	0x080025d7
 800243c:	08002555 	.word	0x08002555
 8002440:	080025d7 	.word	0x080025d7
 8002444:	080025d7 	.word	0x080025d7
 8002448:	080025d7 	.word	0x080025d7
 800244c:	08002595 	.word	0x08002595
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fa36 	bl	80028c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0208 	orr.w	r2, r2, #8
 800246a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0204 	bic.w	r2, r2, #4
 800247a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6999      	ldr	r1, [r3, #24]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	619a      	str	r2, [r3, #24]
      break;
 800248e:	e0a3      	b.n	80025d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 faa6 	bl	80029e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6999      	ldr	r1, [r3, #24]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	021a      	lsls	r2, r3, #8
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	619a      	str	r2, [r3, #24]
      break;
 80024d0:	e082      	b.n	80025d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fb0f 	bl	8002afc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0208 	orr.w	r2, r2, #8
 80024ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0204 	bic.w	r2, r2, #4
 80024fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69d9      	ldr	r1, [r3, #28]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	61da      	str	r2, [r3, #28]
      break;
 8002510:	e062      	b.n	80025d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fb77 	bl	8002c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69da      	ldr	r2, [r3, #28]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800252c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69d9      	ldr	r1, [r3, #28]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	021a      	lsls	r2, r3, #8
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	61da      	str	r2, [r3, #28]
      break;
 8002552:	e041      	b.n	80025d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fbe0 	bl	8002d20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0208 	orr.w	r2, r2, #8
 800256e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002592:	e021      	b.n	80025d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fc24 	bl	8002de8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025be:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	021a      	lsls	r2, r3, #8
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80025d4:	e000      	b.n	80025d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80025d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop

080025ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_TIM_ConfigClockSource+0x18>
 8002600:	2302      	movs	r3, #2
 8002602:	e0c3      	b.n	800278c <HAL_TIM_ConfigClockSource+0x1a0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800262e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b70      	cmp	r3, #112	; 0x70
 800263e:	d038      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0xc6>
 8002640:	2b70      	cmp	r3, #112	; 0x70
 8002642:	d815      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x84>
 8002644:	2b30      	cmp	r3, #48	; 0x30
 8002646:	f000 808e 	beq.w	8002766 <HAL_TIM_ConfigClockSource+0x17a>
 800264a:	2b30      	cmp	r3, #48	; 0x30
 800264c:	d809      	bhi.n	8002662 <HAL_TIM_ConfigClockSource+0x76>
 800264e:	2b10      	cmp	r3, #16
 8002650:	f000 8089 	beq.w	8002766 <HAL_TIM_ConfigClockSource+0x17a>
 8002654:	2b20      	cmp	r3, #32
 8002656:	f000 8086 	beq.w	8002766 <HAL_TIM_ConfigClockSource+0x17a>
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8083 	beq.w	8002766 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002660:	e08b      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8002662:	2b50      	cmp	r3, #80	; 0x50
 8002664:	d04f      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x11a>
 8002666:	2b60      	cmp	r3, #96	; 0x60
 8002668:	d05d      	beq.n	8002726 <HAL_TIM_ConfigClockSource+0x13a>
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d06b      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 800266e:	e084      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8002670:	4a48      	ldr	r2, [pc, #288]	; (8002794 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d077      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x17a>
 8002676:	4a47      	ldr	r2, [pc, #284]	; (8002794 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d809      	bhi.n	8002690 <HAL_TIM_ConfigClockSource+0xa4>
 800267c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002680:	d02e      	beq.n	80026e0 <HAL_TIM_ConfigClockSource+0xf4>
 8002682:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002686:	d06e      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x17a>
 8002688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268c:	d074      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 800268e:	e074      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8002690:	4a41      	ldr	r2, [pc, #260]	; (8002798 <HAL_TIM_ConfigClockSource+0x1ac>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d067      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x17a>
 8002696:	4a40      	ldr	r2, [pc, #256]	; (8002798 <HAL_TIM_ConfigClockSource+0x1ac>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d803      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0xb8>
 800269c:	4a3f      	ldr	r2, [pc, #252]	; (800279c <HAL_TIM_ConfigClockSource+0x1b0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d061      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80026a2:	e06a      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80026a4:	4a3e      	ldr	r2, [pc, #248]	; (80027a0 <HAL_TIM_ConfigClockSource+0x1b4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d05d      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x17a>
 80026aa:	4a3e      	ldr	r2, [pc, #248]	; (80027a4 <HAL_TIM_ConfigClockSource+0x1b8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d05a      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80026b0:	e063      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6899      	ldr	r1, [r3, #8]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f000 fc73 	bl	8002fac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	609a      	str	r2, [r3, #8]
      break;
 80026de:	e04c      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6899      	ldr	r1, [r3, #8]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f000 fc5c 	bl	8002fac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002702:	609a      	str	r2, [r3, #8]
      break;
 8002704:	e039      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6859      	ldr	r1, [r3, #4]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	461a      	mov	r2, r3
 8002714:	f000 fbce 	bl	8002eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2150      	movs	r1, #80	; 0x50
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fc27 	bl	8002f72 <TIM_ITRx_SetConfig>
      break;
 8002724:	e029      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	461a      	mov	r2, r3
 8002734:	f000 fbed 	bl	8002f12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2160      	movs	r1, #96	; 0x60
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fc17 	bl	8002f72 <TIM_ITRx_SetConfig>
      break;
 8002744:	e019      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	461a      	mov	r2, r3
 8002754:	f000 fbae 	bl	8002eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2140      	movs	r1, #64	; 0x40
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fc07 	bl	8002f72 <TIM_ITRx_SetConfig>
      break;
 8002764:	e009      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f000 fbfe 	bl	8002f72 <TIM_ITRx_SetConfig>
      break;
 8002776:	e000      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8002778:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	00100020 	.word	0x00100020
 8002798:	00100040 	.word	0x00100040
 800279c:	00100030 	.word	0x00100030
 80027a0:	00100060 	.word	0x00100060
 80027a4:	00100070 	.word	0x00100070

080027a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a3c      	ldr	r2, [pc, #240]	; (80028ac <TIM_Base_SetConfig+0x104>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00f      	beq.n	80027e0 <TIM_Base_SetConfig+0x38>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c6:	d00b      	beq.n	80027e0 <TIM_Base_SetConfig+0x38>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a39      	ldr	r2, [pc, #228]	; (80028b0 <TIM_Base_SetConfig+0x108>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d007      	beq.n	80027e0 <TIM_Base_SetConfig+0x38>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a38      	ldr	r2, [pc, #224]	; (80028b4 <TIM_Base_SetConfig+0x10c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d003      	beq.n	80027e0 <TIM_Base_SetConfig+0x38>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a37      	ldr	r2, [pc, #220]	; (80028b8 <TIM_Base_SetConfig+0x110>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d108      	bne.n	80027f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a2d      	ldr	r2, [pc, #180]	; (80028ac <TIM_Base_SetConfig+0x104>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01b      	beq.n	8002832 <TIM_Base_SetConfig+0x8a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d017      	beq.n	8002832 <TIM_Base_SetConfig+0x8a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a2a      	ldr	r2, [pc, #168]	; (80028b0 <TIM_Base_SetConfig+0x108>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <TIM_Base_SetConfig+0x8a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <TIM_Base_SetConfig+0x10c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00f      	beq.n	8002832 <TIM_Base_SetConfig+0x8a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a28      	ldr	r2, [pc, #160]	; (80028b8 <TIM_Base_SetConfig+0x110>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00b      	beq.n	8002832 <TIM_Base_SetConfig+0x8a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a27      	ldr	r2, [pc, #156]	; (80028bc <TIM_Base_SetConfig+0x114>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <TIM_Base_SetConfig+0x8a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a26      	ldr	r2, [pc, #152]	; (80028c0 <TIM_Base_SetConfig+0x118>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d003      	beq.n	8002832 <TIM_Base_SetConfig+0x8a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a25      	ldr	r2, [pc, #148]	; (80028c4 <TIM_Base_SetConfig+0x11c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d108      	bne.n	8002844 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a10      	ldr	r2, [pc, #64]	; (80028ac <TIM_Base_SetConfig+0x104>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00f      	beq.n	8002890 <TIM_Base_SetConfig+0xe8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <TIM_Base_SetConfig+0x110>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00b      	beq.n	8002890 <TIM_Base_SetConfig+0xe8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <TIM_Base_SetConfig+0x114>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <TIM_Base_SetConfig+0xe8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <TIM_Base_SetConfig+0x118>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <TIM_Base_SetConfig+0xe8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <TIM_Base_SetConfig+0x11c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d103      	bne.n	8002898 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	615a      	str	r2, [r3, #20]
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40000800 	.word	0x40000800
 80028b8:	40013400 	.word	0x40013400
 80028bc:	40014000 	.word	0x40014000
 80028c0:	40014400 	.word	0x40014400
 80028c4:	40014800 	.word	0x40014800

080028c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f023 0201 	bic.w	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0303 	bic.w	r3, r3, #3
 8002902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f023 0302 	bic.w	r3, r3, #2
 8002914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a2c      	ldr	r2, [pc, #176]	; (80029d4 <TIM_OC1_SetConfig+0x10c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00f      	beq.n	8002948 <TIM_OC1_SetConfig+0x80>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <TIM_OC1_SetConfig+0x110>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00b      	beq.n	8002948 <TIM_OC1_SetConfig+0x80>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <TIM_OC1_SetConfig+0x114>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d007      	beq.n	8002948 <TIM_OC1_SetConfig+0x80>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <TIM_OC1_SetConfig+0x118>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d003      	beq.n	8002948 <TIM_OC1_SetConfig+0x80>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a28      	ldr	r2, [pc, #160]	; (80029e4 <TIM_OC1_SetConfig+0x11c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d10c      	bne.n	8002962 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f023 0308 	bic.w	r3, r3, #8
 800294e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f023 0304 	bic.w	r3, r3, #4
 8002960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <TIM_OC1_SetConfig+0x10c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00f      	beq.n	800298a <TIM_OC1_SetConfig+0xc2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <TIM_OC1_SetConfig+0x110>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00b      	beq.n	800298a <TIM_OC1_SetConfig+0xc2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <TIM_OC1_SetConfig+0x114>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <TIM_OC1_SetConfig+0xc2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <TIM_OC1_SetConfig+0x118>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d003      	beq.n	800298a <TIM_OC1_SetConfig+0xc2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <TIM_OC1_SetConfig+0x11c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d111      	bne.n	80029ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	621a      	str	r2, [r3, #32]
}
 80029c8:	bf00      	nop
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40013400 	.word	0x40013400
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40014400 	.word	0x40014400
 80029e4:	40014800 	.word	0x40014800

080029e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0210 	bic.w	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0320 	bic.w	r3, r3, #32
 8002a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <TIM_OC2_SetConfig+0x100>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <TIM_OC2_SetConfig+0x6c>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a27      	ldr	r2, [pc, #156]	; (8002aec <TIM_OC2_SetConfig+0x104>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d10d      	bne.n	8002a70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <TIM_OC2_SetConfig+0x100>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00f      	beq.n	8002a98 <TIM_OC2_SetConfig+0xb0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <TIM_OC2_SetConfig+0x104>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00b      	beq.n	8002a98 <TIM_OC2_SetConfig+0xb0>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <TIM_OC2_SetConfig+0x108>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d007      	beq.n	8002a98 <TIM_OC2_SetConfig+0xb0>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a1a      	ldr	r2, [pc, #104]	; (8002af4 <TIM_OC2_SetConfig+0x10c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d003      	beq.n	8002a98 <TIM_OC2_SetConfig+0xb0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <TIM_OC2_SetConfig+0x110>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d113      	bne.n	8002ac0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	621a      	str	r2, [r3, #32]
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40013400 	.word	0x40013400
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40014400 	.word	0x40014400
 8002af8:	40014800 	.word	0x40014800

08002afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0303 	bic.w	r3, r3, #3
 8002b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <TIM_OC3_SetConfig+0xfc>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d003      	beq.n	8002b66 <TIM_OC3_SetConfig+0x6a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <TIM_OC3_SetConfig+0x100>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d10d      	bne.n	8002b82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <TIM_OC3_SetConfig+0xfc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00f      	beq.n	8002baa <TIM_OC3_SetConfig+0xae>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <TIM_OC3_SetConfig+0x100>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00b      	beq.n	8002baa <TIM_OC3_SetConfig+0xae>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <TIM_OC3_SetConfig+0x104>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <TIM_OC3_SetConfig+0xae>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <TIM_OC3_SetConfig+0x108>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d003      	beq.n	8002baa <TIM_OC3_SetConfig+0xae>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <TIM_OC3_SetConfig+0x10c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d113      	bne.n	8002bd2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	621a      	str	r2, [r3, #32]
}
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40013400 	.word	0x40013400
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800

08002c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	031b      	lsls	r3, r3, #12
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <TIM_OC4_SetConfig+0x100>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_OC4_SetConfig+0x6c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a27      	ldr	r2, [pc, #156]	; (8002d10 <TIM_OC4_SetConfig+0x104>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d10d      	bne.n	8002c94 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	031b      	lsls	r3, r3, #12
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <TIM_OC4_SetConfig+0x100>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00f      	beq.n	8002cbc <TIM_OC4_SetConfig+0xb0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <TIM_OC4_SetConfig+0x104>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00b      	beq.n	8002cbc <TIM_OC4_SetConfig+0xb0>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <TIM_OC4_SetConfig+0x108>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <TIM_OC4_SetConfig+0xb0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <TIM_OC4_SetConfig+0x10c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_OC4_SetConfig+0xb0>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a19      	ldr	r2, [pc, #100]	; (8002d1c <TIM_OC4_SetConfig+0x110>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d113      	bne.n	8002ce4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cc2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	019b      	lsls	r3, r3, #6
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	621a      	str	r2, [r3, #32]
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40013400 	.word	0x40013400
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40014400 	.word	0x40014400
 8002d1c:	40014800 	.word	0x40014800

08002d20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <TIM_OC5_SetConfig+0xb4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00f      	beq.n	8002d9a <TIM_OC5_SetConfig+0x7a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <TIM_OC5_SetConfig+0xb8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00b      	beq.n	8002d9a <TIM_OC5_SetConfig+0x7a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <TIM_OC5_SetConfig+0xbc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <TIM_OC5_SetConfig+0x7a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <TIM_OC5_SetConfig+0xc0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d003      	beq.n	8002d9a <TIM_OC5_SetConfig+0x7a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <TIM_OC5_SetConfig+0xc4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d109      	bne.n	8002dae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	621a      	str	r2, [r3, #32]
}
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	40013400 	.word	0x40013400
 8002ddc:	40014000 	.word	0x40014000
 8002de0:	40014400 	.word	0x40014400
 8002de4:	40014800 	.word	0x40014800

08002de8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	051b      	lsls	r3, r3, #20
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <TIM_OC6_SetConfig+0xb8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00f      	beq.n	8002e64 <TIM_OC6_SetConfig+0x7c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <TIM_OC6_SetConfig+0xbc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00b      	beq.n	8002e64 <TIM_OC6_SetConfig+0x7c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <TIM_OC6_SetConfig+0xc0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d007      	beq.n	8002e64 <TIM_OC6_SetConfig+0x7c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <TIM_OC6_SetConfig+0xc4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d003      	beq.n	8002e64 <TIM_OC6_SetConfig+0x7c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <TIM_OC6_SetConfig+0xc8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d109      	bne.n	8002e78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	029b      	lsls	r3, r3, #10
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	621a      	str	r2, [r3, #32]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	40013400 	.word	0x40013400
 8002ea8:	40014000 	.word	0x40014000
 8002eac:	40014400 	.word	0x40014400
 8002eb0:	40014800 	.word	0x40014800

08002eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f023 0201 	bic.w	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f023 030a 	bic.w	r3, r3, #10
 8002ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	621a      	str	r2, [r3, #32]
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b087      	sub	sp, #28
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f023 0210 	bic.w	r2, r3, #16
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	031b      	lsls	r3, r3, #12
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	621a      	str	r2, [r3, #32]
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f043 0307 	orr.w	r3, r3, #7
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	021a      	lsls	r2, r3, #8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	609a      	str	r2, [r3, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	2201      	movs	r2, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	43db      	mvns	r3, r3
 800300e:	401a      	ands	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	fa01 f303 	lsl.w	r3, r1, r3
 8003024:	431a      	orrs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	621a      	str	r2, [r3, #32]
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <HAL_TIMEx_PWMN_Start+0x24>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e022      	b.n	80030a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d109      	bne.n	8003076 <HAL_TIMEx_PWMN_Start+0x3e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	e015      	b.n	80030a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d109      	bne.n	8003090 <HAL_TIMEx_PWMN_Start+0x58>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e008      	b.n	80030a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e040      	b.n	800312c <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d104      	bne.n	80030ba <HAL_TIMEx_PWMN_Start+0x82>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b8:	e013      	b.n	80030e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d104      	bne.n	80030ca <HAL_TIMEx_PWMN_Start+0x92>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c8:	e00b      	b.n	80030e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d104      	bne.n	80030da <HAL_TIMEx_PWMN_Start+0xa2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030d8:	e003      	b.n	80030e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2204      	movs	r2, #4
 80030e8:	6839      	ldr	r1, [r7, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f946 	bl	800337c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_TIMEx_PWMN_Start+0xfc>)
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b06      	cmp	r3, #6
 8003110:	d00b      	beq.n	800312a <HAL_TIMEx_PWMN_Start+0xf2>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d007      	beq.n	800312a <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0201 	orr.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	00010007 	.word	0x00010007

08003138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800314c:	2302      	movs	r3, #2
 800314e:	e065      	b.n	800321c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2c      	ldr	r2, [pc, #176]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2b      	ldr	r2, [pc, #172]	; (800322c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d108      	bne.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800318a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800319c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1b      	ldr	r2, [pc, #108]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d018      	beq.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c6:	d013      	beq.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a18      	ldr	r2, [pc, #96]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00e      	beq.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a17      	ldr	r2, [pc, #92]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a12      	ldr	r2, [pc, #72]	; (800322c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d004      	beq.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a13      	ldr	r2, [pc, #76]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d10c      	bne.n	800320a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40013400 	.word	0x40013400
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800
 8003238:	40014000 	.word	0x40014000

0800323c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003254:	2302      	movs	r3, #2
 8003256:	e087      	b.n	8003368 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4313      	orrs	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a27      	ldr	r2, [pc, #156]	; (8003374 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a25      	ldr	r2, [pc, #148]	; (8003378 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d106      	bne.n	80032f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d126      	bne.n	8003356 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	051b      	lsls	r3, r3, #20
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d004      	beq.n	8003348 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d106      	bne.n	8003356 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40013400 	.word	0x40013400

0800337c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	2204      	movs	r2, #4
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1a      	ldr	r2, [r3, #32]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	43db      	mvns	r3, r3
 800339e:	401a      	ands	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	fa01 f303 	lsl.w	r3, r1, r3
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	621a      	str	r2, [r3, #32]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e042      	b.n	800345e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd fafe 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0201 	bic.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f82d 	bl	8003468 <UART_SetConfig>
 800340e:	4603      	mov	r3, r0
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e022      	b.n	800345e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f001 f9db 	bl	80047dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003434:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003444:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f001 fa62 	bl	8004920 <UART_CheckIdleState>
 800345c:	4603      	mov	r3, r0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003468:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800346c:	b08a      	sub	sp, #40	; 0x28
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	4313      	orrs	r3, r2
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349c:	4313      	orrs	r3, r2
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4ba4      	ldr	r3, [pc, #656]	; (8003738 <UART_SetConfig+0x2d0>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a99      	ldr	r2, [pc, #612]	; (800373c <UART_SetConfig+0x2d4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e0:	4313      	orrs	r3, r2
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80034ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f023 010f 	bic.w	r1, r3, #15
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a8a      	ldr	r2, [pc, #552]	; (8003740 <UART_SetConfig+0x2d8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d126      	bne.n	800356a <UART_SetConfig+0x102>
 800351c:	4b89      	ldr	r3, [pc, #548]	; (8003744 <UART_SetConfig+0x2dc>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b03      	cmp	r3, #3
 8003528:	d81a      	bhi.n	8003560 <UART_SetConfig+0xf8>
 800352a:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <UART_SetConfig+0xc8>)
 800352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003530:	08003541 	.word	0x08003541
 8003534:	08003551 	.word	0x08003551
 8003538:	08003549 	.word	0x08003549
 800353c:	08003559 	.word	0x08003559
 8003540:	2301      	movs	r3, #1
 8003542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003546:	e0d6      	b.n	80036f6 <UART_SetConfig+0x28e>
 8003548:	2302      	movs	r3, #2
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354e:	e0d2      	b.n	80036f6 <UART_SetConfig+0x28e>
 8003550:	2304      	movs	r3, #4
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003556:	e0ce      	b.n	80036f6 <UART_SetConfig+0x28e>
 8003558:	2308      	movs	r3, #8
 800355a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355e:	e0ca      	b.n	80036f6 <UART_SetConfig+0x28e>
 8003560:	2310      	movs	r3, #16
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003566:	bf00      	nop
 8003568:	e0c5      	b.n	80036f6 <UART_SetConfig+0x28e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a76      	ldr	r2, [pc, #472]	; (8003748 <UART_SetConfig+0x2e0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d138      	bne.n	80035e6 <UART_SetConfig+0x17e>
 8003574:	4b73      	ldr	r3, [pc, #460]	; (8003744 <UART_SetConfig+0x2dc>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d82c      	bhi.n	80035dc <UART_SetConfig+0x174>
 8003582:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <UART_SetConfig+0x120>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	080035bd 	.word	0x080035bd
 800358c:	080035dd 	.word	0x080035dd
 8003590:	080035dd 	.word	0x080035dd
 8003594:	080035dd 	.word	0x080035dd
 8003598:	080035cd 	.word	0x080035cd
 800359c:	080035dd 	.word	0x080035dd
 80035a0:	080035dd 	.word	0x080035dd
 80035a4:	080035dd 	.word	0x080035dd
 80035a8:	080035c5 	.word	0x080035c5
 80035ac:	080035dd 	.word	0x080035dd
 80035b0:	080035dd 	.word	0x080035dd
 80035b4:	080035dd 	.word	0x080035dd
 80035b8:	080035d5 	.word	0x080035d5
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c2:	e098      	b.n	80036f6 <UART_SetConfig+0x28e>
 80035c4:	2302      	movs	r3, #2
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ca:	e094      	b.n	80036f6 <UART_SetConfig+0x28e>
 80035cc:	2304      	movs	r3, #4
 80035ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d2:	e090      	b.n	80036f6 <UART_SetConfig+0x28e>
 80035d4:	2308      	movs	r3, #8
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035da:	e08c      	b.n	80036f6 <UART_SetConfig+0x28e>
 80035dc:	2310      	movs	r3, #16
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e2:	bf00      	nop
 80035e4:	e087      	b.n	80036f6 <UART_SetConfig+0x28e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a58      	ldr	r2, [pc, #352]	; (800374c <UART_SetConfig+0x2e4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d125      	bne.n	800363c <UART_SetConfig+0x1d4>
 80035f0:	4b54      	ldr	r3, [pc, #336]	; (8003744 <UART_SetConfig+0x2dc>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d011      	beq.n	8003622 <UART_SetConfig+0x1ba>
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d802      	bhi.n	8003608 <UART_SetConfig+0x1a0>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <UART_SetConfig+0x1aa>
 8003606:	e014      	b.n	8003632 <UART_SetConfig+0x1ca>
 8003608:	2b20      	cmp	r3, #32
 800360a:	d006      	beq.n	800361a <UART_SetConfig+0x1b2>
 800360c:	2b30      	cmp	r3, #48	; 0x30
 800360e:	d00c      	beq.n	800362a <UART_SetConfig+0x1c2>
 8003610:	e00f      	b.n	8003632 <UART_SetConfig+0x1ca>
 8003612:	2300      	movs	r3, #0
 8003614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003618:	e06d      	b.n	80036f6 <UART_SetConfig+0x28e>
 800361a:	2302      	movs	r3, #2
 800361c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003620:	e069      	b.n	80036f6 <UART_SetConfig+0x28e>
 8003622:	2304      	movs	r3, #4
 8003624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003628:	e065      	b.n	80036f6 <UART_SetConfig+0x28e>
 800362a:	2308      	movs	r3, #8
 800362c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003630:	e061      	b.n	80036f6 <UART_SetConfig+0x28e>
 8003632:	2310      	movs	r3, #16
 8003634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003638:	bf00      	nop
 800363a:	e05c      	b.n	80036f6 <UART_SetConfig+0x28e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a43      	ldr	r2, [pc, #268]	; (8003750 <UART_SetConfig+0x2e8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d125      	bne.n	8003692 <UART_SetConfig+0x22a>
 8003646:	4b3f      	ldr	r3, [pc, #252]	; (8003744 <UART_SetConfig+0x2dc>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d011      	beq.n	8003678 <UART_SetConfig+0x210>
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d802      	bhi.n	800365e <UART_SetConfig+0x1f6>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <UART_SetConfig+0x200>
 800365c:	e014      	b.n	8003688 <UART_SetConfig+0x220>
 800365e:	2b80      	cmp	r3, #128	; 0x80
 8003660:	d006      	beq.n	8003670 <UART_SetConfig+0x208>
 8003662:	2bc0      	cmp	r3, #192	; 0xc0
 8003664:	d00c      	beq.n	8003680 <UART_SetConfig+0x218>
 8003666:	e00f      	b.n	8003688 <UART_SetConfig+0x220>
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366e:	e042      	b.n	80036f6 <UART_SetConfig+0x28e>
 8003670:	2302      	movs	r3, #2
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003676:	e03e      	b.n	80036f6 <UART_SetConfig+0x28e>
 8003678:	2304      	movs	r3, #4
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367e:	e03a      	b.n	80036f6 <UART_SetConfig+0x28e>
 8003680:	2308      	movs	r3, #8
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003686:	e036      	b.n	80036f6 <UART_SetConfig+0x28e>
 8003688:	2310      	movs	r3, #16
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368e:	bf00      	nop
 8003690:	e031      	b.n	80036f6 <UART_SetConfig+0x28e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a29      	ldr	r2, [pc, #164]	; (800373c <UART_SetConfig+0x2d4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d129      	bne.n	80036f0 <UART_SetConfig+0x288>
 800369c:	4b29      	ldr	r3, [pc, #164]	; (8003744 <UART_SetConfig+0x2dc>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036aa:	d014      	beq.n	80036d6 <UART_SetConfig+0x26e>
 80036ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b0:	d802      	bhi.n	80036b8 <UART_SetConfig+0x250>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <UART_SetConfig+0x25e>
 80036b6:	e016      	b.n	80036e6 <UART_SetConfig+0x27e>
 80036b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036bc:	d007      	beq.n	80036ce <UART_SetConfig+0x266>
 80036be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036c2:	d00c      	beq.n	80036de <UART_SetConfig+0x276>
 80036c4:	e00f      	b.n	80036e6 <UART_SetConfig+0x27e>
 80036c6:	2300      	movs	r3, #0
 80036c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036cc:	e013      	b.n	80036f6 <UART_SetConfig+0x28e>
 80036ce:	2302      	movs	r3, #2
 80036d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d4:	e00f      	b.n	80036f6 <UART_SetConfig+0x28e>
 80036d6:	2304      	movs	r3, #4
 80036d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036dc:	e00b      	b.n	80036f6 <UART_SetConfig+0x28e>
 80036de:	2308      	movs	r3, #8
 80036e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e4:	e007      	b.n	80036f6 <UART_SetConfig+0x28e>
 80036e6:	2310      	movs	r3, #16
 80036e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ec:	bf00      	nop
 80036ee:	e002      	b.n	80036f6 <UART_SetConfig+0x28e>
 80036f0:	2310      	movs	r3, #16
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a10      	ldr	r2, [pc, #64]	; (800373c <UART_SetConfig+0x2d4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	f040 842e 	bne.w	8003f5e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003706:	2b08      	cmp	r3, #8
 8003708:	f200 8169 	bhi.w	80039de <UART_SetConfig+0x576>
 800370c:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <UART_SetConfig+0x2ac>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003755 	.word	0x08003755
 8003718:	080039df 	.word	0x080039df
 800371c:	080037f7 	.word	0x080037f7
 8003720:	080039df 	.word	0x080039df
 8003724:	0800388f 	.word	0x0800388f
 8003728:	080039df 	.word	0x080039df
 800372c:	080039df 	.word	0x080039df
 8003730:	080039df 	.word	0x080039df
 8003734:	08003931 	.word	0x08003931
 8003738:	cfff69f3 	.word	0xcfff69f3
 800373c:	40008000 	.word	0x40008000
 8003740:	40013800 	.word	0x40013800
 8003744:	40021000 	.word	0x40021000
 8003748:	40004400 	.word	0x40004400
 800374c:	40004800 	.word	0x40004800
 8003750:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003754:	f7fe fa4e 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 8003758:	4602      	mov	r2, r0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	2b00      	cmp	r3, #0
 8003760:	d044      	beq.n	80037ec <UART_SetConfig+0x384>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2b01      	cmp	r3, #1
 8003768:	d03e      	beq.n	80037e8 <UART_SetConfig+0x380>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2b02      	cmp	r3, #2
 8003770:	d038      	beq.n	80037e4 <UART_SetConfig+0x37c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	2b03      	cmp	r3, #3
 8003778:	d032      	beq.n	80037e0 <UART_SetConfig+0x378>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b04      	cmp	r3, #4
 8003780:	d02c      	beq.n	80037dc <UART_SetConfig+0x374>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b05      	cmp	r3, #5
 8003788:	d026      	beq.n	80037d8 <UART_SetConfig+0x370>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2b06      	cmp	r3, #6
 8003790:	d020      	beq.n	80037d4 <UART_SetConfig+0x36c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2b07      	cmp	r3, #7
 8003798:	d01a      	beq.n	80037d0 <UART_SetConfig+0x368>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d014      	beq.n	80037cc <UART_SetConfig+0x364>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	2b09      	cmp	r3, #9
 80037a8:	d00e      	beq.n	80037c8 <UART_SetConfig+0x360>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2b0a      	cmp	r3, #10
 80037b0:	d008      	beq.n	80037c4 <UART_SetConfig+0x35c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b0b      	cmp	r3, #11
 80037b8:	d102      	bne.n	80037c0 <UART_SetConfig+0x358>
 80037ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037be:	e016      	b.n	80037ee <UART_SetConfig+0x386>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e014      	b.n	80037ee <UART_SetConfig+0x386>
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	e012      	b.n	80037ee <UART_SetConfig+0x386>
 80037c8:	2340      	movs	r3, #64	; 0x40
 80037ca:	e010      	b.n	80037ee <UART_SetConfig+0x386>
 80037cc:	2320      	movs	r3, #32
 80037ce:	e00e      	b.n	80037ee <UART_SetConfig+0x386>
 80037d0:	2310      	movs	r3, #16
 80037d2:	e00c      	b.n	80037ee <UART_SetConfig+0x386>
 80037d4:	230c      	movs	r3, #12
 80037d6:	e00a      	b.n	80037ee <UART_SetConfig+0x386>
 80037d8:	230a      	movs	r3, #10
 80037da:	e008      	b.n	80037ee <UART_SetConfig+0x386>
 80037dc:	2308      	movs	r3, #8
 80037de:	e006      	b.n	80037ee <UART_SetConfig+0x386>
 80037e0:	2306      	movs	r3, #6
 80037e2:	e004      	b.n	80037ee <UART_SetConfig+0x386>
 80037e4:	2304      	movs	r3, #4
 80037e6:	e002      	b.n	80037ee <UART_SetConfig+0x386>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e000      	b.n	80037ee <UART_SetConfig+0x386>
 80037ec:	2301      	movs	r3, #1
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	617b      	str	r3, [r7, #20]
        break;
 80037f4:	e0f6      	b.n	80039e4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d044      	beq.n	8003888 <UART_SetConfig+0x420>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	2b01      	cmp	r3, #1
 8003804:	d03e      	beq.n	8003884 <UART_SetConfig+0x41c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	2b02      	cmp	r3, #2
 800380c:	d038      	beq.n	8003880 <UART_SetConfig+0x418>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2b03      	cmp	r3, #3
 8003814:	d032      	beq.n	800387c <UART_SetConfig+0x414>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b04      	cmp	r3, #4
 800381c:	d02c      	beq.n	8003878 <UART_SetConfig+0x410>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2b05      	cmp	r3, #5
 8003824:	d026      	beq.n	8003874 <UART_SetConfig+0x40c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2b06      	cmp	r3, #6
 800382c:	d020      	beq.n	8003870 <UART_SetConfig+0x408>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b07      	cmp	r3, #7
 8003834:	d01a      	beq.n	800386c <UART_SetConfig+0x404>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	2b08      	cmp	r3, #8
 800383c:	d014      	beq.n	8003868 <UART_SetConfig+0x400>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	2b09      	cmp	r3, #9
 8003844:	d00e      	beq.n	8003864 <UART_SetConfig+0x3fc>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b0a      	cmp	r3, #10
 800384c:	d008      	beq.n	8003860 <UART_SetConfig+0x3f8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2b0b      	cmp	r3, #11
 8003854:	d102      	bne.n	800385c <UART_SetConfig+0x3f4>
 8003856:	f24f 4324 	movw	r3, #62500	; 0xf424
 800385a:	e016      	b.n	800388a <UART_SetConfig+0x422>
 800385c:	4ba1      	ldr	r3, [pc, #644]	; (8003ae4 <UART_SetConfig+0x67c>)
 800385e:	e014      	b.n	800388a <UART_SetConfig+0x422>
 8003860:	4ba1      	ldr	r3, [pc, #644]	; (8003ae8 <UART_SetConfig+0x680>)
 8003862:	e012      	b.n	800388a <UART_SetConfig+0x422>
 8003864:	4ba1      	ldr	r3, [pc, #644]	; (8003aec <UART_SetConfig+0x684>)
 8003866:	e010      	b.n	800388a <UART_SetConfig+0x422>
 8003868:	4ba1      	ldr	r3, [pc, #644]	; (8003af0 <UART_SetConfig+0x688>)
 800386a:	e00e      	b.n	800388a <UART_SetConfig+0x422>
 800386c:	4ba1      	ldr	r3, [pc, #644]	; (8003af4 <UART_SetConfig+0x68c>)
 800386e:	e00c      	b.n	800388a <UART_SetConfig+0x422>
 8003870:	4ba1      	ldr	r3, [pc, #644]	; (8003af8 <UART_SetConfig+0x690>)
 8003872:	e00a      	b.n	800388a <UART_SetConfig+0x422>
 8003874:	4ba1      	ldr	r3, [pc, #644]	; (8003afc <UART_SetConfig+0x694>)
 8003876:	e008      	b.n	800388a <UART_SetConfig+0x422>
 8003878:	4ba1      	ldr	r3, [pc, #644]	; (8003b00 <UART_SetConfig+0x698>)
 800387a:	e006      	b.n	800388a <UART_SetConfig+0x422>
 800387c:	4ba1      	ldr	r3, [pc, #644]	; (8003b04 <UART_SetConfig+0x69c>)
 800387e:	e004      	b.n	800388a <UART_SetConfig+0x422>
 8003880:	4ba1      	ldr	r3, [pc, #644]	; (8003b08 <UART_SetConfig+0x6a0>)
 8003882:	e002      	b.n	800388a <UART_SetConfig+0x422>
 8003884:	4ba1      	ldr	r3, [pc, #644]	; (8003b0c <UART_SetConfig+0x6a4>)
 8003886:	e000      	b.n	800388a <UART_SetConfig+0x422>
 8003888:	4b96      	ldr	r3, [pc, #600]	; (8003ae4 <UART_SetConfig+0x67c>)
 800388a:	617b      	str	r3, [r7, #20]
        break;
 800388c:	e0aa      	b.n	80039e4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800388e:	f7fe f943 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8003892:	4602      	mov	r2, r0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d044      	beq.n	8003926 <UART_SetConfig+0x4be>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d03e      	beq.n	8003922 <UART_SetConfig+0x4ba>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d038      	beq.n	800391e <UART_SetConfig+0x4b6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d032      	beq.n	800391a <UART_SetConfig+0x4b2>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d02c      	beq.n	8003916 <UART_SetConfig+0x4ae>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d026      	beq.n	8003912 <UART_SetConfig+0x4aa>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2b06      	cmp	r3, #6
 80038ca:	d020      	beq.n	800390e <UART_SetConfig+0x4a6>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b07      	cmp	r3, #7
 80038d2:	d01a      	beq.n	800390a <UART_SetConfig+0x4a2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d014      	beq.n	8003906 <UART_SetConfig+0x49e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2b09      	cmp	r3, #9
 80038e2:	d00e      	beq.n	8003902 <UART_SetConfig+0x49a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2b0a      	cmp	r3, #10
 80038ea:	d008      	beq.n	80038fe <UART_SetConfig+0x496>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	2b0b      	cmp	r3, #11
 80038f2:	d102      	bne.n	80038fa <UART_SetConfig+0x492>
 80038f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038f8:	e016      	b.n	8003928 <UART_SetConfig+0x4c0>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e014      	b.n	8003928 <UART_SetConfig+0x4c0>
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	e012      	b.n	8003928 <UART_SetConfig+0x4c0>
 8003902:	2340      	movs	r3, #64	; 0x40
 8003904:	e010      	b.n	8003928 <UART_SetConfig+0x4c0>
 8003906:	2320      	movs	r3, #32
 8003908:	e00e      	b.n	8003928 <UART_SetConfig+0x4c0>
 800390a:	2310      	movs	r3, #16
 800390c:	e00c      	b.n	8003928 <UART_SetConfig+0x4c0>
 800390e:	230c      	movs	r3, #12
 8003910:	e00a      	b.n	8003928 <UART_SetConfig+0x4c0>
 8003912:	230a      	movs	r3, #10
 8003914:	e008      	b.n	8003928 <UART_SetConfig+0x4c0>
 8003916:	2308      	movs	r3, #8
 8003918:	e006      	b.n	8003928 <UART_SetConfig+0x4c0>
 800391a:	2306      	movs	r3, #6
 800391c:	e004      	b.n	8003928 <UART_SetConfig+0x4c0>
 800391e:	2304      	movs	r3, #4
 8003920:	e002      	b.n	8003928 <UART_SetConfig+0x4c0>
 8003922:	2302      	movs	r3, #2
 8003924:	e000      	b.n	8003928 <UART_SetConfig+0x4c0>
 8003926:	2301      	movs	r3, #1
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]
        break;
 800392e:	e059      	b.n	80039e4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	2b00      	cmp	r3, #0
 8003936:	d04e      	beq.n	80039d6 <UART_SetConfig+0x56e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	2b01      	cmp	r3, #1
 800393e:	d047      	beq.n	80039d0 <UART_SetConfig+0x568>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	2b02      	cmp	r3, #2
 8003946:	d040      	beq.n	80039ca <UART_SetConfig+0x562>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	2b03      	cmp	r3, #3
 800394e:	d039      	beq.n	80039c4 <UART_SetConfig+0x55c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	2b04      	cmp	r3, #4
 8003956:	d032      	beq.n	80039be <UART_SetConfig+0x556>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	2b05      	cmp	r3, #5
 800395e:	d02b      	beq.n	80039b8 <UART_SetConfig+0x550>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	2b06      	cmp	r3, #6
 8003966:	d024      	beq.n	80039b2 <UART_SetConfig+0x54a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2b07      	cmp	r3, #7
 800396e:	d01d      	beq.n	80039ac <UART_SetConfig+0x544>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	2b08      	cmp	r3, #8
 8003976:	d016      	beq.n	80039a6 <UART_SetConfig+0x53e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	2b09      	cmp	r3, #9
 800397e:	d00f      	beq.n	80039a0 <UART_SetConfig+0x538>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	2b0a      	cmp	r3, #10
 8003986:	d008      	beq.n	800399a <UART_SetConfig+0x532>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	2b0b      	cmp	r3, #11
 800398e:	d101      	bne.n	8003994 <UART_SetConfig+0x52c>
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	e022      	b.n	80039da <UART_SetConfig+0x572>
 8003994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003998:	e01f      	b.n	80039da <UART_SetConfig+0x572>
 800399a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800399e:	e01c      	b.n	80039da <UART_SetConfig+0x572>
 80039a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039a4:	e019      	b.n	80039da <UART_SetConfig+0x572>
 80039a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039aa:	e016      	b.n	80039da <UART_SetConfig+0x572>
 80039ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039b0:	e013      	b.n	80039da <UART_SetConfig+0x572>
 80039b2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80039b6:	e010      	b.n	80039da <UART_SetConfig+0x572>
 80039b8:	f640 43cc 	movw	r3, #3276	; 0xccc
 80039bc:	e00d      	b.n	80039da <UART_SetConfig+0x572>
 80039be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c2:	e00a      	b.n	80039da <UART_SetConfig+0x572>
 80039c4:	f241 5355 	movw	r3, #5461	; 0x1555
 80039c8:	e007      	b.n	80039da <UART_SetConfig+0x572>
 80039ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039ce:	e004      	b.n	80039da <UART_SetConfig+0x572>
 80039d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039d4:	e001      	b.n	80039da <UART_SetConfig+0x572>
 80039d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039da:	617b      	str	r3, [r7, #20]
        break;
 80039dc:	e002      	b.n	80039e4 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	76fb      	strb	r3, [r7, #27]
        break;
 80039e2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 86cd 	beq.w	8004786 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d305      	bcc.n	8003a08 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d903      	bls.n	8003a10 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	76fb      	strb	r3, [r7, #27]
 8003a0c:	f000 bebb 	b.w	8004786 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8003a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	f200 828d 	bhi.w	8003f34 <UART_SetConfig+0xacc>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <UART_SetConfig+0x5b8>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a45 	.word	0x08003a45
 8003a24:	08003f35 	.word	0x08003f35
 8003a28:	08003baf 	.word	0x08003baf
 8003a2c:	08003f35 	.word	0x08003f35
 8003a30:	08003ca5 	.word	0x08003ca5
 8003a34:	08003f35 	.word	0x08003f35
 8003a38:	08003f35 	.word	0x08003f35
 8003a3c:	08003f35 	.word	0x08003f35
 8003a40:	08003de3 	.word	0x08003de3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003a44:	f7fe f8d6 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 8003a48:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d07d      	beq.n	8003b56 <UART_SetConfig+0x6ee>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d074      	beq.n	8003b4c <UART_SetConfig+0x6e4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d06b      	beq.n	8003b42 <UART_SetConfig+0x6da>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d062      	beq.n	8003b38 <UART_SetConfig+0x6d0>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d059      	beq.n	8003b2e <UART_SetConfig+0x6c6>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d050      	beq.n	8003b24 <UART_SetConfig+0x6bc>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d047      	beq.n	8003b1a <UART_SetConfig+0x6b2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2b07      	cmp	r3, #7
 8003a90:	d03e      	beq.n	8003b10 <UART_SetConfig+0x6a8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d01f      	beq.n	8003ada <UART_SetConfig+0x672>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2b09      	cmp	r3, #9
 8003aa0:	d016      	beq.n	8003ad0 <UART_SetConfig+0x668>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2b0a      	cmp	r3, #10
 8003aa8:	d00d      	beq.n	8003ac6 <UART_SetConfig+0x65e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	2b0b      	cmp	r3, #11
 8003ab0:	d104      	bne.n	8003abc <UART_SetConfig+0x654>
 8003ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ab6:	f04f 0400 	mov.w	r4, #0
 8003aba:	e050      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003abc:	f04f 0301 	mov.w	r3, #1
 8003ac0:	f04f 0400 	mov.w	r4, #0
 8003ac4:	e04b      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003ac6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003aca:	f04f 0400 	mov.w	r4, #0
 8003ace:	e046      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003ad0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003ad4:	f04f 0400 	mov.w	r4, #0
 8003ad8:	e041      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003ada:	f04f 0320 	mov.w	r3, #32
 8003ade:	f04f 0400 	mov.w	r4, #0
 8003ae2:	e03c      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003ae4:	00f42400 	.word	0x00f42400
 8003ae8:	0001e848 	.word	0x0001e848
 8003aec:	0003d090 	.word	0x0003d090
 8003af0:	0007a120 	.word	0x0007a120
 8003af4:	000f4240 	.word	0x000f4240
 8003af8:	00145855 	.word	0x00145855
 8003afc:	00186a00 	.word	0x00186a00
 8003b00:	001e8480 	.word	0x001e8480
 8003b04:	0028b0aa 	.word	0x0028b0aa
 8003b08:	003d0900 	.word	0x003d0900
 8003b0c:	007a1200 	.word	0x007a1200
 8003b10:	f04f 0310 	mov.w	r3, #16
 8003b14:	f04f 0400 	mov.w	r4, #0
 8003b18:	e021      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003b1a:	f04f 030c 	mov.w	r3, #12
 8003b1e:	f04f 0400 	mov.w	r4, #0
 8003b22:	e01c      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003b24:	f04f 030a 	mov.w	r3, #10
 8003b28:	f04f 0400 	mov.w	r4, #0
 8003b2c:	e017      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003b2e:	f04f 0308 	mov.w	r3, #8
 8003b32:	f04f 0400 	mov.w	r4, #0
 8003b36:	e012      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003b38:	f04f 0306 	mov.w	r3, #6
 8003b3c:	f04f 0400 	mov.w	r4, #0
 8003b40:	e00d      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003b42:	f04f 0304 	mov.w	r3, #4
 8003b46:	f04f 0400 	mov.w	r4, #0
 8003b4a:	e008      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003b4c:	f04f 0302 	mov.w	r3, #2
 8003b50:	f04f 0400 	mov.w	r4, #0
 8003b54:	e003      	b.n	8003b5e <UART_SetConfig+0x6f6>
 8003b56:	f04f 0301 	mov.w	r3, #1
 8003b5a:	f04f 0400 	mov.w	r4, #0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4623      	mov	r3, r4
 8003b62:	f7fc fb59 	bl	8000218 <__aeabi_uldivmod>
 8003b66:	4603      	mov	r3, r0
 8003b68:	460c      	mov	r4, r1
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	f04f 0400 	mov.w	r4, #0
 8003b76:	0214      	lsls	r4, r2, #8
 8003b78:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b7c:	020b      	lsls	r3, r1, #8
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6852      	ldr	r2, [r2, #4]
 8003b82:	0852      	lsrs	r2, r2, #1
 8003b84:	4611      	mov	r1, r2
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	eb13 0b01 	adds.w	fp, r3, r1
 8003b8e:	eb44 0c02 	adc.w	ip, r4, r2
 8003b92:	4658      	mov	r0, fp
 8003b94:	4661      	mov	r1, ip
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f04f 0400 	mov.w	r4, #0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4623      	mov	r3, r4
 8003ba2:	f7fc fb39 	bl	8000218 <__aeabi_uldivmod>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	460c      	mov	r4, r1
 8003baa:	61fb      	str	r3, [r7, #28]
            break;
 8003bac:	e1c5      	b.n	8003f3a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d05b      	beq.n	8003c6e <UART_SetConfig+0x806>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d053      	beq.n	8003c66 <UART_SetConfig+0x7fe>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d04b      	beq.n	8003c5e <UART_SetConfig+0x7f6>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d043      	beq.n	8003c56 <UART_SetConfig+0x7ee>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d03b      	beq.n	8003c4e <UART_SetConfig+0x7e6>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d033      	beq.n	8003c46 <UART_SetConfig+0x7de>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d02b      	beq.n	8003c3e <UART_SetConfig+0x7d6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2b07      	cmp	r3, #7
 8003bec:	d023      	beq.n	8003c36 <UART_SetConfig+0x7ce>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d01b      	beq.n	8003c2e <UART_SetConfig+0x7c6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b09      	cmp	r3, #9
 8003bfc:	d013      	beq.n	8003c26 <UART_SetConfig+0x7be>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	2b0a      	cmp	r3, #10
 8003c04:	d00b      	beq.n	8003c1e <UART_SetConfig+0x7b6>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2b0b      	cmp	r3, #11
 8003c0c:	d103      	bne.n	8003c16 <UART_SetConfig+0x7ae>
 8003c0e:	4bae      	ldr	r3, [pc, #696]	; (8003ec8 <UART_SetConfig+0xa60>)
 8003c10:	f04f 0400 	mov.w	r4, #0
 8003c14:	e02e      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c16:	4bad      	ldr	r3, [pc, #692]	; (8003ecc <UART_SetConfig+0xa64>)
 8003c18:	f04f 0400 	mov.w	r4, #0
 8003c1c:	e02a      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c1e:	4bac      	ldr	r3, [pc, #688]	; (8003ed0 <UART_SetConfig+0xa68>)
 8003c20:	f04f 0400 	mov.w	r4, #0
 8003c24:	e026      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c26:	4bab      	ldr	r3, [pc, #684]	; (8003ed4 <UART_SetConfig+0xa6c>)
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	e022      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c2e:	4baa      	ldr	r3, [pc, #680]	; (8003ed8 <UART_SetConfig+0xa70>)
 8003c30:	f04f 0400 	mov.w	r4, #0
 8003c34:	e01e      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c36:	4ba9      	ldr	r3, [pc, #676]	; (8003edc <UART_SetConfig+0xa74>)
 8003c38:	f04f 0400 	mov.w	r4, #0
 8003c3c:	e01a      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c3e:	a49e      	add	r4, pc, #632	; (adr r4, 8003eb8 <UART_SetConfig+0xa50>)
 8003c40:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003c44:	e016      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c46:	4ba6      	ldr	r3, [pc, #664]	; (8003ee0 <UART_SetConfig+0xa78>)
 8003c48:	f04f 0400 	mov.w	r4, #0
 8003c4c:	e012      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c4e:	4ba5      	ldr	r3, [pc, #660]	; (8003ee4 <UART_SetConfig+0xa7c>)
 8003c50:	f04f 0400 	mov.w	r4, #0
 8003c54:	e00e      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c56:	a49a      	add	r4, pc, #616	; (adr r4, 8003ec0 <UART_SetConfig+0xa58>)
 8003c58:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003c5c:	e00a      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c5e:	4ba2      	ldr	r3, [pc, #648]	; (8003ee8 <UART_SetConfig+0xa80>)
 8003c60:	f04f 0400 	mov.w	r4, #0
 8003c64:	e006      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c66:	4ba1      	ldr	r3, [pc, #644]	; (8003eec <UART_SetConfig+0xa84>)
 8003c68:	f04f 0400 	mov.w	r4, #0
 8003c6c:	e002      	b.n	8003c74 <UART_SetConfig+0x80c>
 8003c6e:	4b97      	ldr	r3, [pc, #604]	; (8003ecc <UART_SetConfig+0xa64>)
 8003c70:	f04f 0400 	mov.w	r4, #0
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6852      	ldr	r2, [r2, #4]
 8003c78:	0852      	lsrs	r2, r2, #1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	eb13 0b01 	adds.w	fp, r3, r1
 8003c84:	eb44 0c02 	adc.w	ip, r4, r2
 8003c88:	4658      	mov	r0, fp
 8003c8a:	4661      	mov	r1, ip
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f04f 0400 	mov.w	r4, #0
 8003c94:	461a      	mov	r2, r3
 8003c96:	4623      	mov	r3, r4
 8003c98:	f7fc fabe 	bl	8000218 <__aeabi_uldivmod>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	61fb      	str	r3, [r7, #28]
            break;
 8003ca2:	e14a      	b.n	8003f3a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003ca4:	f7fd ff38 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8003ca8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f04f 0100 	mov.w	r1, #0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d067      	beq.n	8003d8a <UART_SetConfig+0x922>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d05e      	beq.n	8003d80 <UART_SetConfig+0x918>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d055      	beq.n	8003d76 <UART_SetConfig+0x90e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d04c      	beq.n	8003d6c <UART_SetConfig+0x904>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d043      	beq.n	8003d62 <UART_SetConfig+0x8fa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2b05      	cmp	r3, #5
 8003ce0:	d03a      	beq.n	8003d58 <UART_SetConfig+0x8f0>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d031      	beq.n	8003d4e <UART_SetConfig+0x8e6>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	2b07      	cmp	r3, #7
 8003cf0:	d028      	beq.n	8003d44 <UART_SetConfig+0x8dc>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d01f      	beq.n	8003d3a <UART_SetConfig+0x8d2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	2b09      	cmp	r3, #9
 8003d00:	d016      	beq.n	8003d30 <UART_SetConfig+0x8c8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b0a      	cmp	r3, #10
 8003d08:	d00d      	beq.n	8003d26 <UART_SetConfig+0x8be>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b0b      	cmp	r3, #11
 8003d10:	d104      	bne.n	8003d1c <UART_SetConfig+0x8b4>
 8003d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d16:	f04f 0400 	mov.w	r4, #0
 8003d1a:	e03a      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d1c:	f04f 0301 	mov.w	r3, #1
 8003d20:	f04f 0400 	mov.w	r4, #0
 8003d24:	e035      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d26:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003d2a:	f04f 0400 	mov.w	r4, #0
 8003d2e:	e030      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d30:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d34:	f04f 0400 	mov.w	r4, #0
 8003d38:	e02b      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d3a:	f04f 0320 	mov.w	r3, #32
 8003d3e:	f04f 0400 	mov.w	r4, #0
 8003d42:	e026      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d44:	f04f 0310 	mov.w	r3, #16
 8003d48:	f04f 0400 	mov.w	r4, #0
 8003d4c:	e021      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d4e:	f04f 030c 	mov.w	r3, #12
 8003d52:	f04f 0400 	mov.w	r4, #0
 8003d56:	e01c      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d58:	f04f 030a 	mov.w	r3, #10
 8003d5c:	f04f 0400 	mov.w	r4, #0
 8003d60:	e017      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d62:	f04f 0308 	mov.w	r3, #8
 8003d66:	f04f 0400 	mov.w	r4, #0
 8003d6a:	e012      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d6c:	f04f 0306 	mov.w	r3, #6
 8003d70:	f04f 0400 	mov.w	r4, #0
 8003d74:	e00d      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d76:	f04f 0304 	mov.w	r3, #4
 8003d7a:	f04f 0400 	mov.w	r4, #0
 8003d7e:	e008      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d80:	f04f 0302 	mov.w	r3, #2
 8003d84:	f04f 0400 	mov.w	r4, #0
 8003d88:	e003      	b.n	8003d92 <UART_SetConfig+0x92a>
 8003d8a:	f04f 0301 	mov.w	r3, #1
 8003d8e:	f04f 0400 	mov.w	r4, #0
 8003d92:	461a      	mov	r2, r3
 8003d94:	4623      	mov	r3, r4
 8003d96:	f7fc fa3f 	bl	8000218 <__aeabi_uldivmod>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4622      	mov	r2, r4
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	f04f 0400 	mov.w	r4, #0
 8003daa:	0214      	lsls	r4, r2, #8
 8003dac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003db0:	020b      	lsls	r3, r1, #8
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6852      	ldr	r2, [r2, #4]
 8003db6:	0852      	lsrs	r2, r2, #1
 8003db8:	4611      	mov	r1, r2
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	eb13 0b01 	adds.w	fp, r3, r1
 8003dc2:	eb44 0c02 	adc.w	ip, r4, r2
 8003dc6:	4658      	mov	r0, fp
 8003dc8:	4661      	mov	r1, ip
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f04f 0400 	mov.w	r4, #0
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4623      	mov	r3, r4
 8003dd6:	f7fc fa1f 	bl	8000218 <__aeabi_uldivmod>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	460c      	mov	r4, r1
 8003dde:	61fb      	str	r3, [r7, #28]
            break;
 8003de0:	e0ab      	b.n	8003f3a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8088 	beq.w	8003efc <UART_SetConfig+0xa94>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d05b      	beq.n	8003eac <UART_SetConfig+0xa44>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d052      	beq.n	8003ea2 <UART_SetConfig+0xa3a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d04a      	beq.n	8003e9a <UART_SetConfig+0xa32>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d041      	beq.n	8003e90 <UART_SetConfig+0xa28>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d039      	beq.n	8003e88 <UART_SetConfig+0xa20>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b06      	cmp	r3, #6
 8003e1a:	d031      	beq.n	8003e80 <UART_SetConfig+0xa18>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2b07      	cmp	r3, #7
 8003e22:	d028      	beq.n	8003e76 <UART_SetConfig+0xa0e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d01f      	beq.n	8003e6c <UART_SetConfig+0xa04>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	2b09      	cmp	r3, #9
 8003e32:	d016      	beq.n	8003e62 <UART_SetConfig+0x9fa>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	2b0a      	cmp	r3, #10
 8003e3a:	d00d      	beq.n	8003e58 <UART_SetConfig+0x9f0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	2b0b      	cmp	r3, #11
 8003e42:	d104      	bne.n	8003e4e <UART_SetConfig+0x9e6>
 8003e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e48:	f04f 0400 	mov.w	r4, #0
 8003e4c:	e05a      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003e4e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003e52:	f04f 0400 	mov.w	r4, #0
 8003e56:	e055      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e5c:	f04f 0400 	mov.w	r4, #0
 8003e60:	e050      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e66:	f04f 0400 	mov.w	r4, #0
 8003e6a:	e04b      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003e6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e70:	f04f 0400 	mov.w	r4, #0
 8003e74:	e046      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003e76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003e7a:	f04f 0400 	mov.w	r4, #0
 8003e7e:	e041      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <UART_SetConfig+0xa88>)
 8003e82:	f04f 0400 	mov.w	r4, #0
 8003e86:	e03d      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003e88:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <UART_SetConfig+0xa8c>)
 8003e8a:	f04f 0400 	mov.w	r4, #0
 8003e8e:	e039      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003e90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e94:	f04f 0400 	mov.w	r4, #0
 8003e98:	e034      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003e9a:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <UART_SetConfig+0xa90>)
 8003e9c:	f04f 0400 	mov.w	r4, #0
 8003ea0:	e030      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003ea2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ea6:	f04f 0400 	mov.w	r4, #0
 8003eaa:	e02b      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003eac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003eb0:	f04f 0400 	mov.w	r4, #0
 8003eb4:	e026      	b.n	8003f04 <UART_SetConfig+0xa9c>
 8003eb6:	bf00      	nop
 8003eb8:	14585500 	.word	0x14585500
 8003ebc:	00000000 	.word	0x00000000
 8003ec0:	28b0aa00 	.word	0x28b0aa00
 8003ec4:	00000000 	.word	0x00000000
 8003ec8:	00f42400 	.word	0x00f42400
 8003ecc:	f4240000 	.word	0xf4240000
 8003ed0:	01e84800 	.word	0x01e84800
 8003ed4:	03d09000 	.word	0x03d09000
 8003ed8:	07a12000 	.word	0x07a12000
 8003edc:	0f424000 	.word	0x0f424000
 8003ee0:	186a0000 	.word	0x186a0000
 8003ee4:	1e848000 	.word	0x1e848000
 8003ee8:	3d090000 	.word	0x3d090000
 8003eec:	7a120000 	.word	0x7a120000
 8003ef0:	000aaa00 	.word	0x000aaa00
 8003ef4:	000ccc00 	.word	0x000ccc00
 8003ef8:	00155500 	.word	0x00155500
 8003efc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003f00:	f04f 0400 	mov.w	r4, #0
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6852      	ldr	r2, [r2, #4]
 8003f08:	0852      	lsrs	r2, r2, #1
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	eb13 0b01 	adds.w	fp, r3, r1
 8003f14:	eb44 0c02 	adc.w	ip, r4, r2
 8003f18:	4658      	mov	r0, fp
 8003f1a:	4661      	mov	r1, ip
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f04f 0400 	mov.w	r4, #0
 8003f24:	461a      	mov	r2, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	f7fc f976 	bl	8000218 <__aeabi_uldivmod>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	61fb      	str	r3, [r7, #28]
            break;
 8003f32:	e002      	b.n	8003f3a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	76fb      	strb	r3, [r7, #27]
            break;
 8003f38:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f40:	d309      	bcc.n	8003f56 <UART_SetConfig+0xaee>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f48:	d205      	bcs.n	8003f56 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	f000 bc18 	b.w	8004786 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	76fb      	strb	r3, [r7, #27]
 8003f5a:	f000 bc14 	b.w	8004786 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f66:	f040 8204 	bne.w	8004372 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8003f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	f200 81df 	bhi.w	8004332 <UART_SetConfig+0xeca>
 8003f74:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <UART_SetConfig+0xb14>)
 8003f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7a:	bf00      	nop
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	08004059 	.word	0x08004059
 8003f84:	08004111 	.word	0x08004111
 8003f88:	08004333 	.word	0x08004333
 8003f8c:	080041b9 	.word	0x080041b9
 8003f90:	08004333 	.word	0x08004333
 8003f94:	08004333 	.word	0x08004333
 8003f98:	08004333 	.word	0x08004333
 8003f9c:	08004271 	.word	0x08004271
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7fd fe28 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d044      	beq.n	8004038 <UART_SetConfig+0xbd0>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d03e      	beq.n	8004034 <UART_SetConfig+0xbcc>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d038      	beq.n	8004030 <UART_SetConfig+0xbc8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d032      	beq.n	800402c <UART_SetConfig+0xbc4>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d02c      	beq.n	8004028 <UART_SetConfig+0xbc0>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b05      	cmp	r3, #5
 8003fd4:	d026      	beq.n	8004024 <UART_SetConfig+0xbbc>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b06      	cmp	r3, #6
 8003fdc:	d020      	beq.n	8004020 <UART_SetConfig+0xbb8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b07      	cmp	r3, #7
 8003fe4:	d01a      	beq.n	800401c <UART_SetConfig+0xbb4>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d014      	beq.n	8004018 <UART_SetConfig+0xbb0>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b09      	cmp	r3, #9
 8003ff4:	d00e      	beq.n	8004014 <UART_SetConfig+0xbac>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b0a      	cmp	r3, #10
 8003ffc:	d008      	beq.n	8004010 <UART_SetConfig+0xba8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b0b      	cmp	r3, #11
 8004004:	d102      	bne.n	800400c <UART_SetConfig+0xba4>
 8004006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800400a:	e016      	b.n	800403a <UART_SetConfig+0xbd2>
 800400c:	2301      	movs	r3, #1
 800400e:	e014      	b.n	800403a <UART_SetConfig+0xbd2>
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	e012      	b.n	800403a <UART_SetConfig+0xbd2>
 8004014:	2340      	movs	r3, #64	; 0x40
 8004016:	e010      	b.n	800403a <UART_SetConfig+0xbd2>
 8004018:	2320      	movs	r3, #32
 800401a:	e00e      	b.n	800403a <UART_SetConfig+0xbd2>
 800401c:	2310      	movs	r3, #16
 800401e:	e00c      	b.n	800403a <UART_SetConfig+0xbd2>
 8004020:	230c      	movs	r3, #12
 8004022:	e00a      	b.n	800403a <UART_SetConfig+0xbd2>
 8004024:	230a      	movs	r3, #10
 8004026:	e008      	b.n	800403a <UART_SetConfig+0xbd2>
 8004028:	2308      	movs	r3, #8
 800402a:	e006      	b.n	800403a <UART_SetConfig+0xbd2>
 800402c:	2306      	movs	r3, #6
 800402e:	e004      	b.n	800403a <UART_SetConfig+0xbd2>
 8004030:	2304      	movs	r3, #4
 8004032:	e002      	b.n	800403a <UART_SetConfig+0xbd2>
 8004034:	2302      	movs	r3, #2
 8004036:	e000      	b.n	800403a <UART_SetConfig+0xbd2>
 8004038:	2301      	movs	r3, #1
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	005a      	lsls	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	441a      	add	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	b29b      	uxth	r3, r3
 8004054:	61fb      	str	r3, [r7, #28]
        break;
 8004056:	e16f      	b.n	8004338 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004058:	f7fd fde2 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 800405c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d044      	beq.n	80040f0 <UART_SetConfig+0xc88>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	2b01      	cmp	r3, #1
 800406c:	d03e      	beq.n	80040ec <UART_SetConfig+0xc84>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	2b02      	cmp	r3, #2
 8004074:	d038      	beq.n	80040e8 <UART_SetConfig+0xc80>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b03      	cmp	r3, #3
 800407c:	d032      	beq.n	80040e4 <UART_SetConfig+0xc7c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b04      	cmp	r3, #4
 8004084:	d02c      	beq.n	80040e0 <UART_SetConfig+0xc78>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	2b05      	cmp	r3, #5
 800408c:	d026      	beq.n	80040dc <UART_SetConfig+0xc74>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2b06      	cmp	r3, #6
 8004094:	d020      	beq.n	80040d8 <UART_SetConfig+0xc70>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	2b07      	cmp	r3, #7
 800409c:	d01a      	beq.n	80040d4 <UART_SetConfig+0xc6c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d014      	beq.n	80040d0 <UART_SetConfig+0xc68>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2b09      	cmp	r3, #9
 80040ac:	d00e      	beq.n	80040cc <UART_SetConfig+0xc64>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	2b0a      	cmp	r3, #10
 80040b4:	d008      	beq.n	80040c8 <UART_SetConfig+0xc60>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	2b0b      	cmp	r3, #11
 80040bc:	d102      	bne.n	80040c4 <UART_SetConfig+0xc5c>
 80040be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040c2:	e016      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e014      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	e012      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040cc:	2340      	movs	r3, #64	; 0x40
 80040ce:	e010      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040d0:	2320      	movs	r3, #32
 80040d2:	e00e      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040d4:	2310      	movs	r3, #16
 80040d6:	e00c      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040d8:	230c      	movs	r3, #12
 80040da:	e00a      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040dc:	230a      	movs	r3, #10
 80040de:	e008      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040e0:	2308      	movs	r3, #8
 80040e2:	e006      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040e4:	2306      	movs	r3, #6
 80040e6:	e004      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040e8:	2304      	movs	r3, #4
 80040ea:	e002      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e000      	b.n	80040f2 <UART_SetConfig+0xc8a>
 80040f0:	2301      	movs	r3, #1
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	005a      	lsls	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	441a      	add	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	b29b      	uxth	r3, r3
 800410c:	61fb      	str	r3, [r7, #28]
        break;
 800410e:	e113      	b.n	8004338 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d043      	beq.n	80041a0 <UART_SetConfig+0xd38>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	2b01      	cmp	r3, #1
 800411e:	d03d      	beq.n	800419c <UART_SetConfig+0xd34>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	2b02      	cmp	r3, #2
 8004126:	d037      	beq.n	8004198 <UART_SetConfig+0xd30>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	2b03      	cmp	r3, #3
 800412e:	d031      	beq.n	8004194 <UART_SetConfig+0xd2c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b04      	cmp	r3, #4
 8004136:	d02b      	beq.n	8004190 <UART_SetConfig+0xd28>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2b05      	cmp	r3, #5
 800413e:	d025      	beq.n	800418c <UART_SetConfig+0xd24>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2b06      	cmp	r3, #6
 8004146:	d01f      	beq.n	8004188 <UART_SetConfig+0xd20>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2b07      	cmp	r3, #7
 800414e:	d019      	beq.n	8004184 <UART_SetConfig+0xd1c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2b08      	cmp	r3, #8
 8004156:	d013      	beq.n	8004180 <UART_SetConfig+0xd18>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b09      	cmp	r3, #9
 800415e:	d00d      	beq.n	800417c <UART_SetConfig+0xd14>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b0a      	cmp	r3, #10
 8004166:	d007      	beq.n	8004178 <UART_SetConfig+0xd10>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2b0b      	cmp	r3, #11
 800416e:	d101      	bne.n	8004174 <UART_SetConfig+0xd0c>
 8004170:	4b8d      	ldr	r3, [pc, #564]	; (80043a8 <UART_SetConfig+0xf40>)
 8004172:	e016      	b.n	80041a2 <UART_SetConfig+0xd3a>
 8004174:	4b8d      	ldr	r3, [pc, #564]	; (80043ac <UART_SetConfig+0xf44>)
 8004176:	e014      	b.n	80041a2 <UART_SetConfig+0xd3a>
 8004178:	4b8d      	ldr	r3, [pc, #564]	; (80043b0 <UART_SetConfig+0xf48>)
 800417a:	e012      	b.n	80041a2 <UART_SetConfig+0xd3a>
 800417c:	4b8d      	ldr	r3, [pc, #564]	; (80043b4 <UART_SetConfig+0xf4c>)
 800417e:	e010      	b.n	80041a2 <UART_SetConfig+0xd3a>
 8004180:	4b8d      	ldr	r3, [pc, #564]	; (80043b8 <UART_SetConfig+0xf50>)
 8004182:	e00e      	b.n	80041a2 <UART_SetConfig+0xd3a>
 8004184:	4b8d      	ldr	r3, [pc, #564]	; (80043bc <UART_SetConfig+0xf54>)
 8004186:	e00c      	b.n	80041a2 <UART_SetConfig+0xd3a>
 8004188:	4b8d      	ldr	r3, [pc, #564]	; (80043c0 <UART_SetConfig+0xf58>)
 800418a:	e00a      	b.n	80041a2 <UART_SetConfig+0xd3a>
 800418c:	4b8d      	ldr	r3, [pc, #564]	; (80043c4 <UART_SetConfig+0xf5c>)
 800418e:	e008      	b.n	80041a2 <UART_SetConfig+0xd3a>
 8004190:	4b8d      	ldr	r3, [pc, #564]	; (80043c8 <UART_SetConfig+0xf60>)
 8004192:	e006      	b.n	80041a2 <UART_SetConfig+0xd3a>
 8004194:	4b8d      	ldr	r3, [pc, #564]	; (80043cc <UART_SetConfig+0xf64>)
 8004196:	e004      	b.n	80041a2 <UART_SetConfig+0xd3a>
 8004198:	4b8d      	ldr	r3, [pc, #564]	; (80043d0 <UART_SetConfig+0xf68>)
 800419a:	e002      	b.n	80041a2 <UART_SetConfig+0xd3a>
 800419c:	4b8d      	ldr	r3, [pc, #564]	; (80043d4 <UART_SetConfig+0xf6c>)
 800419e:	e000      	b.n	80041a2 <UART_SetConfig+0xd3a>
 80041a0:	4b82      	ldr	r3, [pc, #520]	; (80043ac <UART_SetConfig+0xf44>)
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6852      	ldr	r2, [r2, #4]
 80041a6:	0852      	lsrs	r2, r2, #1
 80041a8:	441a      	add	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	61fb      	str	r3, [r7, #28]
        break;
 80041b6:	e0bf      	b.n	8004338 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b8:	f7fd fcae 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 80041bc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d044      	beq.n	8004250 <UART_SetConfig+0xde8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d03e      	beq.n	800424c <UART_SetConfig+0xde4>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d038      	beq.n	8004248 <UART_SetConfig+0xde0>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d032      	beq.n	8004244 <UART_SetConfig+0xddc>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d02c      	beq.n	8004240 <UART_SetConfig+0xdd8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b05      	cmp	r3, #5
 80041ec:	d026      	beq.n	800423c <UART_SetConfig+0xdd4>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b06      	cmp	r3, #6
 80041f4:	d020      	beq.n	8004238 <UART_SetConfig+0xdd0>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b07      	cmp	r3, #7
 80041fc:	d01a      	beq.n	8004234 <UART_SetConfig+0xdcc>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	2b08      	cmp	r3, #8
 8004204:	d014      	beq.n	8004230 <UART_SetConfig+0xdc8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	2b09      	cmp	r3, #9
 800420c:	d00e      	beq.n	800422c <UART_SetConfig+0xdc4>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	2b0a      	cmp	r3, #10
 8004214:	d008      	beq.n	8004228 <UART_SetConfig+0xdc0>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b0b      	cmp	r3, #11
 800421c:	d102      	bne.n	8004224 <UART_SetConfig+0xdbc>
 800421e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004222:	e016      	b.n	8004252 <UART_SetConfig+0xdea>
 8004224:	2301      	movs	r3, #1
 8004226:	e014      	b.n	8004252 <UART_SetConfig+0xdea>
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	e012      	b.n	8004252 <UART_SetConfig+0xdea>
 800422c:	2340      	movs	r3, #64	; 0x40
 800422e:	e010      	b.n	8004252 <UART_SetConfig+0xdea>
 8004230:	2320      	movs	r3, #32
 8004232:	e00e      	b.n	8004252 <UART_SetConfig+0xdea>
 8004234:	2310      	movs	r3, #16
 8004236:	e00c      	b.n	8004252 <UART_SetConfig+0xdea>
 8004238:	230c      	movs	r3, #12
 800423a:	e00a      	b.n	8004252 <UART_SetConfig+0xdea>
 800423c:	230a      	movs	r3, #10
 800423e:	e008      	b.n	8004252 <UART_SetConfig+0xdea>
 8004240:	2308      	movs	r3, #8
 8004242:	e006      	b.n	8004252 <UART_SetConfig+0xdea>
 8004244:	2306      	movs	r3, #6
 8004246:	e004      	b.n	8004252 <UART_SetConfig+0xdea>
 8004248:	2304      	movs	r3, #4
 800424a:	e002      	b.n	8004252 <UART_SetConfig+0xdea>
 800424c:	2302      	movs	r3, #2
 800424e:	e000      	b.n	8004252 <UART_SetConfig+0xdea>
 8004250:	2301      	movs	r3, #1
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	005a      	lsls	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	441a      	add	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	b29b      	uxth	r3, r3
 800426c:	61fb      	str	r3, [r7, #28]
        break;
 800426e:	e063      	b.n	8004338 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	d04f      	beq.n	8004318 <UART_SetConfig+0xeb0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	2b01      	cmp	r3, #1
 800427e:	d048      	beq.n	8004312 <UART_SetConfig+0xeaa>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	2b02      	cmp	r3, #2
 8004286:	d041      	beq.n	800430c <UART_SetConfig+0xea4>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	2b03      	cmp	r3, #3
 800428e:	d03a      	beq.n	8004306 <UART_SetConfig+0xe9e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2b04      	cmp	r3, #4
 8004296:	d033      	beq.n	8004300 <UART_SetConfig+0xe98>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	2b05      	cmp	r3, #5
 800429e:	d02c      	beq.n	80042fa <UART_SetConfig+0xe92>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b06      	cmp	r3, #6
 80042a6:	d025      	beq.n	80042f4 <UART_SetConfig+0xe8c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2b07      	cmp	r3, #7
 80042ae:	d01e      	beq.n	80042ee <UART_SetConfig+0xe86>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d017      	beq.n	80042e8 <UART_SetConfig+0xe80>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	2b09      	cmp	r3, #9
 80042be:	d010      	beq.n	80042e2 <UART_SetConfig+0xe7a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	2b0a      	cmp	r3, #10
 80042c6:	d009      	beq.n	80042dc <UART_SetConfig+0xe74>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	2b0b      	cmp	r3, #11
 80042ce:	d102      	bne.n	80042d6 <UART_SetConfig+0xe6e>
 80042d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042d4:	e022      	b.n	800431c <UART_SetConfig+0xeb4>
 80042d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042da:	e01f      	b.n	800431c <UART_SetConfig+0xeb4>
 80042dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042e0:	e01c      	b.n	800431c <UART_SetConfig+0xeb4>
 80042e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042e6:	e019      	b.n	800431c <UART_SetConfig+0xeb4>
 80042e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ec:	e016      	b.n	800431c <UART_SetConfig+0xeb4>
 80042ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042f2:	e013      	b.n	800431c <UART_SetConfig+0xeb4>
 80042f4:	f241 5354 	movw	r3, #5460	; 0x1554
 80042f8:	e010      	b.n	800431c <UART_SetConfig+0xeb4>
 80042fa:	f641 1398 	movw	r3, #6552	; 0x1998
 80042fe:	e00d      	b.n	800431c <UART_SetConfig+0xeb4>
 8004300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004304:	e00a      	b.n	800431c <UART_SetConfig+0xeb4>
 8004306:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800430a:	e007      	b.n	800431c <UART_SetConfig+0xeb4>
 800430c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004310:	e004      	b.n	800431c <UART_SetConfig+0xeb4>
 8004312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004316:	e001      	b.n	800431c <UART_SetConfig+0xeb4>
 8004318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6852      	ldr	r2, [r2, #4]
 8004320:	0852      	lsrs	r2, r2, #1
 8004322:	441a      	add	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	b29b      	uxth	r3, r3
 800432e:	61fb      	str	r3, [r7, #28]
        break;
 8004330:	e002      	b.n	8004338 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	76fb      	strb	r3, [r7, #27]
        break;
 8004336:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b0f      	cmp	r3, #15
 800433c:	d916      	bls.n	800436c <UART_SetConfig+0xf04>
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d212      	bcs.n	800436c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f023 030f 	bic.w	r3, r3, #15
 800434e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	b29a      	uxth	r2, r3
 800435c:	89fb      	ldrh	r3, [r7, #14]
 800435e:	4313      	orrs	r3, r2
 8004360:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	89fa      	ldrh	r2, [r7, #14]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	e20c      	b.n	8004786 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	76fb      	strb	r3, [r7, #27]
 8004370:	e209      	b.n	8004786 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8004372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004376:	2b08      	cmp	r3, #8
 8004378:	f200 81f4 	bhi.w	8004764 <UART_SetConfig+0x12fc>
 800437c:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <UART_SetConfig+0xf1c>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	080043d9 	.word	0x080043d9
 8004388:	0800448f 	.word	0x0800448f
 800438c:	08004545 	.word	0x08004545
 8004390:	08004765 	.word	0x08004765
 8004394:	080045ef 	.word	0x080045ef
 8004398:	08004765 	.word	0x08004765
 800439c:	08004765 	.word	0x08004765
 80043a0:	08004765 	.word	0x08004765
 80043a4:	080046a5 	.word	0x080046a5
 80043a8:	0001e848 	.word	0x0001e848
 80043ac:	01e84800 	.word	0x01e84800
 80043b0:	0003d090 	.word	0x0003d090
 80043b4:	0007a120 	.word	0x0007a120
 80043b8:	000f4240 	.word	0x000f4240
 80043bc:	001e8480 	.word	0x001e8480
 80043c0:	0028b0aa 	.word	0x0028b0aa
 80043c4:	0030d400 	.word	0x0030d400
 80043c8:	003d0900 	.word	0x003d0900
 80043cc:	00516154 	.word	0x00516154
 80043d0:	007a1200 	.word	0x007a1200
 80043d4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d8:	f7fd fc0c 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 80043dc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d044      	beq.n	8004470 <UART_SetConfig+0x1008>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d03e      	beq.n	800446c <UART_SetConfig+0x1004>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d038      	beq.n	8004468 <UART_SetConfig+0x1000>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d032      	beq.n	8004464 <UART_SetConfig+0xffc>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	2b04      	cmp	r3, #4
 8004404:	d02c      	beq.n	8004460 <UART_SetConfig+0xff8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	2b05      	cmp	r3, #5
 800440c:	d026      	beq.n	800445c <UART_SetConfig+0xff4>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	2b06      	cmp	r3, #6
 8004414:	d020      	beq.n	8004458 <UART_SetConfig+0xff0>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2b07      	cmp	r3, #7
 800441c:	d01a      	beq.n	8004454 <UART_SetConfig+0xfec>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b08      	cmp	r3, #8
 8004424:	d014      	beq.n	8004450 <UART_SetConfig+0xfe8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	2b09      	cmp	r3, #9
 800442c:	d00e      	beq.n	800444c <UART_SetConfig+0xfe4>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	2b0a      	cmp	r3, #10
 8004434:	d008      	beq.n	8004448 <UART_SetConfig+0xfe0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b0b      	cmp	r3, #11
 800443c:	d102      	bne.n	8004444 <UART_SetConfig+0xfdc>
 800443e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004442:	e016      	b.n	8004472 <UART_SetConfig+0x100a>
 8004444:	2301      	movs	r3, #1
 8004446:	e014      	b.n	8004472 <UART_SetConfig+0x100a>
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	e012      	b.n	8004472 <UART_SetConfig+0x100a>
 800444c:	2340      	movs	r3, #64	; 0x40
 800444e:	e010      	b.n	8004472 <UART_SetConfig+0x100a>
 8004450:	2320      	movs	r3, #32
 8004452:	e00e      	b.n	8004472 <UART_SetConfig+0x100a>
 8004454:	2310      	movs	r3, #16
 8004456:	e00c      	b.n	8004472 <UART_SetConfig+0x100a>
 8004458:	230c      	movs	r3, #12
 800445a:	e00a      	b.n	8004472 <UART_SetConfig+0x100a>
 800445c:	230a      	movs	r3, #10
 800445e:	e008      	b.n	8004472 <UART_SetConfig+0x100a>
 8004460:	2308      	movs	r3, #8
 8004462:	e006      	b.n	8004472 <UART_SetConfig+0x100a>
 8004464:	2306      	movs	r3, #6
 8004466:	e004      	b.n	8004472 <UART_SetConfig+0x100a>
 8004468:	2304      	movs	r3, #4
 800446a:	e002      	b.n	8004472 <UART_SetConfig+0x100a>
 800446c:	2302      	movs	r3, #2
 800446e:	e000      	b.n	8004472 <UART_SetConfig+0x100a>
 8004470:	2301      	movs	r3, #1
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	fbb2 f2f3 	udiv	r2, r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	441a      	add	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	b29b      	uxth	r3, r3
 800448a:	61fb      	str	r3, [r7, #28]
        break;
 800448c:	e16d      	b.n	800476a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800448e:	f7fd fbc7 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 8004492:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d044      	beq.n	8004526 <UART_SetConfig+0x10be>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d03e      	beq.n	8004522 <UART_SetConfig+0x10ba>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d038      	beq.n	800451e <UART_SetConfig+0x10b6>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d032      	beq.n	800451a <UART_SetConfig+0x10b2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d02c      	beq.n	8004516 <UART_SetConfig+0x10ae>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	2b05      	cmp	r3, #5
 80044c2:	d026      	beq.n	8004512 <UART_SetConfig+0x10aa>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2b06      	cmp	r3, #6
 80044ca:	d020      	beq.n	800450e <UART_SetConfig+0x10a6>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	2b07      	cmp	r3, #7
 80044d2:	d01a      	beq.n	800450a <UART_SetConfig+0x10a2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d014      	beq.n	8004506 <UART_SetConfig+0x109e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2b09      	cmp	r3, #9
 80044e2:	d00e      	beq.n	8004502 <UART_SetConfig+0x109a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	2b0a      	cmp	r3, #10
 80044ea:	d008      	beq.n	80044fe <UART_SetConfig+0x1096>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2b0b      	cmp	r3, #11
 80044f2:	d102      	bne.n	80044fa <UART_SetConfig+0x1092>
 80044f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044f8:	e016      	b.n	8004528 <UART_SetConfig+0x10c0>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e014      	b.n	8004528 <UART_SetConfig+0x10c0>
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	e012      	b.n	8004528 <UART_SetConfig+0x10c0>
 8004502:	2340      	movs	r3, #64	; 0x40
 8004504:	e010      	b.n	8004528 <UART_SetConfig+0x10c0>
 8004506:	2320      	movs	r3, #32
 8004508:	e00e      	b.n	8004528 <UART_SetConfig+0x10c0>
 800450a:	2310      	movs	r3, #16
 800450c:	e00c      	b.n	8004528 <UART_SetConfig+0x10c0>
 800450e:	230c      	movs	r3, #12
 8004510:	e00a      	b.n	8004528 <UART_SetConfig+0x10c0>
 8004512:	230a      	movs	r3, #10
 8004514:	e008      	b.n	8004528 <UART_SetConfig+0x10c0>
 8004516:	2308      	movs	r3, #8
 8004518:	e006      	b.n	8004528 <UART_SetConfig+0x10c0>
 800451a:	2306      	movs	r3, #6
 800451c:	e004      	b.n	8004528 <UART_SetConfig+0x10c0>
 800451e:	2304      	movs	r3, #4
 8004520:	e002      	b.n	8004528 <UART_SetConfig+0x10c0>
 8004522:	2302      	movs	r3, #2
 8004524:	e000      	b.n	8004528 <UART_SetConfig+0x10c0>
 8004526:	2301      	movs	r3, #1
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	fbb2 f2f3 	udiv	r2, r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	441a      	add	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	fbb2 f3f3 	udiv	r3, r2, r3
 800453e:	b29b      	uxth	r3, r3
 8004540:	61fb      	str	r3, [r7, #28]
        break;
 8004542:	e112      	b.n	800476a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d044      	beq.n	80045d6 <UART_SetConfig+0x116e>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	2b01      	cmp	r3, #1
 8004552:	d03e      	beq.n	80045d2 <UART_SetConfig+0x116a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	2b02      	cmp	r3, #2
 800455a:	d038      	beq.n	80045ce <UART_SetConfig+0x1166>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	2b03      	cmp	r3, #3
 8004562:	d032      	beq.n	80045ca <UART_SetConfig+0x1162>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	2b04      	cmp	r3, #4
 800456a:	d02c      	beq.n	80045c6 <UART_SetConfig+0x115e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b05      	cmp	r3, #5
 8004572:	d026      	beq.n	80045c2 <UART_SetConfig+0x115a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2b06      	cmp	r3, #6
 800457a:	d020      	beq.n	80045be <UART_SetConfig+0x1156>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	2b07      	cmp	r3, #7
 8004582:	d01a      	beq.n	80045ba <UART_SetConfig+0x1152>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	2b08      	cmp	r3, #8
 800458a:	d014      	beq.n	80045b6 <UART_SetConfig+0x114e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	2b09      	cmp	r3, #9
 8004592:	d00e      	beq.n	80045b2 <UART_SetConfig+0x114a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b0a      	cmp	r3, #10
 800459a:	d008      	beq.n	80045ae <UART_SetConfig+0x1146>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	2b0b      	cmp	r3, #11
 80045a2:	d102      	bne.n	80045aa <UART_SetConfig+0x1142>
 80045a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80045a8:	e016      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045aa:	4b81      	ldr	r3, [pc, #516]	; (80047b0 <UART_SetConfig+0x1348>)
 80045ac:	e014      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045ae:	4b81      	ldr	r3, [pc, #516]	; (80047b4 <UART_SetConfig+0x134c>)
 80045b0:	e012      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045b2:	4b81      	ldr	r3, [pc, #516]	; (80047b8 <UART_SetConfig+0x1350>)
 80045b4:	e010      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045b6:	4b81      	ldr	r3, [pc, #516]	; (80047bc <UART_SetConfig+0x1354>)
 80045b8:	e00e      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045ba:	4b81      	ldr	r3, [pc, #516]	; (80047c0 <UART_SetConfig+0x1358>)
 80045bc:	e00c      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045be:	4b81      	ldr	r3, [pc, #516]	; (80047c4 <UART_SetConfig+0x135c>)
 80045c0:	e00a      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045c2:	4b81      	ldr	r3, [pc, #516]	; (80047c8 <UART_SetConfig+0x1360>)
 80045c4:	e008      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045c6:	4b81      	ldr	r3, [pc, #516]	; (80047cc <UART_SetConfig+0x1364>)
 80045c8:	e006      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045ca:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <UART_SetConfig+0x1368>)
 80045cc:	e004      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045ce:	4b81      	ldr	r3, [pc, #516]	; (80047d4 <UART_SetConfig+0x136c>)
 80045d0:	e002      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045d2:	4b81      	ldr	r3, [pc, #516]	; (80047d8 <UART_SetConfig+0x1370>)
 80045d4:	e000      	b.n	80045d8 <UART_SetConfig+0x1170>
 80045d6:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <UART_SetConfig+0x1348>)
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6852      	ldr	r2, [r2, #4]
 80045dc:	0852      	lsrs	r2, r2, #1
 80045de:	441a      	add	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	61fb      	str	r3, [r7, #28]
        break;
 80045ec:	e0bd      	b.n	800476a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ee:	f7fd fa93 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 80045f2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d044      	beq.n	8004686 <UART_SetConfig+0x121e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	2b01      	cmp	r3, #1
 8004602:	d03e      	beq.n	8004682 <UART_SetConfig+0x121a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	2b02      	cmp	r3, #2
 800460a:	d038      	beq.n	800467e <UART_SetConfig+0x1216>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	2b03      	cmp	r3, #3
 8004612:	d032      	beq.n	800467a <UART_SetConfig+0x1212>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	2b04      	cmp	r3, #4
 800461a:	d02c      	beq.n	8004676 <UART_SetConfig+0x120e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2b05      	cmp	r3, #5
 8004622:	d026      	beq.n	8004672 <UART_SetConfig+0x120a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	2b06      	cmp	r3, #6
 800462a:	d020      	beq.n	800466e <UART_SetConfig+0x1206>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	2b07      	cmp	r3, #7
 8004632:	d01a      	beq.n	800466a <UART_SetConfig+0x1202>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	2b08      	cmp	r3, #8
 800463a:	d014      	beq.n	8004666 <UART_SetConfig+0x11fe>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	2b09      	cmp	r3, #9
 8004642:	d00e      	beq.n	8004662 <UART_SetConfig+0x11fa>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	2b0a      	cmp	r3, #10
 800464a:	d008      	beq.n	800465e <UART_SetConfig+0x11f6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2b0b      	cmp	r3, #11
 8004652:	d102      	bne.n	800465a <UART_SetConfig+0x11f2>
 8004654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004658:	e016      	b.n	8004688 <UART_SetConfig+0x1220>
 800465a:	2301      	movs	r3, #1
 800465c:	e014      	b.n	8004688 <UART_SetConfig+0x1220>
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	e012      	b.n	8004688 <UART_SetConfig+0x1220>
 8004662:	2340      	movs	r3, #64	; 0x40
 8004664:	e010      	b.n	8004688 <UART_SetConfig+0x1220>
 8004666:	2320      	movs	r3, #32
 8004668:	e00e      	b.n	8004688 <UART_SetConfig+0x1220>
 800466a:	2310      	movs	r3, #16
 800466c:	e00c      	b.n	8004688 <UART_SetConfig+0x1220>
 800466e:	230c      	movs	r3, #12
 8004670:	e00a      	b.n	8004688 <UART_SetConfig+0x1220>
 8004672:	230a      	movs	r3, #10
 8004674:	e008      	b.n	8004688 <UART_SetConfig+0x1220>
 8004676:	2308      	movs	r3, #8
 8004678:	e006      	b.n	8004688 <UART_SetConfig+0x1220>
 800467a:	2306      	movs	r3, #6
 800467c:	e004      	b.n	8004688 <UART_SetConfig+0x1220>
 800467e:	2304      	movs	r3, #4
 8004680:	e002      	b.n	8004688 <UART_SetConfig+0x1220>
 8004682:	2302      	movs	r3, #2
 8004684:	e000      	b.n	8004688 <UART_SetConfig+0x1220>
 8004686:	2301      	movs	r3, #1
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	fbb2 f2f3 	udiv	r2, r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	61fb      	str	r3, [r7, #28]
        break;
 80046a2:	e062      	b.n	800476a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d04e      	beq.n	800474a <UART_SetConfig+0x12e2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d047      	beq.n	8004744 <UART_SetConfig+0x12dc>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d040      	beq.n	800473e <UART_SetConfig+0x12d6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d039      	beq.n	8004738 <UART_SetConfig+0x12d0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d032      	beq.n	8004732 <UART_SetConfig+0x12ca>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b05      	cmp	r3, #5
 80046d2:	d02b      	beq.n	800472c <UART_SetConfig+0x12c4>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2b06      	cmp	r3, #6
 80046da:	d024      	beq.n	8004726 <UART_SetConfig+0x12be>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b07      	cmp	r3, #7
 80046e2:	d01d      	beq.n	8004720 <UART_SetConfig+0x12b8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d016      	beq.n	800471a <UART_SetConfig+0x12b2>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	2b09      	cmp	r3, #9
 80046f2:	d00f      	beq.n	8004714 <UART_SetConfig+0x12ac>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2b0a      	cmp	r3, #10
 80046fa:	d008      	beq.n	800470e <UART_SetConfig+0x12a6>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	2b0b      	cmp	r3, #11
 8004702:	d101      	bne.n	8004708 <UART_SetConfig+0x12a0>
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	e022      	b.n	800474e <UART_SetConfig+0x12e6>
 8004708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470c:	e01f      	b.n	800474e <UART_SetConfig+0x12e6>
 800470e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004712:	e01c      	b.n	800474e <UART_SetConfig+0x12e6>
 8004714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004718:	e019      	b.n	800474e <UART_SetConfig+0x12e6>
 800471a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800471e:	e016      	b.n	800474e <UART_SetConfig+0x12e6>
 8004720:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004724:	e013      	b.n	800474e <UART_SetConfig+0x12e6>
 8004726:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800472a:	e010      	b.n	800474e <UART_SetConfig+0x12e6>
 800472c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004730:	e00d      	b.n	800474e <UART_SetConfig+0x12e6>
 8004732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004736:	e00a      	b.n	800474e <UART_SetConfig+0x12e6>
 8004738:	f241 5355 	movw	r3, #5461	; 0x1555
 800473c:	e007      	b.n	800474e <UART_SetConfig+0x12e6>
 800473e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004742:	e004      	b.n	800474e <UART_SetConfig+0x12e6>
 8004744:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004748:	e001      	b.n	800474e <UART_SetConfig+0x12e6>
 800474a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6852      	ldr	r2, [r2, #4]
 8004752:	0852      	lsrs	r2, r2, #1
 8004754:	441a      	add	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	b29b      	uxth	r3, r3
 8004760:	61fb      	str	r3, [r7, #28]
        break;
 8004762:	e002      	b.n	800476a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	76fb      	strb	r3, [r7, #27]
        break;
 8004768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2b0f      	cmp	r3, #15
 800476e:	d908      	bls.n	8004782 <UART_SetConfig+0x131a>
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004776:	d204      	bcs.n	8004782 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	e001      	b.n	8004786 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80047a2:	7efb      	ldrb	r3, [r7, #27]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3728      	adds	r7, #40	; 0x28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80047ae:	bf00      	nop
 80047b0:	00f42400 	.word	0x00f42400
 80047b4:	0001e848 	.word	0x0001e848
 80047b8:	0003d090 	.word	0x0003d090
 80047bc:	0007a120 	.word	0x0007a120
 80047c0:	000f4240 	.word	0x000f4240
 80047c4:	00145855 	.word	0x00145855
 80047c8:	00186a00 	.word	0x00186a00
 80047cc:	001e8480 	.word	0x001e8480
 80047d0:	0028b0aa 	.word	0x0028b0aa
 80047d4:	003d0900 	.word	0x003d0900
 80047d8:	007a1200 	.word	0x007a1200

080047dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01a      	beq.n	80048f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048da:	d10a      	bne.n	80048f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]
  }
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af02      	add	r7, sp, #8
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004930:	f7fc f970 	bl	8000c14 <HAL_GetTick>
 8004934:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b08      	cmp	r3, #8
 8004942:	d10e      	bne.n	8004962 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f82c 	bl	80049b0 <UART_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e022      	b.n	80049a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b04      	cmp	r3, #4
 800496e:	d10e      	bne.n	800498e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f816 	bl	80049b0 <UART_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e00c      	b.n	80049a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c0:	e02c      	b.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d028      	beq.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7fc f923 	bl	8000c14 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d11d      	bne.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e00f      	b.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d0c3      	beq.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_UARTEx_DisableFifoMode+0x16>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e027      	b.n	8004aaa <HAL_UARTEx_DisableFifoMode+0x66>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2224      	movs	r2, #36	; 0x24
 8004a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e02d      	b.n	8004b2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2224      	movs	r2, #36	; 0x24
 8004ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f850 	bl	8004bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e02d      	b.n	8004ba6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2224      	movs	r2, #36	; 0x24
 8004b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0201 	bic.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f812 	bl	8004bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b089      	sub	sp, #36	; 0x24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004bb8:	4a2f      	ldr	r2, [pc, #188]	; (8004c78 <UARTEx_SetNbDataToProcess+0xc8>)
 8004bba:	f107 0314 	add.w	r3, r7, #20
 8004bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bc2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004bc6:	4a2d      	ldr	r2, [pc, #180]	; (8004c7c <UARTEx_SetNbDataToProcess+0xcc>)
 8004bc8:	f107 030c 	add.w	r3, r7, #12
 8004bcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bd0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d108      	bne.n	8004bee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bec:	e03d      	b.n	8004c6a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bee:	2308      	movs	r3, #8
 8004bf0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	0e5b      	lsrs	r3, r3, #25
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	0f5b      	lsrs	r3, r3, #29
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004c16:	7fbb      	ldrb	r3, [r7, #30]
 8004c18:	7f3a      	ldrb	r2, [r7, #28]
 8004c1a:	f107 0120 	add.w	r1, r7, #32
 8004c1e:	440a      	add	r2, r1
 8004c20:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004c24:	fb02 f303 	mul.w	r3, r2, r3
 8004c28:	7f3a      	ldrb	r2, [r7, #28]
 8004c2a:	f107 0120 	add.w	r1, r7, #32
 8004c2e:	440a      	add	r2, r1
 8004c30:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004c40:	7ffb      	ldrb	r3, [r7, #31]
 8004c42:	7f7a      	ldrb	r2, [r7, #29]
 8004c44:	f107 0120 	add.w	r1, r7, #32
 8004c48:	440a      	add	r2, r1
 8004c4a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	7f7a      	ldrb	r2, [r7, #29]
 8004c54:	f107 0120 	add.w	r1, r7, #32
 8004c58:	440a      	add	r2, r1
 8004c5a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c6a:	bf00      	nop
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	08004cf0 	.word	0x08004cf0
 8004c7c:	08004cf8 	.word	0x08004cf8

08004c80 <__libc_init_array>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	4e0d      	ldr	r6, [pc, #52]	; (8004cb8 <__libc_init_array+0x38>)
 8004c84:	4c0d      	ldr	r4, [pc, #52]	; (8004cbc <__libc_init_array+0x3c>)
 8004c86:	1ba4      	subs	r4, r4, r6
 8004c88:	10a4      	asrs	r4, r4, #2
 8004c8a:	2500      	movs	r5, #0
 8004c8c:	42a5      	cmp	r5, r4
 8004c8e:	d109      	bne.n	8004ca4 <__libc_init_array+0x24>
 8004c90:	4e0b      	ldr	r6, [pc, #44]	; (8004cc0 <__libc_init_array+0x40>)
 8004c92:	4c0c      	ldr	r4, [pc, #48]	; (8004cc4 <__libc_init_array+0x44>)
 8004c94:	f000 f820 	bl	8004cd8 <_init>
 8004c98:	1ba4      	subs	r4, r4, r6
 8004c9a:	10a4      	asrs	r4, r4, #2
 8004c9c:	2500      	movs	r5, #0
 8004c9e:	42a5      	cmp	r5, r4
 8004ca0:	d105      	bne.n	8004cae <__libc_init_array+0x2e>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ca8:	4798      	blx	r3
 8004caa:	3501      	adds	r5, #1
 8004cac:	e7ee      	b.n	8004c8c <__libc_init_array+0xc>
 8004cae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cb2:	4798      	blx	r3
 8004cb4:	3501      	adds	r5, #1
 8004cb6:	e7f2      	b.n	8004c9e <__libc_init_array+0x1e>
 8004cb8:	08004d20 	.word	0x08004d20
 8004cbc:	08004d20 	.word	0x08004d20
 8004cc0:	08004d20 	.word	0x08004d20
 8004cc4:	08004d24 	.word	0x08004d24

08004cc8 <memset>:
 8004cc8:	4402      	add	r2, r0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <memset+0xa>
 8004cd0:	4770      	bx	lr
 8004cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd6:	e7f9      	b.n	8004ccc <memset+0x4>

08004cd8 <_init>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr

08004ce4 <_fini>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr
